### geigerlog.cfg - The GeigerLog configuration file with default settings

###############################################################################
##    This file is part of GeigerLog.
##
##    GeigerLog is free software: you can redistribute it and/or modify
##    it under the terms of the GNU General Public License as published by
##    the Free Software Foundation, either version 3 of the License, or
##    (at your option) any later version.
##
##    GeigerLog is distributed in the hope that it will be useful,
##    but WITHOUT ANY WARRANTY; without even the implied warranty of
##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.
##
##    You should have received a copy of the GNU General Public License
##    along with GeigerLog.  If not, see <http://www.gnu.org/licenses/>.
###############################################################################

#__author__          = "ullix"
#__copyright__       = "Copyright 2016, 2017, 2018, 2019, 2020"
#__credits__         = [""]
#__license__         = "GPL3"

# Usage:
# All lines beginning with '#' are comments and will be ignored
#
# The structure is:
#       [Section]
#       # comment
#       # options:  value1 | value2 | ...
#       # default = value
#       parameter = value
#
# NOTE: non-acceptable values will be silently ignored, and replaced with
#       defaults, but a debug message will be printed to the terminal and log file
#
# NOTE: There MUST NOT be more than one entry per parameter, or an error
#       will be shown, and the program ends!


[Logging]
# LOGCYCLE:
# GeigerLog's logging cycle in seconds. Can be changed after start
#
# options:  <any number 0.1 or greater>
# default   = 3
logcycle    = 1
#logcycle    = 300

[Folder]
# DATA DIRECTORY:
# A relative path will be relative to the built-in default data folder.
# A relative path must be given as:
# in Linux:     beginning WITHOUT slash ('/')
# in Windows:   beginning WITHOUT drive name (e.g. 'c:') and
#               WITHOUT backslash ('\') or slash ('/')
# An absolute path must be given as:
# in Linux:     beginning WITH slash ('/')
# in Windows:   beginning WITH drive name (e.g. 'c:')
#
# when data is <empty> then there is no change from built-in default
# options:  <empty> | <any folder name NOT ending with slash>
# default  =
data       =


[Defaults]
# With no devices being connected, some values remain undefined. This is
# corrected here with generic defaults

# CALIBRATION:
# given in units of CPM / (µSv/h), individually per tube. If none is given, then
# the defaults will be used.
# NOTE: calibration units now inversed! new = 1 / old
#
# option:                 <any positive number>
# 1st tube: default     = 154  # CPM/(µSv/h), =  0.0065 in old units of µSv/h/CPM
DefaultCalibration1st   = 154

# 2nd tube: default     = 0.194  # as given by GQ, but this value is nonsense
# DefaultCalibration2nd = 0.48   # as determined by myself, see below @ calibration2nd
# Note: synchroton data suggest a calibration factor of 0.42, see below
#                         5.15   # CPM/(µSv/h), =  0.194 in units of µSv/h/CPM
#                         2.08   # CPM/(µSv/h), =  0.48  in units of µSv/h/CPM
DefaultCalibration2nd   = 2.08

# RadMon tube: default  = 154
DefaultCalibration3rd   = 154


[GMCDevice]
# This is valid for all GMC Geiger counter devices.
#
# GMC CONFIGURATION
# to use (yes) or not use (no) a GMC counter
#
# options:      yes | no
# default     = no
GMCActivation = yes
#~GMCActivation = no

# FIRMWARE BUGS
# GQ's firmware has bugs - no surprise for any software. What makes is bad is
# that GQ is dragging their feet when it comes to a complete disclousure of what
# the problem is, and which firmware versions are effected.
# This impacted not only GeigerLog but also their own Dataviewer software.
# So here is an attempt to allow at least for the GeigerLog user to add some
# work-arounds in casemore versions should be affected than currently known

# LOCATION BUG
# The "saving-to-memory" of the counters uses tags (special byte sequences) to
# itentify certain properties needed for the proper parsing of the data.
# Unfortunately, GQ changed the meaning if some tags, when they introduced
# 3 and 4 byte storage values, making these firmwares incompatible with previous
# versions. This was reverted, but devices with that wrong firmware were sold.
# See Reply #50, 21.8.2018:
# http://www.gqelectronicsllc.com/forum/topic.asp?TOPIC_ID=5331
# The known versions are currently GMC-500+Re 1.18, GMC-500+Re 1.21
#
# options:     = <Full Version ID>,<Full Version ID>, <Full Version ID>, ...
# default      = GMC-500+Re 1.18, GMC-500+Re 1.21
locationBug    = GMC-500+Re 1.18, GMC-500+Re 1.21

# SPIR BUG:
# See the manual for an explanation of the firmware bugs.
#
# In 'auto' mode the devices are set to:
# 300 series:  no
# 300E series: yes
# 320 series:  yes
# 500 series:  no
# 600 series:  no
#
# options:    auto | yes | no
# default   = auto
SPIRbugfix  = auto

# SPIRPAGE:
# The memory is organized in pages of 4k (4096) bytes. Due to firmware bugs,
# the history readout may or may not be possible in 4k pages, but only in 2k
# pages. In addition, a bugfix may have to be applied! See manual for details.
#
# In 'auto' mode the devices are set to:
# 300 series:  2k
# 300E series: 4k - bugfix needed!
# 320 series:  4k - bugfix needed!
# 500 series:  2k
# 600 series:  2k
#
# options:    auto | 2k | 4k
# default   = auto
SPIRpage    = auto

# MEMORY:
# The memory is 64kB in the older devices, and 1 MB in the newer ones. If for
# any reason this needs to be changed, it can be configured here.
# 64kB = 2**16 =    65 536 Bytes; fixed setting
# 1MB  = 2**20 = 1 048 576 Bytes; fixed setting
# auto = either 64kB or 1MB, set within GeigerLog
#    In 'auto' mode the devices are set to:
#    300 series: 64kB
#    320 series: 1MB
#    500 series: 1MB
#    600 series: 1MB
#
# options: auto | 64kB | 1MB
# default = auto
memory    = auto

# CONFIGURATION MEMORY SIZE:
# This is separate from the memory! On the older 3XX units it was 256 bytes.
# On the newer 500, 600 units it is 512 bytes.
#
# In 'auto' mode the devices are set to:
# 300 series: 256 bytes
# 320 series: 256 bytes
# 500 series: 512 bytes
# 600 series: 512 bytes
#
# options: auto | 256 | 512
# default  = auto
configsize = auto

# CALIBRATION:
# With the GMC-500+ having 2 tubes, and different ones, an additional 2nd
# calibration factor is needed. This calibration is for the 1st (or only) tube.
#
# The device has 3 calibration points, but they all define only a single-point
# linear calibration of CPM * 0.0065 = µSv/h.
# If set to auto, GeigerLog's internal settings will be used
# If a number is given then this number will be used
#
# In 'auto' mode the devices are set to:
# 300  series: 0.0065   µSv/h / CPM
# 320  series: 0.0065   µSv/h / CPM
# 500  series: 0.0065   µSv/h / CPM
# 500+ series: 0.0065   µSv/h / CPM for the first tube
#              0.1940   µSv/h / CPM for the second tube (is wrong, see below)
# 600  series: 0.0065   µSv/h / CPM
# 600+ series: 0.002637 µSv/h / CPM
#
# options: auto | <any positive number>
# default   = auto
calibration = auto

# CALIBRATION 2nd TUBE:
# see Reply #21 in:
# http://www.gqelectronicsllc.com/forum/topic.asp?TOPIC_ID=5148
# "The GMC-500+ low sensitivity tube conversion rate is 0.194 uSv/h per
# CPM. It is about 30 times less than M4011."
# However, there was a calibration point #3 setting given earlier of
# 25CPM=9.75µSv/h =>0.390 µSv/h/CPM.
#
# see Th and K experiments in:
# http://www.gqelectronicsllc.com/forum/topic.asp?TOPIC_ID=5369
# calibration2nd = 0.4680 # from Th experiment # Reply #1
# calibration2nd = 0.4940 # from K experiment  # Reply #10
# calibration2nd = 0.48   # final  value, see    Reply #10
#
# NOTE:
# synchroton data by user Ikerrg suggest a better factor might be 0.42
# However, it is not known what the energy spectrum of the synchroton is, and
# given the energy dependent sensitivity of geiger tubes, the old value might
# still be valid. It remains unknown.
#
# options:        auto | <any positive number>
# default =       auto
calibration2nd =  auto
#calibration2nd = 0.194   # in the 500+ firmware
#calibration2nd = 0.390   # had been in the 500+ firmware


# VOLTAGE:
# in the 300 series the battery voltage is reported as a single byte, and the
# voltage is byte/10; e.g. a byte value of 41 is 4.1 Volt
# in the 500 and 600 series the volt is reported as a 5 byte ASCII byte string;
# e.g. b'3.76v' is 3.76 Volt
# options: auto | 1 | 5
# default    = auto
voltagebytes = auto

# ENDIANNESS:
# For the three bytes of the calibration µSv/h values the order of bytes has
# changed in the latest firmware. It is now:
# 300 series:       little-endian
# 500 / 600 series: big-endian
# options:     auto | little | big
# default:   = auto
endianness   = auto

# VARIABLES:
# All GMC counter provide CPM and CPS readings. Only the GMC-500+ device,
# having 2 tubes installed, and having at least firmware 1.18, provides
# additional individual readings for each tube as counts per MINUTE (CPM1st and
# CPM2nd) and counts per SECOND (CPS1st and CPS2nd).
#
# The '1st' and '2nd' settings can be activated for all other counters too, and
# will not result in an error, but will provide the exact same as CPM or CPS!
#
# The option 'auto' defaults to 'CPM, CPS' to all counters, except for the
# GMC-500+, where it will be 'CPM, CPS, CPM1st, CPM2nd, CPS1st, CPS2nd'.
#
# Note: On the GMC-500+ both CPM and CPS are useless numbers as they are the
# sum of both tubes: CPM=CPM1st+CPM2nd, CPS=CPS1st+CPS2nd. This is no meaningful
# information!
#
# The option X provides the delta of the device time to the computer time in
# seconds (with 1 sec precision). The GMC-300 series in particular is notoriuous
# for its shifting clock!
#
# options:        auto | <any combination of CPM, CPS, CPM1st, CPS1st, CPM2nd, CPS2nd, X>
# default       = auto
variables       = auto
#variables       = CPM1st, CPS1st, CPM2nd, CPS2nd
#variables       = CPM
#variables       = CPM, CPS, X

# NBYTES:
# the number of bytes returned by the CPM, CPS, CPM1st, CPM2nd, CPS1st and CPS2nd
# commands. Normally this is 2 bytes, but GMC500+ counter with firmware 1.18 or
# later delivers 4 bytes
# options:       auto | 2 | 4
# default       = auto
nbytes          = auto


[GMCSerialPort]
# This is the Serial Port used for GMC Geiger Counters
#
# GMCSerialPort PORT:
# Name of the serial port; different in Linux and Windows
# see manual: Appendix B – Connecting Device and Com­puter using a Serial Connection
#
# options: Linux:   /dev/ttyUSB0 | /dev/ttyUSB1 | /dev/geiger | ... and others
# options: Windows: COM3 | COM4 | COM12 | ... and others
# default  = /dev/ttyUSB0
#~ usbport   = /dev/ttyUSB0
usbport    = /dev/geiger

# GMCSerialPort BAUDRATE:
# The old 300 devices had a default baudrate of 57600; the newer 320, 500 and
# 600 series have a default of 115200.
# NOTE: Baudrate settings may be overwritten by command line options!
# The device ITSELF must have been set to the selected baudrate!
# see Help->Quickstart for instructions and manual
#
# options:   1200 | 2400 | 4800 | 9600 | 14400 | 19200 | 28800 | 38400 | 57600 | 115200
# default  = 115200
#baudrate   = 115200
baudrate   = 57600

# GMCSerialPort TIMEOUT (READ):
# in seconds; for better speed try small number first; 1(fast) ... 10(slow)
# choose greater number when reading problems occur
# NOTE: any number zero or negative will be changed to 3
#
# options:   <any positive number>
# default  = 3
timeout    = 3

# GMCSerialPort TIMEOUT WRITE:
# in seconds; choose greater number when writing problems occur
# NOTE: any number zero or negative will be changed to 1
#
# options:        <any positive number>
# default       = 3
timeout_write   = 3

# GMCSerialPort REGULAR SERIAL PORTS
# In USB Autodiscovery Mode Python will find regular Serial Ports like
# /dev/ttySN, N=1,2,3,... in addition to the USB-to-SERIAL ports.
# All of the GMC counters use only the /dev/ttyUSBN, N=1,2,3,... ports.
# Use these settings:
# ttyS = ignore : Ignore  regular Serial Ports when doing USB Autodiscovery
# ttyS = include: Include regular Serial Ports when doing USB Autodiscovery
#
# options:  ignore | include
# default = ignore
ttyS      = ignore


[AudioCounter]
# Using the PC's internal default audio input (often the microphone) or a USB
# Sound Card to listen to audioclicks from a Geiger counter.
# The clicks must reach close to the
# maximum of the default audio input. The input amplification of the
# PC's sound device should be adjusted accordingly. See the manual for pictures

# AudioCounter ACTIVATION
# to use (yes) or not use (no) the AudioCounter
#
# options:        yes | no
# default       = yes
AudioActivation = yes
#~AudioActivation = no

# AudioCounter DEVICE
# The audio device is specified with 2 values: 1st is input, 2nd is output.
# The available devices can be shown by running: 'python3 gsounddev.py' in the
# GeigerLog directory. The output will be similar to this (some lines removed):
#
#   Available Sound Devices:
#      0 HDA Intel HDMI: 0 (hw:0,3), ALSA (0 in, 8 out)
#      ...
#      4 HDA Intel PCH: ALC887-VD Analog (hw:1,0), ALSA (2 in, 0 out)
#      ...
#      7 USB Audio Device: - (hw:2,0), ALSA (1 in, 2 out)
#      8 hdmi, ALSA (0 in, 8 out)
#      ...
#   * 10 default, ALSA (32 in, 32 out)
#
# Here a total of 11 (0 ... 10) devices are available. Only #4, #7, and #10 have
# inputs available. The star in the leftmost column of #10 marks the default
# device. It also has the name 'default', but it can have any other name, and
# still be the default device! Device #7 is an USB sound card, while the others
# are devices internal of this desktop computer.
#
# If a device is specified as 'None', then the system's default will be used.
# Otherwise specify its name or its number, examples:
#       None, None
#       HDA Intel PCH, 10
#       USB, hdmi
#       7, 8
# The last two lines specify the same devices.
#
# Option auto defaults to None, None
#
# options:        auto | None, None | <<InputDevice Name|Number>, <OutputDevice Name|Number>>
# default       = auto
AudioDevice     = auto
#~AudioDevice     = USB, 9


# AudioCounter LATENCY
# Can be used to finetune the AudioCounter behavior. From experience, and
# dpendent on the sound card, values in sec from 0.05 ... 2.0 may be helpful.
#
# Option auto defaults to 1.0, 1.0
#
# options:        auto | <<any number greater than zero> , <any number greater than zero>>
# default       = auto
AudioLatency    = auto

# AudioCounter PULSEMAX
# The audio input is normally at zero, and for 16bit resolution (as used here)
# the maximum signal is thus plus/minus 32768. However, depending on operating
# system this may be seen as plus/minus 1 or any other range.
# Confirm via menu: Device -> AudioCounter Series -> Plot Audio
#
# Option auto defaults to 32768
#
# options:        auto | <any number greater than zero>
# default       = auto
AudioPulseMax   = auto

# AudioCounter PULSEDIR
# The audio input is normally at zero, and any pulses are either positive or
# negative. Pulses from a GMC300E+, or a SGP-001 are negative
# Confirm via menu: Device -> AudioCounter Series -> Plot Audio
# Option auto defaults to negative
#
# options:        auto | negative | positive
# default       = auto
AudioPulseDir   = auto

# AudioCounter Threshold
# If possible the audio input should be adjusted such that the Geiger pulses
# reach the negative/positive limit. The number given here sets the percentage
# of the maximum possible signal which must be reached in order to trigger a
# count. 60[%] has been a good value so far.
# Confirm via menu: Device -> AudioCounter Series -> Plot Audio
# Option auto defaults to 60
#
# options:        auto | < a positive number less than 100>
# default       = auto
AudioThreshold  = auto

# AudioCounter CALIBRATION:
# To be given in units of CPM/(µSv/h) (previously µSv/h/CPM was used).
# For a GMC counter with a M4011 tube the calibration factor is 154 CPM/(µSv/h)
# (or 0.0065 µSv/h/CPM).
#
# For a SGP-001 device, the manufacturer FTLab specifies it as 0.09 µSv/h/CPM,
# or 11.1 CPM/(µSv/h)
#
# Option 'auto' defaults to 154
#
# options:          auto | <any positive number>
# default         = auto
AudioCalibration  = auto

# AudioCounter VARIABLES:
# All CPM* and CPS* are available (CPM, CPS, CPM1st, CPS1st, CPM2nd, CPS2nd, CPM3rd, CPS3rd)
# but if 2 variables are given, they must be of the M and S type (per minute, per second)
# Make sure the mapping is not in conflict with other devices' mapping!
# Option 'auto' defaults to 'CPM3rd, CPS3rd'
#
# options:        auto | <any combination of CPM*, CPS*, see above>
# default       = auto
AudioVariables  = auto



[I2CSensors]
# Using an I2C BME280 sensor connected via an ELV dongle
# see: https://sourceforge.net/projects/i2cpytools/
#
# I2CSensors Activation
# to use (yes) or not use (no) I2C Device
#
# options:      yes | no
# default     = no
I2CActivation = no
#I2CActivation = yes


# I2CSensors VARIABLES:
# T, P, H (Temperature, Pressure, Humidity) is available on the BOSCH BME280
# sensor, and on the TSL2591 sensor is visible light (relative units) as X
#
# Option 'auto' defaults to 'T, P, H, X'
#
# options:        auto | <any combination of T, P, H, X>
# default       = auto
I2CVariables    = auto
#I2CVariables    = T, P, H, X


[I2CSerialPort]
# This is the Serial Port used for all I2C devices, connected via the ELV dongle
#
# I2CSerialPort PORT:
# Name of the serial port; different in Linux and Windows
# see manual: Appendix B – Connecting Device and Com­puter using a Serial Connection
#
# options: on Linux:   /dev/ttyUSB0 | /dev/ttyUSB1 | /dev/geiger | ... and others
# options: on Windows: COM3 | COM12 | ... and others
# default  = /dev/ttyUSB1
I2Cusbport = /dev/ttyUSB1

# I2CSerialPort BAUDRATE:
# see ELV user manual, chapter 4.2.3 for changing the baudrate
#
# options:    4800 | 9600 | 19200 | 38400 | 57600 | 76800 | 115200 | 230400
# default   = 115200
I2Cbaudrate = 115200

# I2CSerialPort TIMEOUT (READ):
# in seconds; for better speed try small number first; 1(fast) ... 10(slow)
# choose greater number when reading problems occur
# NOTE: any number zero or negative will be set to 3
#
# options:   <any positive number>
# default  = 3
I2Ctimeout = 3

# I2CSerialPort TIMEOUT WRITE:
# in seconds; choose greater number when writing problems occur
# NOTE: any number zero or negative will be set to 1
#
# options:         <any positive number>
# default        = 3
I2Ctimeout_write = 3

# I2CSerialPort REGULAR SERIAL PORTS
# In USB Autodiscovery Mode Python will find regular Serial Ports like
# /dev/ttySN, N=1,2,3,... in addition to the USB-to-SERIAL ports.
# All of the GMC counters use only the /dev/ttyUSBN, N=1,2,3,... ports.
# Use these settings:
# ttyS = ignore : Ignore  regular Serial Ports when doing USB Autodiscovery
# ttyS = include: Include regular Serial Ports when doing USB Autodiscovery
#
# options:  ignore | include
# default = ignore
I2CttyS   = ignore



[GammaScoutDevice]
# Using an Gamma-Scout Geiger counter
# see: https://www.gamma-scout.com/unsere-produkte/
#
# GammaScoutDevice Activation
# to use (yes) or not use (no) GammaScoutDevice
#
# options:      yes | no
# default     = no
GSActivation = no
#GSActivation = yes

# GammaScoutDevice VARIABLES:
# Currently only the NON-LIVE Gamma Scout counters are supported bei GeigerLog,
# which CANNOT log! Thus the only option auto results in "logging not possible!"
#
# Option 'auto' defaults to  "Logging NOT possible"
#
# options:       auto
# default      = auto
GSVariables    = auto

# GammaScoutDevice CALIBRATION:
# The GammaScout device is mapped to CPM1st for counts (in whatever the intervall
# set at the counter), and is mapped to CPM2nd for CPM, as CALCULATED from counts
# and intervall (mapped tp X). The calibration is valid only for the CPM2nd
# auto defaults to 0.009 µSv/h/CPM as determined by ullix
# options:        auto | <any positive number>
# default =       auto
GSCalibration  =  auto


[GammaScoutSerialPort]
# This is the Serial Port used for all Gamma Scout devices
#
# GammaScoutSerialPort PORT:
# Name of the serial port; different in Linux and Windows
# see manual: Appendix B – Connecting Device and Com­puter using a Serial Connection
#
# options: Linux:   /dev/ttyUSB0 | /dev/ttyUSB1 | /dev/geiger | ... and others
# options: Windows: COM3 | COM12 | ... and others
# default  = /dev/ttyUSB2
#GSusbport  = /dev/ttyUSB2
#GSusbport  = COM5
GSusbport  = /dev/ttyS91

# GammaScoutSerialPort BAUDRATE:
# depends on GS Device, but fixed per device
#
# options:    2400 | 9600 | 460800
# default   = 9600
GSbaudrate  = 9600

# GammaScoutSerialPort TIMEOUT (READ):
# in seconds; for better speed try small number first; 1(fast) ... 10(slow)
# choose greater number when reading problems occur
# NOTE: some responses of Gamma-Scout take almost 1 sec, timeout setting must
# be well above the 1 sec limit!
# NOTE: any number zero or negative will be set to 3
#
# options:   <any positive number>
# default  = 3
GStimeout  = 3

# GammaScoutSerialPort TIMEOUT WRITE:
# in seconds; choose greater number when writing problems occur
# NOTE: any number zero or negative will be set to 3
#
# options:         <any positive number>
# default        = 3
GStimeout_write  = 3

# GammaScoutSerialPort REGULAR SERIAL PORTS
# applicable only for Linux; no effect in Windows
# In USB Autodiscovery Mode Python will find regular Serial Ports like
# /dev/ttySN, N=1,2,3,... in addition to the USB-to-SERIAL ports.
# All of the GMC counters use only the /dev/ttyUSBN, N=1,2,3,... ports.
# Use these settings:
# ttyS = ignore : Ignore  regular Serial Ports when doing USB Autodiscovery
# ttyS = include: Include regular Serial Ports when doing USB Autodiscovery
#
# options:  ignore | include
# default = ignore
#GSttyS    = ignore
GSttyS    = include



[RadMonPlusDevice]
# A device from here: https://sites.google.com/site/diygeigercounter/gk-radmon
# The RM+ can act as a Geiger counter providing CPM data, and with an optional
# BME280 sensor additionally acts as an environmental monitor for Temperature,
# Pressure, and Humidity. The RM+ must be configured to send its data to an
# MQTT server. This server's IP must be made known to GeigerLog.
#
# The RM+ update cycle can be configured at the RM+, but it is best set to
# 60sec for CPM readings, and with an extra of about 7 sec for reading the
# environmental sensor and sending the data, the total cycle will be about 67sec.
#
# GeigerLog connects to the MQTT server for new data and logs them. GeigerLog
# can read all 4 variables. If no new data are found, the record contains empty
# values, but logging/displaying/analyzing will not be impacted.

# Demonstration Mode
# A Demo-Mmode can be activated in GeigerLog, which defines my per­sonal
# RadMon+ device as active, and allows any user of GeigerLog to read genuine
# real-time data from a RadMon+.

# RadMonPlusDevice ACTIVATION
# to use (yes) or not use (no) the RadMonPlusDevice
#
# options:        yes | no
# default       = no
RMActivation    = no
#~ RMActivation    = yes

# RadMonPlusDevice SERVER IP:
# The IP can be either a numerical IP like "10.0.0.81" (in local network),
# or "198.41.30.241", or a URL like "mqtt.eclipse.org".
# NOTE: previously used server "iot.eclipse.org" is out-of-service!
# new: https://iot.eclipse.org/getting-started/#sandboxes
# Option auto becomes "mqtt.eclipse.org" (IP: 137.135.83.217)
# other options for IP:
# -  test.mosquitto.org
# -  broker.hivemq.com (tested ok)
# more on: https://github.com/mqtt/mqtt.github.io/wiki/public_brokers
# NOTE: RadMon device may not be able to connect to a server using the
# protocol=mqtt.MQTTv31; it is demanding protocol=mqtt.MQTTv311 !
#
# options:    auto | <IP address>
# default   = auto
RMServerIP  = auto

# RadMonPlusDevice SERVER PORT:
# Standard port is 1883; option auto becomes 1883
#
# options:     auto | <port number>
# default    = auto
RMServerPort = auto

# RadMonPlusDevice SERVER FOLDER:
# This must be the same folder as defined during the setup of the RadMon+ device.
# for details search for MQTT. In MQTT these folders are called 'topics'.
# CAUTION: you get flooded with useless messages when you enter no proper folder!
# A blank (' ') is not allowed in the folder name!
# if no final '/' is given, it will be auto-added
#
# options:        <folder as defined in your RadMon+ device, ending with '/'>
# default       = /
# Demo-Mode:    = geigerlog/
RMServerFolder  = geigerlog/

# RadMonPlusDevice TIMEOUT:
# establishing a connection in a local network takes ~10 milliseconds, but to a
# remote server on poor connections might take several hundred milliseconds.
# To be on the safe side a timeout of 3 sec is set, as used for the serial port
# NOTE: any number zero or negative will be changed to 3
# option auto defaults to 3
#
# options:        auto | <any positive number>
# default       = auto
RMTimeout       = auto

# RadMonPlusDevice CALIBRATION:
# Calibration for the tube used in the RadMon+ setting in units of µSv/h/CPM
# Note: the calibration factor within RadMon+ firmware is ignored.
# Option 'auto' is 0.0065, the number used by GQ for the M4011 tube
#
# options:        auto | <any positive number>
# default      =  auto
#calibration3rd =  auto
RMCalibration  =  auto

# RadMonPlusDevice VARIABLES:
# The RM+ can provide only CPM data, or only T, P, H (Temperature, Pressure,
# Humidity) data, or all 4 of them.
# The CPM values can be mapped to any of the CPM* variables.
# As the T, P, H data come from one sensor, they are either all present or
# none, yet you can select or ignore them individually for logging.
# Option 'auto' defaults to 'T, P, H, CPM3rd'
#
# options:        auto | <any combination of T, P, H, and one of (CPM, CPM1st, CPM2nd, CPM3rd)>
# default       = auto
RMVariables     = auto


[AmbioMonDevice]
# A device in development
#
# The AmbioMonDevice can act as a Geiger counter providing CPM data, and with
# an optional BME280 sensor additionally acts as an environmental monitor for
# Temperature, Pressure, and Humidity. The AmbioMon must be configured to send
# its data to an MQTT server. This server's IP must be made known to GeigerLog.
#
# GeigerLog connects to the MQTT server for new data and logs them. GeigerLog
# can read all variables. If no new data are found, the record contains empty
# values, but logging/displaying/analyzing will not be impacted.
#
# AmbioMonDevice ACTIVATION
# to use (yes) or not use (no) the AmbioMonDevice
#
# options:        yes | no
# default       = no
AmbioActivation = no
#~AmbioActivation = yes


# AmbioMonDevice SERVER IP:
# The IP can be either a numerical IP like "10.0.0.81" (in local network),
# or "198.41.30.241", or a URL like "iot.eclipse.org".
# More options see under RadMonPlusDevice SERVER IP
# Option auto becomes "mqtt.eclipse.org"
#
#~ # options:      auto | <IP address>
#~ # default     = auto
#~ AmbioServerIP = auto
# options:      ambiomon.local | <IP address>
# default     = ambiomon.local
#~AmbioServerIP = ambiomon.local
AmbioServerIP = 10.0.0.75


# AmbioMonDevice TIMEOUT:
# establishing a connection in a local network takes ~10 milliseconds, but to a
# remote server on poor connections might take several hundred milliseconds.
# To be on the safe side a timeout of 3 sec is set, as used for the serial port
# NOTE: any number zero or negative will be changed to 3
# option auto defaults to 3
#
# options:        auto | <any positive number>
# default       = auto
AmbioTimeout    = auto

# AmbioMonDevice CALIBRATION:
# Calibration for the tube used in the AmbioMon in units of µSv/h/CPM
# Option 'auto' is 0.0065, the number used by GQ for the M4011 tube
#
# options:          auto | <any positive number>
# default        =  auto
AmbioCalibration =  auto

# AmbioMonDevice VARIABLES:
# The Ambio can provide only CPM, and CPS data, or only T, P, H, X (Temperature,
# Pressure, Humidity, Air quality) data, or all 6 of them.
# The CPM values can be mapped to any of the CPM*/CPS* variables.
# As the T, P, H, X data come from one sensor, they are either all present or
# none, yet you can select or ignore them individually for logging.
# Option 'auto' defaults to 'CPM, CPS, T, P, H, X'
#
# options:        auto | <any combination of T, P, H, X,
#                             one of (CPM, CPM1st, CPM2nd, CPM3rd)
#                         and one of (CPS, CPS1st, CPS2nd, CPS3rd)>
# default       = auto
AmbioVariables  = auto

# AmbioMonDevice VOLTAGE
# The anode voltage of the AmbioMon device can be set by GeigerLog
#
# options:        <a number from 0 ... 999>
# default       = 450
AmbioVoltage    = 450

# AmbioMonDevice CYCLETIME
# The cycle time of the AmbioMon device in seconds
#
# options:        <a number of 1 or greater>
# default       = 3
AmbioCycletime  = 3

# AmbioMonDevice FREQUENCY
# frequency of driving HV generator; can be set by GeigerLog
#
# options:        < a number from 0 ... 99999>
# default       = 2500
AmbioFrequency  = 2500

# AmbioMonDevice PWM
# Pulse Width Modulation of HV generator; can be set by GeigerLog
#
# options:        <a number from 0.0 ... 1.0>
# default       = 0.5
AmbioPwm        = 0.5


[LabJackDevice]
# NOTE: verfied to work **ONLY** on Linux; it may work on Mac
#       Windows needs a different installation of drivers, not tested
#
# A device of the LabJack category from company LabJack:  https://labjack.com/
# currently only the U3 Series is supported, and only for the use of the
# EI1050 Digital Temperature/Humidity Probe
# https://labjack.com/accessories/ei1050-digital-temperaturehumidity-probe
# The LabJack device is connected via USB bus (true USB, NOT a USB-to-Serial!).
#
# The probe delivers a Temperature and a Humidity value, which are mapped onto
# the variables T and H. In addition the internal temperature of the LabJack U3
# device is mapped onto the X variable (typically a few degrees higher than the
# probe temperature).
#
# If you want to use LabJack, you need additional installations; see header of
# file glabjack.py

# LabJackDevice CONFIGURATION
# to use (yes) or not use (no) LabJack
#
# options:     yes | no
# default    = no
#LJActivation = yes
LJActivation = no

# LabJackDevice VARIABLES:
# T, H, X (Temperature, Humidity, internal temperature) is available
# Option 'auto' defaults to 'T, H, X'
#
# options:        auto | <any combination of T, H, X>
# default       = auto
LJVariables     = auto


[Graphic]
# MOVING AVERAGE:
# in sec; 1 min = 60 sec is adequate for seeing CPS recordded data as CPM equiv
#
# options:    <any number equal or greater than 1>
# default   = 60
mav_initial = 60


[Plotstyle]
# If your plot does not come out as expected, check the geigerlog.proglog file
# for messages; you may have set an unrecognizeable style.

# LINESTYLE:
# Note: linestyle is deprecated; will be ignored.
#
# Allowed names at:
# https://matplotlib.org/gallery/lines_bars_and_markers/line_styles_reference.cycle
# options:  solid | dashed | dashdot | dotted
# default = solid
#linestyle = solid

# LINECOLOR:
# Note: linecolor is deprecated; will be ignored.
#
# The name of the color to be used for lines and markers. Allowed
# color names at https://matplotlib.org/examples/color/named_colors.html
# In addition, colors can be given as values in hexadecimal notation, like
# '#FEBA75' (in RGB order, with leading '#').
# options: these 10 color names are suggested for best contrast: blue, red,
# black, green, orange, cyan, magenta, purple, gold, pink
# default = blue
#linecolor = blue


# LINEWIDTH:
# The width of the line as integer or floating point >= 0. A width of 0 (zero)
# makes the line invisible.
#
# options:  <any number greater or equal to 0>
# default = 1
linewidth = 1

# MARKERSTYLE:
# Allowed styles at:
# https://matplotlib.org/api/markers_api.html#module-matplotlib.markers
#
# options:   "o" (circle)  | "s" (square) | "p" (pentagon) | "*" (star) |
#            "h" (hexagon) | "+" (plus)   | "x" (x)        | "D" (diamond)
# default   = o (small cap o, like in oscar)
markerstyle = o

# MARKERSIZE:
# The size of the marker for a datapoint. A marker size of x has the same
# diameter as a line of width x is wide, i.e. the marker would not be
# visible on the line!
# GeigerLog reduces the markersize with increasing number of data points. This
# is the starting size for a single data point.
#
# options:    <any number greater or equal to 0>
# default   = 15
markersize  = 15


[Window]
# WINDOW POSITION AND SIZE:
# The window is positioned at the top right corner; Dimensions in pixel.
# GeigerLog will run on a screen size as small as 1024x768, but it is cumbersome
# to use and not recommended. Minimum screen size should be 1366x768.
# Depending on Window manager and custom configuration, the default may not
# fit. Change to fit for your screen and settings.
# Default assumes 1366x768 with 2 panels of height 24 and std window bar
#
# options:         <any positive numbers>
# default width  = 1366
#         height = 720
width            = 1366
height           = 720

# WINDOW MAXIMIZE:
# window size can be auto or maximized. On auto it will be tried to set to
# width x height as defined above. On maximized the window will be maximized.
#
# option auto defaults to not-maximized
#
# options:  auto | maximized
# default = auto
size      = auto

# WINDOW STYLE:
# The style determines Look & Feel. The default style is determined by the
# system itself. Each system may only have a subset of the styles listed:
#   Linux:    Breeze, Windows, Motif, CDE, Plastique, GTK+, Cleanlooks, Fusion, ...
#   Windows:  Windows, WindowsXP, WindowsVista, ...
#   Mac:      Aqua, Macintosh, ...
# Find out what your systems has to offer by starting GeigerLog from the command
# line with: 'geigerlog showstyles'
# If an unavailable style is set, then the default is used
#
# option auto defaults to the style selected by the operating system
#
# options:    auto | <see above>
# default   = auto
windowStyle = auto


[Manual]
# Manual NAME:
# Filename of the GeigerLog manual included with the code.
# If set to 'auto' the first found local file beginning with 'GeigerLog-Manual'
# will be used. If none found, GeigerLog looks online.
#
# options:    auto | <full name like: 'GeigerLog-Manual-v0.9.90.pdf'>
# default   = auto
manual_name = auto


[Worldmaps]
# GQ's gmcmap website and url for uploading readings
GMCmapWebsite       = http://www.gmcmap.com
GMCmapURL           = log2.asp

# WiFi setting in your local network
GMCmapSSID          = myssid
GMCmapPassword      = mypassword

# period in min to wait before uploading next value
GMCmapPeriod        = 2

# User and Counter IDs valid for the gmcmap.
# Register at http://www.gmcmap.com/ and obtain a UserID (probably 5 digits)
# and a CounterID (probably 11 digits).
# default        = <empty when undefined>
#GMCmapUserID    =
#GMCmapCounterID =

# Dummy values:
# try these user and counter IDs for testing without creating a bad entry,
# as the server will reject the data with: 'Error! User not found.ERR1.'
GMCmapUserID        = 12345
GMCmapCounterID     = 12345678901


[ValueScaling]
# An option to scale the data with a math formula. The formula may include
# math functions. The scaled data will be logged, not the original data!
#
# Use to apply calibration to the variables. E.g., if Temperatur is 2.4 °C too
# high, you can define to subtract 2.4°C from Temperature.
# Or use it to apply a dead time correction to CPM or CPS.
# Or use it to rescale the Air-Pressure to sealevel.

# + - * / :   basic math
# **:         raise to the power, e.g. 2**8  (=256)
# VAL:        the value to be scaled, the actual measurement value
# LOG:        log to base e; natural log
# LOG10:      log to base 10
# LOG2:       log to base 2
# SIN:        sine
# COS:        cosine
# TAN:        tangent
# SQRT:       square root
# CBRT:       cube root
# ABS:        absolute value

# example:    val - 1000
# example:    SQRT(val) * 5 + 100
# example:    ABS((LOG10(val)+1000)/3.14) + 10

# Content:    val | <math formula> | <empty>
# Default:    val

# if only 'val' is given, then no modification will be applied to the value

# CPM correction for deadtime:
# is defined by formula:      CPM_true = CPM_obs / (1 - cpm_obs * deadtime)
# Deadtime is assumed to be 200µsec
# Deadtime MUST be used in the time unit used for the counts, i.e. if you use:
# CPM: unit is minutes (200µs = 200 * 1E-6 / 60 minutes =  3.333*10E-6 minutes)
# CPS: unit is seconds (200µs = 2*10E-4 seconds)
# take the int of it to not confuse Poisson tests with fractional numbers!
# like so:
# ValueScale["CPM"]    = int(val / (1 - val * 200 * 1E-6 / 60))
# ValueScale["CPS"]    = int(val / (1 - val * 200 * 1E-6))

# Temperature correction, when you have a reference thermometer
# like so:
# T_RM+ calibrated against Greisinger G1720 2018-08-17
# T = val - 1.8

# Pressure reduction to sea level - at altitude < 50m
# "Pressure Reduction Formula", WORLD METEOROLOGICAL ORGANIZATION,
# CIMO/ET-Stand-1/Doc. 10, (20.November.2012)
# chapter 3.11.2 Low-level stations
# At low-level stations (namely, those at a height of less than 50 m above mean
# sea level), pressure readings should be reduced to mean sea level by adding
# to the station pressure a reduction constant C given by the following
# expression: C = p . Hp /29.27 Tv  (3.3)
# valid for heights less than 50m aboe sea level
# p is the observed station pressure in hectopascals; Hp is the station
# elevation in metres; and Tv is the mean annual normal value of virtual
# temperature at the station in kelvins.
# like so:
# ValueScale["P"]      = val + val * 85 / (29.27 * 293)

# Pressure reduction to sea level - any altitude, but needs T
# https://keisan.casio.com/exec/system/1224575267
# Sea level pressure: pressure in [hPa]
# p0 at sea level, p at altitude h[m], T[°C]
# p0 = p * (1 - (0.0065 * h) / (T + 0.0065 * h + 273.15))**(-5.257)
# like so, using h= 85m, T=20°C
# ValueScale["P"]      = val * (1 - (0.0065 * 85) / (20 + 0.0065 * 85 + 273.15))**(-5.257)

CPM    = val
CPS    = val
CPM1st = val
CPS1st = val
CPM2nd = val
CPS2nd = val
CPM3rd = val
CPS3rd = val
T      = val
P      = val
H      = val
X      = val


[GraphScaling]
# This does only change how the variable is plotted; it does NOT change the
# value of the variable as saved as in the 'ValueScaling' case above!
#
# For details on the scaling and formulas see 'ValueScaling' above.
#
# As an example, the Pressure, which is mostly around 1000 +/- 30 hPa, will be
# plotted as: P = P - 1000 to better fit on the ambient scale
# The ambient X value is scaled to limit the value to within something fitting
# into the ambient scale

CPM    = val
CPS    = val
CPM1st = val
CPS1st = val
CPM2nd = val
CPS2nd = val
CPM3rd = val
CPS3rd = val
T      = val
P      = val - 1000
#P      = val
H      = val
#X      = val
X      = (log10(1/VAL) + 3 )*50
