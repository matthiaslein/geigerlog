#! /usr/bin/python3
# -*- coding: utf-8 -*-

"""
GeigerLog - A combination of data logger, data presenter, and data analyzer to
            handle Geiger counters as well as environmental sensors for
            Temperature, Pressure, Humidity, and else

Start as 'geigerlog -h' for help on available options and commands

Use 'GeigerLog-Manual-v<version number>.pdf' for further details
"""

###############################################################################
#    This file is part of GeigerLog.
#
#    GeigerLog is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    GeigerLog is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with GeigerLog.  If not, see <http://www.gnu.org/licenses/>.
###############################################################################

__author__          = "ullix"
__copyright__       = "Copyright 2016, 2017, 2018, 2019, 2020"
__credits__         = [""]
__license__         = "GPL3"


import sys                      # system functions

# With Py2 this does not even get activated, as a syntax check already fails in
# line ~1600 where: msg.exec() is not Python2 compatible!
# (has to be msg.exec_() for Py2!)
#
# Test for proper Python version; Python v3 is required.
# Check must be done up here, as some imports are not possible on Py2!
# Cannot be relocated to gutil.py (tested), as some syntac checks already fail
if sys.version_info[0] < 3:
    msg = """
        This version of GeigerLog requires Python 3!
        Your Python version is: {}

        The preferred way is to upgrade to Python 3. If you can't do that, you
        can download a copy of GeigerLog, which runs on Python 2 from:

        https://sourceforge.net/projects/geigerlog/

        The last version of GeigerLog for Python 2 is GeigerLog 0.9.06.
        Future versions will all be for Python 3.
        """.format(sys.version[:7])
    print("\7")
    print (msg)
    sys.exit(1)

from   gutils            import *

import gcommands
import ghist
import gplot
import gradmon
import gambiomon
import gi2c
import ggscout
import gsounddev
import graspi

import gsql
import gtools
import gsynth

import gpoisson


class ggeiger(QMainWindow):

    def __init__(self):
        super(ggeiger, self).__init__()

        gglobs.exgg = self

        # hold the updated variable values in self.updateDisplayVariableValue()
        self.vlabels = [None] * len(gglobs.varnames)

        #self.setStyleSheet("color: black;") # all colors; black is too black


# font standard
        """
        # font standard
                #self.fontstd = QFont()
                #~self.fontstd = QFont("Deja Vue", 10)
                self.fontstd = QFont("pritzelbmpr", 10)
                #self.fontstd = QFont("Courier New", 10)
                #self.fontstd.setFamily('Monospace')         # options: 'Lucida'
                #~self.fontstd.StyleHint(QFont.TypeWriter)   # options: QFont.Monospace, QFont.Courier
                #self.fontstd.StyleHint(QFont.Monospace)   # options: QFont.Monospace, QFont.Courier
                #self.fontstd.setStyleStrategy(QFont.PreferMatch)
                self.fontstd.setFixedPitch(True)
                #self.fontstd.setPointSize(11) # 11 is too big
                self.fontstd.setWeight(60)            # options: 0 (thin) ... 99 (very thick); 60:ok, 65:too fat

                gglobs.fontstd = self.fontstd
        """
        #print("Platform: ", platform.platform())
        if "WINDOWS" in platform.platform().upper():
            dprint("Operating system detected: Windows, setting font: Consolas")
            self.fontstd = QFont("Consolas", 10)

        elif "LINUX" in platform.platform().upper():
            dprint("Operating system detected: Linux, setting font: Mono")
            self.fontstd = QFont("Mono")

        else:
            dprint("Operating system detected: Other, setting font: Courier New")
            self.fontstd = QFont("Courier New", 10)

        self.fontstd.setFixedPitch(True)
        self.fontstd.setWeight(60)

        gglobs.fontstd = self.fontstd

# window
        self.iconGeigerLog    = QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_geigerlog.png')))
        gglobs.iconGeigerLog  = QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_geigerlog.png')))

        screen_available = QDesktopWidget().availableGeometry()
        #print "screen Geometry:", QDesktopWidget().screenGeometry() # total hardware screen
        #print "screen_available", screen_available, screen_available.x(), screen_available.y(), "width:", screen_available.width(), "height:", screen_available.height()

        sw = min(gglobs.window_width  -  2, screen_available.width() ) # Frame of 1 pixel left and right
        sh = min(gglobs.window_height - 29, screen_available.height()) # Frame top + bottom + Window bar of 29 pixel
        x  = max(screen_available.width() - sw, 0)                     # should be >0 anyway
        y  = screen_available.y()

        if "WINDOWS" in platform.platform().upper(): y += 33           # some correction needed at least on Virtual Win8.1
        if "ARMV"    in platform.platform().upper(): y += 33           # some correction needed at least on Raspi 4

        self.setGeometry(x, y, sw, sh) # position window in upper right corner of screen
        self.setWindowTitle("GeigerLog v{}".format(gglobs.__version__))
        if gglobs.debug:
            self.setWindowTitle("GeigerLog v{} Python: {}  sys.argv: {}".\
            format(gglobs.__version__, sys.version[:6], sys.argv))
        self.setWindowIcon(self.iconGeigerLog)

#figure and its toolbar
        # a figure instance to plot on
        #self.figure = plt.figure(facecolor = "#F9F4C9", edgecolor='lightgray', linewidth = 0.0) # light yellow face
        self.figure, self.ax1 = plt.subplots(facecolor='#DFDEDD') # lighter gray
        plt.clf()  # must be done - clear figure or it will show an empty figure !!

        # canvas - this is the Canvas Widget that displays the `figure`
        # it takes the `figure` instance as a parameter to __init__
        self.canvas = FigureCanvas(self.figure)
        self.canvas.mpl_connect('motion_notify_event', self.updatecursorposition) # where the cursor is
        self.canvas.mpl_connect('button_press_event' , self.onclick)              # send a mouse click

        # this is the figure Navigation widget; it takes the Canvas widget and a parent
        self.navtoolbar = NavigationToolbar(self.canvas, self)
        self.navtoolbar.setToolTip("Graph Toolbar")
        self.navtoolbar.setIconSize(QSize(32,32))

#self.menubar and statusbar and toolbar
        self.menubar = self.menuBar()
        self.menubar.setFocus()

        self.statusBar = QStatusBar()
        self.setStatusBar(self.statusBar)

        toolbar = self.addToolBar('File')
        toolbar.setToolTip("File Toolbar")
        toolbar.setOrientation(Qt.Horizontal) # is default; alt: Qt.Vertical
        toolbar.setIconSize(QSize(32,32))  # standard size is too small
        #print "toolbar.iconSize()", toolbar.iconSize()

#file menu
        PlotLogAction = QAction('Plot Full Log', self)
        addMenuTip(PlotLogAction, 'Plot the complete Log file')
        PlotLogAction.triggered.connect(lambda: self.plotGraph('Log'))

        PlotHisAction = QAction('Plot Full History', self)
        addMenuTip(PlotHisAction, 'Plot the complete History file')
        PlotHisAction.triggered.connect(lambda: self.plotGraph('His'))

        PlotScatterAction = QAction('Show Scatterplot from Plot Data', self)
        addMenuTip(PlotScatterAction, 'Show an X-Y Scatter plot with optional polynomial fit, using data currently selected in the plot')
        PlotScatterAction.triggered.connect(lambda: gtools.selectScatterPlotVars())

        PrintPlotDataAction = QAction('Show Plot Data', self)
        addMenuTip(PrintPlotDataAction, 'Show the DateTime and values of all variables as currently selected in Plot')
        PrintPlotDataAction.triggered.connect(lambda: gtools.printPlotData())

        PrintSuStAction =  QAction('Show Plot Data Summary Statistics (SuSt)', self)
        addMenuTip(PrintSuStAction, "Shows Summary Statistics of all variables and data in the plot")
        PrintSuStAction.triggered.connect(lambda: gtools.printSuSt())

        PrintStatsAction =  QAction('Show Plot Data Statistics', self)
        addMenuTip(PrintStatsAction, "Shows the Statistics of the data in the current plot")
        PrintStatsAction.triggered.connect(lambda: gtools.printStats())

        PlotPoissonAction =  QAction("Show Plot Data Poisson Test", self)
        addMenuTip(PlotPoissonAction, "Shows a Poisson curve on a histogram of the data of the selected variable")
        PlotPoissonAction.triggered.connect(lambda: gpoisson.newplotPoisson())

        PlotFFTAction =  QAction("Show Plot Data FFT && Autocorrelation", self)
        addMenuTip(PlotFFTAction, "Shows the FFT Spectra & an Autocorrelation of the data of the selected variable")
        PlotFFTAction.triggered.connect(gpoisson.newplotFFT)

#saveNotePad
        SaveNPAction = QAction("Save NotePad to File", self)
        addMenuTip(SaveNPAction, "Save Content of NotePad as text file named <current filename>.notes")
        SaveNPAction.triggered.connect(self.saveNotePad)

#printNotePad
        PrintNPAction = QAction("Print NotePad", self)
        addMenuTip(PrintNPAction, "Print Content of NotePad to Printer or  PDF-File")
        PrintNPAction.triggered.connect(self.printNotePad)

        exitAction = QAction('Exit', self)
        exitAction.setIcon(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_exit.png')))) # Flat icon
        #exitAction.setIcon(self.style().standardIcon(QStyle.SP_BrowserStop))              # 3D PyQt icon
        exitAction.setShortcut('Ctrl+Q')
        addMenuTip(exitAction, 'Exit the GeigerLog program')
        exitAction.triggered.connect(self.close)

        fileMenu = self.menubar.addMenu('&File')
        fileMenu.setToolTipsVisible(True)
        fileMenu.addAction(PlotLogAction)
        fileMenu.addAction(PlotHisAction)
        fileMenu.addSeparator()
        fileMenu.addAction(PlotScatterAction)
        fileMenu.addAction(PrintPlotDataAction)
        fileMenu.addAction(PrintSuStAction)
        fileMenu.addAction(PrintStatsAction)
        fileMenu.addAction(PlotPoissonAction)
        fileMenu.addAction(PlotFFTAction)
        fileMenu.addSeparator()
        fileMenu.addAction(SaveNPAction)
        fileMenu.addAction(PrintNPAction)
        fileMenu.addSeparator()
        fileMenu.addAction(exitAction)
        #fileMenu.triggered[QAction].connect(self.processtrigger)

        toolbar.addAction(exitAction)

# Device menu
        self.toggleDeviceConnectionAction = QAction(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_plug_open.png'))), 'Connect / Disconnect Devices', self)
        addMenuTip(self.toggleDeviceConnectionAction, 'Toggle connection of GeigerLog with the devices')
        self.toggleDeviceConnectionAction.triggered.connect(self.toggleDeviceConnection)

        self.DeviceConnectAction = QAction(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_plug_open.png'))), 'Connect Devices', self)
        self.DeviceConnectAction.setShortcut('Ctrl+C')
        addMenuTip(self.DeviceConnectAction, 'Connect the computer to the devices')
        self.DeviceConnectAction.triggered.connect(lambda : self.switchConnections("ON"))

        self.DeviceDisconnectAction = QAction(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_plug_closed.png'))), 'Disconnect Devices', self, enabled = False)
        self.DeviceDisconnectAction.setShortcut('Ctrl+D')
        addMenuTip(self.DeviceDisconnectAction, 'Disconnect the computer from the devices')
        self.DeviceDisconnectAction.triggered.connect(lambda : self.switchConnections("OFF"))

        self.DeviceCalibAction = QAction('Set Calibrations for Geiger Tubes', self, enabled = True)
        addMenuTip(self.DeviceCalibAction, 'Set calibrations for all Geiger tubes temporarily')
        self.DeviceCalibAction.triggered.connect(self.setCalibrationFactors)

        self.DeviceUtilAction = QAction('Show Device Mappings', self, enabled = True)
        addMenuTip(self.DeviceUtilAction, 'Show the mapping of variables of the activated devices')
        self.DeviceUtilAction.triggered.connect(self.showDeviceMappings)

    # submenu GMC
        self.GMCInfoAction = QAction('Show Info', self, enabled=True)
        addMenuTip(self.GMCInfoAction, 'Show basic info on GMC device')
        self.GMCInfoAction.triggered.connect(lambda: self.printGMCDevInfo(extended = False))

        self.DeviceInfoAction = QAction('Show Extended Info', self, enabled=False)
        addMenuTip(self.DeviceInfoAction, 'Show extended info on GMC device')
        self.DeviceInfoAction.triggered.connect(lambda: self.printGMCDevInfo(extended = True))

        self.DeviceConfigAction = QAction('Show Configuration Memory', self, enabled=False)
        addMenuTip(self.DeviceConfigAction, 'Show the GMC device configuration memory as binary in human readable format')
        self.DeviceConfigAction.triggered.connect(self.printGMCDevConfig)

        self.DeviceONAction = QAction('Switch Power ON', self, enabled=False)
        addMenuTip(self.DeviceONAction, 'Switch the GMC device power to ON')
        self.DeviceONAction.triggered.connect(lambda: self.switchGMCPower("ON"))

        self.DeviceOFFAction = QAction('Switch Power OFF', self, enabled=False)
        addMenuTip(self.DeviceOFFAction, 'Switch the GMC device power to OFF')
        self.DeviceOFFAction.triggered.connect(lambda: self.switchGMCPower("OFF"))

        self.DeviceAlarmONAction = QAction('Switch Alarm ON', self, enabled=False)
        addMenuTip(self.DeviceAlarmONAction, 'Switch the GMC device alarm ON')
        self.DeviceAlarmONAction.triggered.connect(lambda: self.switchGMCDeviceAlarm("ON"))

        self.DeviceAlarmOFFAction = QAction('Switch Alarm OFF', self, enabled=False)
        addMenuTip(self.DeviceAlarmOFFAction, 'Switch the GMC device alarm OFF')
        self.DeviceAlarmOFFAction.triggered.connect(lambda: self.switchGMCDeviceAlarm("OFF"))

        self.DeviceSpeakerONAction = QAction('Switch Speaker ON', self, enabled=False)
        addMenuTip(self.DeviceSpeakerONAction, 'Switch the GMC device speaker ON')
        self.DeviceSpeakerONAction.triggered.connect(lambda: self.switchGMCDeviceSpeaker("ON"))

        self.DeviceSpeakerOFFAction = QAction('Switch Speaker OFF', self, enabled=False)
        addMenuTip(self.DeviceSpeakerOFFAction, 'Switch the GMC device speaker OFF')
        self.DeviceSpeakerOFFAction.triggered.connect(lambda: self.switchGMCDeviceSpeaker("OFF"))

        self.DeviceSavingStateAction = QAction(QIcon(QPixmap(os.path.join(gglobs.gresPath, ''))), 'Set History Saving Mode', self, enabled=False)
        addMenuTip(self.DeviceSavingStateAction, 'Set History Saving Mode of GMC device to OFF, CPS, CPM, and CPM hourly average')
        self.DeviceSavingStateAction.triggered.connect(self.setGMCDeviceHistSaveMode)

        self.DeviceSetTimeAction = QAction('Set Date+Time', self, enabled=False)
        addMenuTip(self.DeviceSetTimeAction, 'Set the Date + Time of the GMC device to the computer time')
        self.DeviceSetTimeAction.triggered.connect(self.setGMCDeviceDateTime)

        self.DeviceREBOOTAction = QAction('Reboot', self, enabled=False)
        addMenuTip(self.DeviceREBOOTAction, 'Send REBOOT command to the GMC device')
        self.DeviceREBOOTAction.triggered.connect(self.doREBOOT)

        self.DeviceFACTORYRESETAction = QAction('FACTORYRESET', self, enabled=False)
        addMenuTip(self.DeviceFACTORYRESETAction, 'Send FACTORYRESET command to the GMC device')
        self.DeviceFACTORYRESETAction.triggered.connect(self.doFACTORYRESET)

    # submenu RadMon
        self.RMInfoAction = QAction('Show Info', self, enabled=True)
        addMenuTip(self.RMInfoAction, 'Show basic info on RadMon device')
        self.RMInfoAction.triggered.connect(lambda: self.printRMDevInfo(extended=False))

        self.RMInfoActionExt = QAction('Show Extended Info', self, enabled=False)
        addMenuTip(self.RMInfoActionExt, 'Show extended info on RadMon device')
        self.RMInfoActionExt.triggered.connect(lambda: self.printRMDevInfo(extended = True))

    # submenu AmbioMon
        self.AmbioInfoAction = QAction('Show Info', self, enabled=True)
        addMenuTip(self.AmbioInfoAction, 'Show basic info on AmbioMon device')
        self.AmbioInfoAction.triggered.connect(lambda: self.printAmbioDevInfo(extended=False))

        self.AmbioInfoActionExt = QAction('Show Extended Info', self, enabled=False)
        addMenuTip(self.AmbioInfoActionExt, 'Show extended info on AmbioMon device')
        self.AmbioInfoActionExt.triggered.connect(lambda: self.printAmbioDevInfo(extended = True))

        #~ self.AmbioConfigWiFiAPAction = QAction('Configure WiFi Access Point Mode', self, enabled=False)
        #~ addMenuTip(self.AmbioConfigWiFiAPAction, 'Configure WiFi settings for the AmbioMon device AP mode')
        #~ self.AmbioConfigWiFiAPAction.triggered.connect(gambiomon.configureAM_Wifi_AccessPoint)

        #~ self.AMsetServerIP = QAction('Configure WiFi Station Mode', self, enabled=False)
        #~ addMenuTip(self.AMsetServerIP, 'Configure WiFi settings for the AmbioMon device Station mode')
        #~ self.AMsetServerIP.triggered.connect(gambiomon.AMsetDeviceIP)

        self.AMsetServerIP = QAction('Set AmbioMon Device IP', self, enabled=True)
        addMenuTip(self.AMsetServerIP, 'Set the IP address or Domain Name of the AmbioMon device')
        self.AMsetServerIP.triggered.connect(gambiomon.AMsetDeviceIP)

        #~ self.AmbioConfigAction = QAction('Configure AmbioMon Device', self, enabled=False)
        #~ addMenuTip(self.AmbioConfigAction, 'Configure settings of the AmbioMon device')
        #~ self.AmbioConfigAction.triggered.connect(gambiomon.configureAmbioMon)

        self.AmbioDataAction = QAction('Select Data Type Mode', self, enabled=False)
        addMenuTip(self.AmbioDataAction, "Select what type of data the AmbioMon device sends during logging: 'LAST' for last available data point, or 'AVG' for last 1 minute average")
        self.AmbioDataAction.triggered.connect(gambiomon.AMsetLogDatatype)

    # submenu LabJack
        self.LJInfoAction = QAction('Show Info', self, enabled=True)
        addMenuTip(self.LJInfoAction, 'Show basic info on LabJack device')
        self.LJInfoAction.triggered.connect(lambda: self.printLJDevInfo(extended = False))

        self.LJInfoActionExt = QAction('Show Extended Info', self, enabled=False)
        addMenuTip(self.LJInfoActionExt, 'Show extended info on LabJack device')
        self.LJInfoActionExt.triggered.connect(lambda: self.printLJDevInfo(extended = True))

    # submenu AudioCounter
        self.AudioInfoAction = QAction('Show Info', self, enabled=True)
        addMenuTip(self.AudioInfoAction, 'Show basic info on AudioCounter device')
        self.AudioInfoAction.triggered.connect(lambda: self.printAudioDevInfo(extended = False))

        self.AudioInfoActionExt = QAction('Show Extended Info', self, enabled=False)
        addMenuTip(self.AudioInfoActionExt, 'Show extended info on AudioCounter device')
        self.AudioInfoActionExt.triggered.connect(lambda: self.printAudioDevInfo(extended = True))

        #~self.AudioSwitchAction = QAction("Toggle Pulse Sound", self, enabled=False)
        #~addMenuTip(self.AudioSwitchAction, 'Toggle the AudioCounter Device sound output ON or OFF')
        #~self.AudioSwitchAction.triggered.connect(gaudio.toggleAudioSound)

        self.AudioPlotAction = QAction("Plot Pulse", self, enabled=False)
        addMenuTip(self.AudioPlotAction, 'Plot the audio pulse recordings of the AudioCounter Device')
        #~self.AudioPlotAction.triggered.connect(lambda: gtools.reloaddata("Single Pulse"))
        self.AudioPlotAction.triggered.connect(lambda: gtools.reloaddata("Recording"))

    # submenu I2CSensors
        self.I2CInfoAction = QAction('Show Info', self, enabled=True)
        addMenuTip(self.I2CInfoAction, 'Show basic info on I2C device')
        self.I2CInfoAction.triggered.connect(lambda: self.printI2CDevInfo(extended = False))

        self.I2CInfoActionExt = QAction('Show Extended Info', self, enabled=False)
        addMenuTip(self.I2CInfoActionExt, 'Show extended info on I2C device')
        self.I2CInfoActionExt.triggered.connect(lambda: self.printI2CDevInfo(extended = True))

        self.I2CResetAction = QAction('Reset System', self, enabled=False)
        addMenuTip(self.I2CResetAction, 'Reset the I2C ELV dongle and sensors')
        self.I2CResetAction.triggered.connect(self.doI2CReset)


    # submenu Gamma-Scout counter
        self.GSInfoAction = QAction('Show Info', self, enabled=True)
        addMenuTip(self.GSInfoAction, 'Show basic info on GS device')
        self.GSInfoAction.triggered.connect(lambda: self.printGSDevInfo(extended = False))

        self.GSInfoActionExt = QAction('Show Extended Info', self, enabled=False)
        addMenuTip(self.GSInfoActionExt, 'Show extended info on GS device')
        self.GSInfoActionExt.triggered.connect(lambda: self.printGSDevInfo(extended = True))

        self.GSResetAction = QAction('Set to Normal Mode', self, enabled=False)
        addMenuTip(self.GSResetAction, 'Set the Gamma-Scout counter to its Normal Mode')
        self.GSResetAction.triggered.connect(self.setGStoNormalMode)

        self.GSSetPCModeAction = QAction('Set to PC Mode', self, enabled=False)
        addMenuTip(self.GSSetPCModeAction, 'Set the Gamma-Scout counter to its PC Mode')
        self.GSSetPCModeAction.triggered.connect(self.setGStoPCMode)



    # submenu Raspi
        self.RaspiInfoAction = QAction('Show Info', self, enabled=True)
        addMenuTip(self.RaspiInfoAction, 'Show basic info on Raspi device')
        self.RaspiInfoAction.triggered.connect(lambda: self.printRaspiDevInfo(extended = False))

        self.RaspiInfoActionExt = QAction('Show Extended Info', self, enabled=False)
        addMenuTip(self.RaspiInfoActionExt, 'Show extended info on Raspi device')
        self.RaspiInfoActionExt.triggered.connect(lambda: self.printRaspiDevInfo(extended = True))


    # build the Device menu
        deviceMenu = self.menubar.addMenu('&Device')
        deviceMenu.setToolTipsVisible(True)

    # valid for all devices
        deviceMenu.addAction(self.DeviceConnectAction)
        deviceMenu.addAction(self.DeviceDisconnectAction)
        deviceMenu.addAction(self.DeviceUtilAction)
        deviceMenu.addAction(self.DeviceCalibAction)

    # valid for GMC only
        if gglobs.GMCActivation  :
            deviceSubMenuGMC = deviceMenu.addMenu("GMC Series")
            deviceSubMenuGMC.setToolTipsVisible(True)
            deviceSubMenuGMC.addAction(self.GMCInfoAction)
            deviceSubMenuGMC.addAction(self.DeviceInfoAction)
            deviceSubMenuGMC.addAction(self.DeviceConfigAction)
            deviceSubMenuGMC.addAction(self.DeviceONAction)
            deviceSubMenuGMC.addAction(self.DeviceOFFAction)
            deviceSubMenuGMC.addAction(self.DeviceAlarmONAction)
            deviceSubMenuGMC.addAction(self.DeviceAlarmOFFAction)
            deviceSubMenuGMC.addAction(self.DeviceSpeakerONAction)
            deviceSubMenuGMC.addAction(self.DeviceSpeakerOFFAction)
            deviceSubMenuGMC.addAction(self.DeviceSavingStateAction)
            deviceSubMenuGMC.addAction(self.DeviceSetTimeAction)
            deviceSubMenuGMC.addAction(self.DeviceREBOOTAction)
            deviceSubMenuGMC.addAction(self.DeviceFACTORYRESETAction)
            #deviceMenu.triggered[QAction].connect(self.processtrigger)

    # valid for AudioCounter only
        if gglobs.AudioActivation :
            deviceSubMenuAudio  = deviceMenu.addMenu("AudioCounter Series")
            deviceSubMenuAudio.setToolTipsVisible(True)
            deviceSubMenuAudio.addAction(self.AudioInfoAction)
            deviceSubMenuAudio.addAction(self.AudioInfoActionExt)
            #~deviceSubMenuAudio.addAction(self.AudioSwitchAction)
            #deviceSubMenuAudio.addAction(self.AudioPulseDirAction)
            deviceSubMenuAudio.addAction(self.AudioPlotAction)

    # valid for I2CSensors only
        if gglobs.I2CActivation :
            deviceSubMenuI2C  = deviceMenu.addMenu("I2CSensors Series")
            deviceSubMenuI2C.setToolTipsVisible(True)
            deviceSubMenuI2C.addAction(self.I2CInfoAction)
            deviceSubMenuI2C.addAction(self.I2CInfoActionExt)
            deviceSubMenuI2C.addAction(self.I2CResetAction)

    # valid for RadMon only
        if gglobs.RMActivation  :
            deviceSubMenuRM  = deviceMenu.addMenu("RadMon Series")
            deviceSubMenuRM.setToolTipsVisible(True)
            deviceSubMenuRM.addAction(self.RMInfoAction)
            deviceSubMenuRM.addAction(self.RMInfoActionExt)

    # valid for AmbioMon only
        if gglobs.AmbioActivation  :
            deviceSubMenuAmbio  = deviceMenu.addMenu("AmbioMon Series")
            deviceSubMenuAmbio.setToolTipsVisible(True)
            deviceSubMenuAmbio.addAction(self.AmbioInfoAction)
            deviceSubMenuAmbio.addAction(self.AmbioInfoActionExt)
            #~ deviceSubMenuAmbio.addAction(self.AmbioConfigWiFiAPAction)
            deviceSubMenuAmbio.addAction(self.AMsetServerIP)
            #~ deviceSubMenuAmbio.addAction(self.AmbioConfigAction)
            deviceSubMenuAmbio.addAction(self.AmbioDataAction)


    # valid for LabJack only
        if gglobs.LJActivation  :
            deviceSubMenuLJ  = deviceMenu.addMenu("LabJack Series")
            deviceSubMenuLJ.setToolTipsVisible(True)
            deviceSubMenuLJ.addAction(self.LJInfoAction)
            deviceSubMenuLJ.addAction(self.LJInfoActionExt)


    # valid for Gamma-Scout only
        if gglobs.GSActivation  :
            deviceSubMenuGS  = deviceMenu.addMenu("Gamma-Scout Series")
            deviceSubMenuGS.setToolTipsVisible(True)
            deviceSubMenuGS.addAction(self.GSInfoAction)
            deviceSubMenuGS.addAction(self.GSInfoActionExt)
            deviceSubMenuGS.addAction(self.GSResetAction)
            deviceSubMenuGS.addAction(self.GSSetPCModeAction)



    # valid for Raspi only
        if gglobs.RaspiActivation  :
            deviceSubMenuRaspi  = deviceMenu.addMenu("Raspi Series")
            deviceSubMenuRaspi.setToolTipsVisible(True)
            deviceSubMenuRaspi.addAction(self.RaspiInfoAction)
            deviceSubMenuRaspi.addAction(self.RaspiInfoActionExt)


    # widgets for device in toolbar
        devBtnSize = 60
        # !!! MUST NOT have a colon ':' after QPushButton !!!
        self.dbtnStyleSheetON    = "QPushButton {margin-right:5px; background-color: #12cc3d; border-radius: 2px; border:1px solid silver; color: black; font-size:14px; font-weight:bold}"
        self.dbtnStyleSheetOFF   = "QPushButton {margin-right:5px;  }"
        self.dbtnStyleSheetError = "QPushButton {margin-right:5px; background-color: #ff3333; border-radius: 2px; border:1px solid silver; color: black; font-size:14px; font-weight:bold}"

        self.dbtnGMCPower = QPushButton()
        self.dbtnGMCPower.setIcon(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_power-round_off.png'))))
        self.dbtnGMCPower.setFixedSize(32,33)
        self.dbtnGMCPower.setEnabled(False)
        self.dbtnGMCPower.setStyleSheet("QPushButton {margin-right:1px; border:0px; }")
        self.dbtnGMCPower.setIconSize(QSize(31,31))
        self.dbtnGMCPower.setToolTip ('Toggle GMC Device Power ON / OFF')
        self.dbtnGMCPower.setAutoFillBackground(True) # This is important!! Why???
        self.dbtnGMCPower.clicked.connect(lambda: self.toggleGMCPower())

        self.connectTextGMC = 'GMC'
        self.dbtnGMC = QPushButton(self.connectTextGMC)
        self.dbtnGMC.setFixedSize(devBtnSize,32)
        self.dbtnGMC.setToolTip("GMC Device - Turns green once a connection is made - click for info")
        self.dbtnGMC.setStyleSheet(self.dbtnStyleSheetOFF)
        self.dbtnGMC.setAutoFillBackground(True) # This is important!! Why???
        self.dbtnGMC.clicked.connect(lambda: self.printGMCDevInfo(extended=False))

        self.connectTextRM = 'RadM'
        self.dbtnRM =  QPushButton(self.connectTextRM)
        self.dbtnRM.setFixedSize(devBtnSize,32)
        self.dbtnRM.setToolTip("RadMon Device - Turns green once a connection is made - click for info")
        self.dbtnRM.setStyleSheet(self.dbtnStyleSheetOFF)
        self.dbtnRM.setAutoFillBackground(True) # 'This is important!!'  Why???
        self.dbtnRM.clicked.connect(lambda: self.printRMDevInfo())

        self.connectTextAmbio = 'Ambio'
        self.dbtnAmbio =  QPushButton(self.connectTextAmbio)
        self.dbtnAmbio.setFixedSize(devBtnSize, 32)
        self.dbtnAmbio.setToolTip("AmbioMon Device - Turns green once a connection is made - click for info")
        self.dbtnAmbio.setStyleSheet(self.dbtnStyleSheetOFF)
        self.dbtnAmbio.setAutoFillBackground(True) # 'This is important!!'  Why???
        self.dbtnAmbio.clicked.connect(lambda: self.printAmbioDevInfo())

        self.connectTextLJ = 'LabJ'
        self.dbtnLJ =  QPushButton(self.connectTextLJ)
        self.dbtnLJ.setFixedSize(devBtnSize, 32)
        self.dbtnLJ.setToolTip("LabJack Device - Turns green once a connection is made - click for info")
        self.dbtnLJ.setStyleSheet(self.dbtnStyleSheetOFF)
        self.dbtnLJ.setAutoFillBackground(True) # 'This is important!!'  Why???
        self.dbtnLJ.clicked.connect(lambda: self.printLJDevInfo())

        self.connectTextAudio = 'Audio'
        self.dbtnAudio =  QPushButton(self.connectTextAudio)
        self.dbtnAudio.setFixedSize(devBtnSize, 32)
        self.dbtnAudio.setToolTip("AudioCounter Device - Turns green once a connection is made - click for info")
        self.dbtnAudio.setStyleSheet(self.dbtnStyleSheetOFF)
        self.dbtnAudio.setAutoFillBackground(True) # 'This is important!!'  Why???
        self.dbtnAudio.clicked.connect(lambda: self.printAudioDevInfo())

        self.connectTextI2C = 'I2C'
        self.dbtnI2C =  QPushButton(self.connectTextI2C)
        self.dbtnI2C.setFixedSize(devBtnSize, 32)
        self.dbtnI2C.setToolTip("I2C Device - Turns green once a connection is made - click for info")
        self.dbtnI2C.setStyleSheet(self.dbtnStyleSheetOFF)
        self.dbtnI2C.setAutoFillBackground(True) # 'This is important!!'  Why???
        self.dbtnI2C.clicked.connect(lambda: self.printI2CDevInfo())

        self.connectTextGS = 'GS'
        self.dbtnGS =  QPushButton(self.connectTextGS)
        self.dbtnGS.setFixedSize(devBtnSize, 32)
        self.dbtnGS.setToolTip("GS Device - Turns green once a connection is made - click for info")
        self.dbtnGS.setStyleSheet(self.dbtnStyleSheetOFF)
        self.dbtnGS.setAutoFillBackground(True) # 'This is important!!'  Why???
        self.dbtnGS.clicked.connect(lambda: self.printGSDevInfo())

        self.connectTextRaspi = 'Raspi'
        self.dbtnRaspi = QPushButton(self.connectTextRaspi)
        self.dbtnRaspi.setFixedSize(devBtnSize, 32)
        self.dbtnRaspi.setToolTip("RaspiCounter Device - Turns green once a connection is made - click for info")
        self.dbtnRaspi.setStyleSheet(self.dbtnStyleSheetOFF)
        self.dbtnRaspi.setAutoFillBackground(True) # 'This is important!!'  Why???
        self.dbtnRaspi.clicked.connect(lambda: self.printRaspiDevInfo())



    # toolbar Devices
        toolbar = self.addToolBar('Devices')
        toolbar.setToolTip("Devices Toolbar")
        toolbar.setIconSize(QSize(32,32))    # standard size is too small

        toolbar.addAction(self.toggleDeviceConnectionAction) # Connect icon
        toolbar.addWidget(QLabel("   "))            # spacer
        #toolbar.addAction(self.DevicePowerToggle)   # GMC power icon

        if gglobs.GMCActivation  :
            toolbar.addWidget(self.dbtnGMCPower)        # GMC power icon
            toolbar.addWidget(self.dbtnGMC)             # GMC device display

        if gglobs.AudioActivation  :
            toolbar.addWidget(self.dbtnAudio)           # AudioCounter device display

        if gglobs.I2CActivation  :
            toolbar.addWidget(self.dbtnI2C)             # I2C device display

        if gglobs.RMActivation  :
            toolbar.addWidget(self.dbtnRM)              # RadMon device display

        if gglobs.AmbioActivation  :
            toolbar.addWidget(self.dbtnAmbio)           # AmbioMon device display

        if gglobs.LJActivation  :
            toolbar.addWidget(self.dbtnLJ)              # LabJack device display

        if gglobs.GSActivation  :
            toolbar.addWidget(self.dbtnGS)              # I2C device display

        if gglobs.RaspiActivation  :
            toolbar.addWidget(self.dbtnRaspi)           # Raspi device display



#Log Menu
        self.logLoadFileAction = QAction(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_log_get.png'))), 'Get Log or Create New One', self)
        #self.logLoadFileAction.setShortcut('Ctrl+F')
        self.logLoadFileAction.setShortcut('Ctrl+L')
        addMenuTip(self.logLoadFileAction, 'Load database for logging or create new one, and plot')
        self.logLoadFileAction.triggered.connect(lambda: self.getLogFile(source="Database"))

        self.logLoadCSVAction = QAction(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_log_get_CSV.png'))), 'Get Log from CSV File', self)
        addMenuTip(self.logLoadCSVAction, 'Load existing *.log or other CSV file, convert to database, and plot')
        self.logLoadCSVAction.triggered.connect(lambda: self.getLogFile(source="CSV File"))

        self.startloggingAction = QAction(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_log_start.png'))), 'Start Logging', self, enabled=False)
        #self.startloggingAction.setShortcut('Ctrl+L')
        addMenuTip(self.startloggingAction, 'Start logging from devices')
        self.startloggingAction.triggered.connect(self.startLogging)

        self.stoploggingAction = QAction(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_log_stop.png'))), 'Stop Logging', self, enabled=False)
        #self.stoploggingAction.setShortcut('Ctrl+S')
        addMenuTip(self.stoploggingAction, 'Stop logging from devices')
        self.stoploggingAction.triggered.connect(self.stopLogging)

        self.addCommentAction = QAction(QIcon(QPixmap(os.path.join(gglobs.gresPath, ''))), 'Add Comment to Log', self, enabled=False)
        self.addCommentAction.setShortcut('Ctrl+A')
        addMenuTip(self.addCommentAction, 'Add a comment to the current log')
        self.addCommentAction.triggered.connect(lambda: self.addComment("Log"))

        self.showLogDataAction = QAction('Show Log Data', self)
        addMenuTip(self.showLogDataAction, 'Show all records from current log')
        self.showLogDataAction.triggered.connect(lambda: self.showData("Log", full= True))

        self.showLogTagsAction = QAction('Show Log Data Tags/Comments', self)
        addMenuTip(self.showLogTagsAction, 'Show only records from current log containing tags or comments')
        self.showLogTagsAction.triggered.connect(self.showLogTags)

        self.showLogExcerptAction = QAction('Show Log Data Excerpt', self)
        addMenuTip(self.showLogExcerptAction, 'Show first and last few records of current log')
        self.showLogExcerptAction.triggered.connect(lambda: self.showData("Log", full=False))

        self.quickLogAction = QAction(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_quick_log.png'))), 'Quick Log', self, enabled=False)
        #self.quickLogAction.setShortcut('Ctrl+K')
        addMenuTip(self.quickLogAction, 'One-click log. Saves always into database default.logdb; will be overwritten on next Quick Log click')
        self.quickLogAction.triggered.connect(self.quickLog)

        self.logSnapAction = QAction(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_log_snap.png'))), 'Snap a new log record', self, enabled=False)
        addMenuTip(self.logSnapAction, 'Get a new log record immediately')
        self.logSnapAction.triggered.connect(self.snapLogValue)

        self.setLogTimingAction = QAction(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_log_options.png'))), 'Set Log Timings', self, enabled=True)
        addMenuTip(self.setLogTimingAction, 'Set Log Timings')
        self.setLogTimingAction.triggered.connect(self.setLogTimings)

        self.logSaveCSVAction = QAction('Save Log Data into *.log file (CSV)', self)
        addMenuTip(self.logSaveCSVAction, "Save all records from current log into a CSV file with extension 'log'")
        self.logSaveCSVAction.triggered.connect(lambda: self.saveData("Log", full= True))


        loggingMenu = self.menubar.addMenu('&Log')
        loggingMenu.setToolTipsVisible(True)
        loggingMenu.addAction(self.logLoadFileAction)
        loggingMenu.addAction(self.logLoadCSVAction)
        loggingMenu.addAction(self.addCommentAction)
        loggingMenu.addSeparator()
        loggingMenu.addAction(self.setLogTimingAction)
        loggingMenu.addAction(self.startloggingAction)
        loggingMenu.addAction(self.stoploggingAction)
        loggingMenu.addAction(self.quickLogAction)
        loggingMenu.addSeparator()
        loggingMenu.addAction(self.showLogDataAction)
        loggingMenu.addAction(self.showLogExcerptAction)
        loggingMenu.addAction(self.showLogTagsAction)
        loggingMenu.addSeparator()
        loggingMenu.addAction(self.logSaveCSVAction)

        #loggingMenu.triggered[QAction].connect(self.processtrigger)

        toolbar = self.addToolBar('Log')
        toolbar.setToolTip("Log Toolbar")
        toolbar.setIconSize(QSize(32,32))  # standard size is too small
        toolbar.addAction(self.logLoadFileAction)
        toolbar.addAction(self.logLoadCSVAction)
        toolbar.addAction(self.startloggingAction)
        toolbar.addAction(self.quickLogAction)
        toolbar.addAction(self.logSnapAction)
        toolbar.addAction(self.stoploggingAction)


#History Menu
        self.loadHistDBAction = QAction(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_hist_DB_active.svg.png'))), 'Get History from Database', self)
        self.loadHistDBAction.setShortcut('Ctrl+H')
        addMenuTip(self.loadHistDBAction, 'Load history data from database and plot')
        self.loadHistDBAction.triggered.connect(lambda: self.getHistory("Database"))

        self.loadHistHisAction = QAction(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_hist_CSV.svg.png'))), 'Get History from CSV File', self)
        addMenuTip(self.loadHistHisAction, 'Load existing *.his or other CSV file, convert to database file, and plot')
        self.loadHistHisAction.triggered.connect(lambda: self.getHistory("Parsed File"))

        self.addHistCommentAction = QAction(QIcon(QPixmap(os.path.join(gglobs.gresPath, ''))), 'Add Comment to History', self, enabled=False)
        addMenuTip(self.addHistCommentAction, 'Add a comment to the current history')
        self.addHistCommentAction.triggered.connect(lambda: self.addComment("His"))

        self.histSaveCSVAction = QAction('Save History Data into *.his file (CSV)', self)
        addMenuTip(self.histSaveCSVAction, "Save all records from current history into a CSV file with extension 'his'")
        self.histSaveCSVAction.triggered.connect(lambda: self.saveData("His", full= True))

    # bin data
        self.showHistBinDataAction = QAction('Show History Binary Data', self)
        addMenuTip(self.showHistBinDataAction, 'Show history binary data in human readable form')
        self.showHistBinDataAction.triggered.connect(lambda: self.showData("HisBin"))

        self.showHistBinDataExcerptAction = QAction('Show History Binary Data Excerpt', self)
        addMenuTip(self.showHistBinDataExcerptAction, 'Show first and last few lines of history binary data in human readable form')
        self.showHistBinDataExcerptAction.triggered.connect(lambda: self.showData("HisBin", full=False))

        self.showHistBinDataDetailAction = QAction('Show History Binary Data Bytecount', self)
        addMenuTip(self.showHistBinDataDetailAction, 'Show counts of bytes in history binary data')
        self.showHistBinDataDetailAction.triggered.connect(ghist.printHistDetails)

        self.showHistBinDataSaveAction = QAction('Save History Binary Data to File', self)
        addMenuTip(self.showHistBinDataSaveAction, 'Save the history binary data as a *.bin file')
        self.showHistBinDataSaveAction.triggered.connect(ghist.saveHistBinaryData)


    # tags/comments
        self.showHistHisTagsAction = QAction('Show History Data Tags/Comments', self)
        addMenuTip(self.showHistHisTagsAction, 'Show only records from history containing tags or comments')
        self.showHistHisTagsAction.triggered.connect(self.showHisTags)

    # his data
        self.showHistHisDataAction = QAction('Show History Data', self)
        addMenuTip(self.showHistHisDataAction, 'Show history data as parsed from binary data')
        self.showHistHisDataAction.triggered.connect(lambda: self.showData("His"))

        self.showHistHisDataExcerptAction = QAction('Show History Data Excerpt', self)
        addMenuTip(self.showHistHisDataExcerptAction, 'Show first and last few records of history data parsed from binary data')
        self.showHistHisDataExcerptAction.triggered.connect(lambda: self.showData("His", full=False))


        self.showHistParseAction = QAction("Show History Data with Parse Comments", self)
        addMenuTip(self.showHistParseAction, "Show History Data including extended Parse Comments")
        self.showHistParseAction.triggered.connect(gsql.createParseFromDB)

        self.historyFFAction = QAction("Show History Binary Data as FF Map", self)
        addMenuTip(self.historyFFAction, "Show History Binary Data as a map highlighting the locations of bytes with FF value")
        self.historyFFAction.triggered.connect(gsql.createFFmapFromDB)


        historyMenu = self.menubar.addMenu('&History')
        historyMenu.setToolTipsVisible(True)
        historyMenu.addAction(self.loadHistDBAction)
        historyMenu.addAction(self.loadHistHisAction)
        historyMenu.addAction(self.addHistCommentAction)
        historyMenu.addSeparator()



    # valid for GMC only
        self.histGMCDeviceAction = QAction(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_hist_device_active.png'))), 'Get History from Device ', self, enabled=False)
        addMenuTip(self.histGMCDeviceAction, 'Load history data from any GMC device, create database, and plot')
        self.histGMCDeviceAction.triggered.connect(lambda: self.getHistory("Device"))

        self.loadHistBinAction = QAction(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_hist_bin_active.png'))), 'Get History from GMC Binary File', self)
        addMenuTip(self.loadHistBinAction, 'Load history data from a GMC format binary file and plot')
        self.loadHistBinAction.triggered.connect(lambda: self.getHistory("Binary File"))

        historySubMenuGMC = historyMenu.addMenu("GMC Series")
        historySubMenuGMC.setToolTipsVisible(True)

        historySubMenuGMC.addAction(self.histGMCDeviceAction)
        historySubMenuGMC.addAction(self.loadHistBinAction)

        historySubMenuGMC.addSeparator()
        historySubMenuGMC.addAction(self.showHistBinDataDetailAction) # bytecount
        historySubMenuGMC.addAction(self.showHistBinDataAction)
        historySubMenuGMC.addAction(self.showHistBinDataExcerptAction)
        historySubMenuGMC.addAction(self.historyFFAction)

        historySubMenuGMC.addSeparator()
        historySubMenuGMC.addAction(self.showHistBinDataSaveAction)
        #historyMenu.triggered[QAction].connect(self.processtrigger)


    # valid for GS only
        self.histGSDeviceAction = QAction(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_hist_device_active.png'))), 'Get History from Device ', self, enabled=False)
        addMenuTip(self.histGSDeviceAction, 'Load history data from any Gamma-Scout device, create database, and plot')
        self.histGSDeviceAction.triggered.connect(lambda: self.getHistory("GSDevice"))

        self.histGSDatFileAction = QAction(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_hist_device_active.png'))), 'Get History from Gamma-Scout Dat File ', self)
        addMenuTip(self.histGSDatFileAction, 'Load history data from a Gamma-Scout dat file, create database, and plot')
        self.histGSDatFileAction.triggered.connect(lambda: self.getHistory("GSDatFile"))

        self.showHistDatDataAction = QAction('Show History Dat Data', self)
        addMenuTip(self.showHistDatDataAction, 'Show the history data in Gamma-Scout like *.dat file')
        self.showHistDatDataAction.triggered.connect(ggscout.GSshowDatData)

        self.showHistDatDataSaveAction = QAction('Save History Data to Dat File', self)
        addMenuTip(self.showHistDatDataSaveAction, 'Save the history data as Gamma-Scout *.dat format')
        self.showHistDatDataSaveAction.triggered.connect(ggscout.GSsaveHistDatData)

        historySubMenuGS = historyMenu.addMenu("Gamma Scout Series")
        historySubMenuGS.setToolTipsVisible(True)

        historySubMenuGS.addAction(self.histGSDeviceAction)
        historySubMenuGS.addAction(self.histGSDatFileAction)

        historySubMenuGS.addSeparator()
        historySubMenuGS.addAction(self.showHistDatDataAction)

        historySubMenuGS.addSeparator()
        historySubMenuGS.addAction(self.showHistDatDataSaveAction)



    # valid for Ambiomon only
        self.histAMDeviceCAMAction = QAction(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_hist_device_active.png'))), 'Get History Binary CAM data from Device ', self, enabled=False)
        addMenuTip(self.histAMDeviceCAMAction, 'Load Counter & Ambient history data from AmbioMon device, create database, and plot')
        self.histAMDeviceCAMAction.triggered.connect(lambda: self.getHistory("AMDeviceCAM"))

        self.histAMDeviceCPSAction = QAction(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_hist_device_active.png'))), 'Get History Binary CPS data from Device ', self, enabled=False)
        addMenuTip(self.histAMDeviceCPSAction, 'Load Counts Per Second history data from AmbioMon device, create database, and plot')
        self.histAMDeviceCPSAction.triggered.connect(lambda: self.getHistory("AMDeviceCPS"))

        self.histAMCAMFileAction = QAction(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_hist_device_active.png'))), 'Get History Binary CAM data from File ', self)
        addMenuTip(self.histAMCAMFileAction, 'Load history data from an AmbioMon CAM file, create database, and plot')
        self.histAMCAMFileAction.triggered.connect(lambda: self.getHistory("AMFileCAM"))

        self.histAMCPSFileAction = QAction(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_hist_device_active.png'))), 'Get History Binary CPS data from File ', self)
        addMenuTip(self.histAMCPSFileAction, 'Load history data from an AmbioMon CPS file, create database, and plot')
        self.histAMCPSFileAction.triggered.connect(lambda: self.getHistory("AMFileCPS"))

        #~ self.showHistDatDataAction = QAction('Show History Raw Data', self)
        #~ addMenuTip(self.showHistDatDataAction, 'Show the history data in AmbioMon like *.dat file')
        #~ self.showHistDatDataAction.triggered.connect(gambiomon.AMshowDatData)

        #~ self.showHistDatDataSaveAction = QAction('Save History Raw Data to .csv File', self)
        #~ addMenuTip(self.showHistDatDataSaveAction, 'Save the history data as AmbioMon *.csv format')
        #~ self.showHistDatDataSaveAction.triggered.connect(gambiomon.AMsaveHistDatData)

        historySubMenuAM = historyMenu.addMenu("AmbioMon Series")
        historySubMenuAM.setToolTipsVisible(True)

        historySubMenuAM.addAction(self.histAMDeviceCAMAction)
        historySubMenuAM.addAction(self.histAMDeviceCPSAction)
        historySubMenuAM.addAction(self.histAMCAMFileAction)
        historySubMenuAM.addAction(self.histAMCPSFileAction)

        #~ historySubMenuAM.addSeparator()
        #~ historySubMenuAM.addAction(self.showHistDatDataAction)

        #~ historySubMenuAM.addSeparator()
        #~ historySubMenuAM.addAction(self.showHistDatDataSaveAction)


###################

        historyMenu.addSeparator()
        historyMenu.addAction(self.showHistHisDataAction)
        historyMenu.addAction(self.showHistHisDataExcerptAction)
        historyMenu.addAction(self.showHistHisTagsAction)
        historyMenu.addAction(self.showHistParseAction)

        historyMenu.addSeparator()
        historyMenu.addAction(self.histSaveCSVAction)


        toolbar     = self.addToolBar('History')
        toolbar.setToolTip("History Toolbar")
        toolbar.setIconSize(QSize(32,32))  # standard size is too small
        #toolbar.addAction(self.histGMCDeviceAction)
        toolbar.addAction(self.loadHistDBAction)
        toolbar.addAction(self.loadHistHisAction)
        #toolbar.addAction(self.loadHistBinAction)
        #toolbar.addAction(self.loadHistHisAction)

# Web menu
        # menu entry and toolbar button for Map access
        self.WebAction = QAction(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_map.png'))), 'Update Radiation World Maps', self, enabled=False)
        addMenuTip(self.WebAction, 'Update Radiation World Maps using average of data shown in the plot')
        self.WebAction.triggered.connect(gtools.pushToWeb)

        webMenu = self.menubar.addMenu('&Web')
        webMenu.setToolTipsVisible(True)
        webMenu.addAction(self.WebAction)

        toolbar = self.addToolBar('Web')
        toolbar.setToolTip("Web Toolbar")
        toolbar.setIconSize(QSize(32,32))  # standard size is too small
        toolbar.addAction(self.WebAction)

#Help Menu
        self.helpQickStartAction = QAction('Quickstart', self)
        addMenuTip(self.helpQickStartAction, 'Guidance for an easy start')
        self.helpQickStartAction.triggered.connect(self.helpQuickStart)

        self.helpManualUrlAction = QAction('GeigerLog Manual', self)
        addMenuTip(self.helpManualUrlAction, 'Open the GeigerLog Manual (locally if available, or online)')
        self.helpManualUrlAction.triggered.connect(self.openManual)

        self.helpFirmwareBugAction = QAction("Devices' Firmware Bugs", self)
        addMenuTip(self.helpFirmwareBugAction, 'Info on Firmware Bugs of the Devices and Workarounds')
        self.helpFirmwareBugAction.triggered.connect(self.helpFirmwareBugs)

        self.helpWorldMapsAction = QAction('Radiation World Maps', self)
        addMenuTip(self.helpWorldMapsAction, 'Contributing to the Radiation World Maps')
        self.helpWorldMapsAction.triggered.connect(self.helpWorldMaps)

        self.helpOccupationalRadiationAction = QAction('Occupational Radiation Limits', self)
        addMenuTip(self.helpOccupationalRadiationAction, 'Occupational Radiation Limits in USA and Germany')
        self.helpOccupationalRadiationAction.triggered.connect(self.helpOccupationalRadiation)

        self.DeviceSetUSBportAction = QAction('Show && Select USB Port and Baudrate', self)
        self.DeviceSetUSBportAction.setIcon(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_help_USB.svg.png'))))
        addMenuTip(self.DeviceSetUSBportAction, 'Show all available USB-to-Serial Ports and allow selection of port and baudrate for each device')
        self.DeviceSetUSBportAction.triggered.connect(self.helpSetPort)

        self.helpViewScalingAction = QAction('View and Edit Current Scaling', self)
        addMenuTip(self.helpViewScalingAction, 'View and edit the current value- and graph-scaling settings')
        self.helpViewScalingAction.triggered.connect(self.helpViewScaling)

        self.helpAboutAction = QAction('About GeigerLog', self)
        addMenuTip(self.helpAboutAction, 'About the GeigerLog program')
        self.helpAboutAction.triggered.connect(self.helpAbout)

        #self.helpAboutQTAction = QAction('About Qt', self)
        #addMenuTip(self.helpAboutQTAction, 'About the Qt toolkit used by GeigerLog')
        #self.helpAboutQTAction.triggered.connect(QApplication.aboutQt)

        helpMenu = self.menubar.addMenu('Hel&p')
        helpMenu.setToolTipsVisible(True)
        helpMenu.addAction(self.helpQickStartAction)
        helpMenu.addAction(self.helpManualUrlAction)
        helpMenu.addAction(self.helpFirmwareBugAction)
        helpMenu.addAction(self.helpWorldMapsAction)
        helpMenu.addAction(self.helpOccupationalRadiationAction)

        helpMenu.addSeparator()
        helpMenu.addAction(self.helpViewScalingAction)

        helpMenu.addSeparator()
        helpMenu.addAction(self.DeviceSetUSBportAction)

        self.GMCDevicePortDiscoveryAction = QAction('GMC', self)
        addMenuTip(self.GMCDevicePortDiscoveryAction, 'Find the USB Port connected to a GMC Geiger counter and the Baudrate automatically')
        self.GMCDevicePortDiscoveryAction.triggered.connect(lambda: self.autoDiscoverUSBPort("GMC"))

        self.I2CDevicePortDiscoveryAction = QAction('I2C', self)
        addMenuTip(self.I2CDevicePortDiscoveryAction, 'Find the USB Port connected to an  I2C device and the Baudrate automatically')
        self.I2CDevicePortDiscoveryAction.triggered.connect(lambda: self.autoDiscoverUSBPort("I2C"))

        self.GSDevicePortDiscoveryAction = QAction('GS', self)
        addMenuTip(self.GSDevicePortDiscoveryAction, 'Find the USB Port connected to a Gamma-Scout Geiger counter and the Baudrate automatically')
        self.GSDevicePortDiscoveryAction.triggered.connect(lambda: self.autoDiscoverUSBPort("GS"))

        if not gglobs.GMCActivation: self.GMCDevicePortDiscoveryAction.setEnabled(False)
        if not gglobs.I2CActivation: self.I2CDevicePortDiscoveryAction.setEnabled(False)
        if not gglobs.GSActivation:  self.GSDevicePortDiscoveryAction. setEnabled(False)

        helpSubMenu = helpMenu.addMenu("Autodiscover USB Port for Device: ")
        helpSubMenu.setToolTipsVisible(True)
        helpSubMenu.addAction(self.GMCDevicePortDiscoveryAction)
        helpSubMenu.addAction(self.I2CDevicePortDiscoveryAction)
        helpSubMenu.addAction(self.GSDevicePortDiscoveryAction)
        helpMenu.addSeparator()
        #helpMenu.addAction(self.helpAboutQTAction)
        helpMenu.addAction(self.helpAboutAction)

        #helpMenu.triggered[QAction].connect(self.processtrigger)

        toolbar = self.addToolBar('Help')
        toolbar.setToolTip("Help Toolbar")
        toolbar.setIconSize(QSize(32,32))  # standard size is too small
        toolbar.addAction(self.DeviceSetUSBportAction)


# Devel Menu
        if gglobs.devel:
            showOptionsAction = QAction('Show Command Line Options', self)
            addMenuTip(showOptionsAction, 'Show command line options')
            showOptionsAction.triggered.connect(self.helpOptions)

            changeOptionsAction = QAction('Change Command Line Options', self)
            addMenuTip(changeOptionsAction, 'Allows to change some command line options during running')
            changeOptionsAction.triggered.connect(self.changeOptions)

            showSystemInfoAction = QAction('Show System Info', self)
            addMenuTip(showSystemInfoAction, 'Show Details on the Current Program Settings and Environment')
            showSystemInfoAction.triggered.connect(self.showSystemInfo)

            develIotaAction = QAction("printVarsStatus", self)
            develIotaAction.triggered.connect(lambda: printVarsStatus(origin = "btnEpsilon"))

            develAlphaAction = QAction("Eval_plotFFT", self)
            #develAlphaAction.triggered.connect(self.Eval_plotFFT)
            develAlphaAction.triggered.connect(gpoisson.Eval_plotFFT)

            develBetaAction = QAction("gsynth.createSyntheticLog", self)
            develBetaAction.triggered.connect(gsynth.createSyntheticLog)

            develGammaAction = QAction("popup", self)
            develGammaAction.triggered.connect(self.popup)

            develDeltaAction = QAction("gtools.pushToWeb", self)
            develDeltaAction.triggered.connect(gtools.pushToWeb)

            develPoissAction = QAction("gpoisson.newplotPoisson", self)
            develPoissAction.triggered.connect(gpoisson.newplotPoisson)

            develFFTAction = QAction("gpoisson.newplotFFT", self)
            develFFTAction.triggered.connect(gpoisson.newplotFFT)

            develBingAction = QAction("Bing", self)
            develBingAction.triggered.connect(lambda: playWav(stype = "ok"))

            develBurpAction = QAction("Burp", self)
            develBurpAction.triggered.connect(lambda: playWav(stype = "burp"))

            develMenu = self.menubar.addMenu('D&evel')
            develMenu.setToolTipsVisible(True)

            develMenu.addAction(showOptionsAction)
            develMenu.addAction(changeOptionsAction)
            develMenu.addAction(showSystemInfoAction)
            develMenu.addSeparator()
            develMenu.addAction(develIotaAction)
            develMenu.addAction(develAlphaAction)
            develMenu.addAction(develBetaAction)
            develMenu.addAction(develGammaAction)
            develMenu.addAction(develDeltaAction)
            develMenu.addAction(develPoissAction)
            develMenu.addAction(develFFTAction)
            develMenu.addAction(develBingAction)
            develMenu.addAction(develBurpAction)



# add navigation toolbar as last toolbar
        self.addToolBar(self.navtoolbar)

# DataOptions
    # labels and entry fields
        dltitle  = QLabel("Data")
        dltitle.setFont(QFont("system", weight=QFont.Bold))

        dlcf     = QLabel("Database Files")
        dlcf.setAlignment(Qt.AlignCenter)

        dlcy     = QLabel("Timings")
        dlcy.setAlignment(Qt.AlignCenter)
        dlcy.setFixedWidth(90)

        dlnotepad   = QLabel("NotePad")
        dlnotepad.setAlignment(Qt.AlignCenter)
        dlnotepad.setFixedWidth(90)

        dllog=QLabel("Log:")

        self.dcfLog=QLineEdit()
        self.dcfLog.setReadOnly(True)
        self.dcfLog.setStyleSheet("QLineEdit { background-color: #DFDEDD; color: rgb(80,80,80); }")
        self.dcfLog.setToolTip('The full path of the Log-File if any is loaded')

        self.dcycl  = QPushButton()
        self.dcycl.setToolTip('Current setting of logging cycle in seconds')
        self.dcycl.clicked.connect(self.setLogTimings)
        self.dcycl.setFixedWidth(90)

        dlhist=QLabel("History:")
        self.dcfHis=QLineEdit()
        self.dcfHis.setReadOnly(True)
        self.dcfHis.setStyleSheet("QLineEdit { background-color : #DFDEDD; color : rgb(80,80,80); }")
        self.dcfHis.setToolTip('The full path of the History-File if any is loaded')

        dbtnPlotLog =  QPushButton('Plot')
        dbtnPlotLog.clicked.connect(lambda: self.plotGraph('Log'))
        dbtnPlotLog.setMaximumWidth(36)
        dbtnPlotLog.setToolTip("Plot the Log File")

        dbtnPlotHis =  QPushButton('Plot')
        dbtnPlotHis.clicked.connect(lambda: self.plotGraph('His'))
        dbtnPlotHis.setMaximumWidth(36)
        dbtnPlotHis.setToolTip("Plot the History File")

    # button: clear notepad
        clearbutton    =  QPushButton('Clear')
        clearbutton.clicked.connect(self.clearNotePad)
        clearbutton.setToolTip('Delete all content of the NotePad')
        clearbutton.setFixedWidth(90)

    # button: print data excerpt to notepad
        self.printbutton    =  QPushButton('DataExcerpt')
        self.printbutton.clicked.connect(lambda: self.showData(full=False))
        self.printbutton.setToolTip('Print Log or His Data to the NotePad')
        self.printbutton.setFixedWidth(90)

    # button: select history saving mode
        self.btnHistSaveMode =  QPushButton('Mode: ---')
        self.btnHistSaveMode.clicked.connect(self.setGMCDeviceHistSaveMode)
        self.btnHistSaveMode.setFixedWidth(90)
        self.btnHistSaveMode.setEnabled(False)
        self.btnHistSaveMode.setToolTip('Select the History Saving Mode')

    # separator lines - vertical
        vlinedB0 = QFrame()
        vlinedB0.setFrameShape(QFrame.VLine)

    # layout the Data Options
        dataOptions=QGridLayout()
        #dataOptions.setContentsMargins(*self.ContentsMargins)

        row = 0
        dataOptions.addWidget(dltitle,                 row, 0)
        # 1 is empty
        dataOptions.addWidget(dlcf,                    row, 2)
        dataOptions.addWidget(dlcy,                    row, 3)
        dataOptions.addWidget(vlinedB0,                row, 4, 4, 1)
        dataOptions.addWidget(dlnotepad,               row, 5)

        row = 1
        dataOptions.addWidget(dllog,                   row, 0)
        dataOptions.addWidget(dbtnPlotLog,             row, 1)
        dataOptions.addWidget(self.dcfLog,             row, 2)
        dataOptions.addWidget(self.dcycl,              row, 3)
        # 4 is empty (vline)
        dataOptions.addWidget(self.printbutton,        row, 5)

        row = 2
        dataOptions.addWidget(dlhist,                  row, 0)
        dataOptions.addWidget(dbtnPlotHis,             row, 1)
        dataOptions.addWidget(self.dcfHis,             row, 2)
        dataOptions.addWidget(self.btnHistSaveMode,    row, 3)
        # 4 is empty (vline)
        dataOptions.addWidget(clearbutton,             row, 5)

        # group Data Options into Groupbox
        dataOptionsGroup = QGroupBox()
        dataOptionsGroup.setContentsMargins(0,0,0,0)
        #dataOptionsGroup.setStyleSheet("background-color:lightpink;")
        dataOptionsGroup.setStyleSheet("QGroupBox {border-style: solid; border-width: 1px; border-color: silver;}")
        dataOptionsGroup.setLayout(dataOptions)
        dataOptionsGroup.setMaximumHeight(200)  # not relevant as notepad gives stretch


# GraphOptions
        ltitle  = QLabel("Graph")
        ltitle.setFont(QFont("system", weight=QFont.Bold))

        lmin    = QLabel("Min")
        lmin.setAlignment(Qt.AlignCenter)

        lmax    = QLabel("Max")
        lmax.setAlignment(Qt.AlignCenter)

        #btnSetCalib =  QPushButton('Set Calibs')
        #btnSetCalib.clicked.connect(self.setCalibrationFactors)
        #btnSetCalib.setFixedWidth(70)
        #btnSetCalib.setToolTip("Set Calibrations for all tubes temporarily")


        btnSetCalib =  QPushButton('Scaling')
        btnSetCalib.clicked.connect(self.helpViewScaling)
        btnSetCalib.setFixedWidth(70)
        btnSetCalib.setToolTip("View and edit scaling of the variables")


        lunit   = QLabel("Units")
        lunit.setAlignment(Qt.AlignCenter)

        ewidth = 120
        lcounts = QLabel("Counter")
        ly2     = QLabel("Ambient")
        ltime   = QLabel("Time")

        self.ymin = QLineEdit()
        self.ymin.setToolTip('Minimum setting for Counter axis')

        self.ymax = QLineEdit()
        self.ymax.setToolTip('Maximum setting for Counter axis')

        self.yunit = QComboBox()
        self.yunit.addItems(["CPM", "µSv/h"])
        self.yunit.setMaximumWidth(70)
        self.yunit.setToolTip('Select the Count Unit for the plot')
        self.yunit.currentIndexChanged.connect(self.changedGraphCountUnit)

        self.y2min=QLineEdit()
        self.y2min.setToolTip('Minimum setting for Ambient axis')

        self.y2max=QLineEdit()
        self.y2max.setToolTip('Maximum setting for Ambient axis')

        self.y2unit = QComboBox()
        self.y2unit.addItems(["°C", "°F"])
        self.y2unit.setMaximumWidth(70)
        self.y2unit.setToolTip('Select the Temperature Unit')
        self.y2unit.currentIndexChanged.connect(self.changedGraphTemperatureUnit)

        self.xmin=QLineEdit()
        self.xmin.setToolTip('The minimum (left) limit of the time to be shown. Enter manuallly or by left-mouse-click on the graph')

        self.xmax=QLineEdit()
        self.xmax.setToolTip('The maximum (right) limit of the time to be shown. Enter manuallly or by right-mouse-click on the graph')

        self.xunit = QComboBox()
        self.xunit.addItems(["Time", "auto", "second", "minute", "hour", "day"])
        self.xunit.setMaximumWidth(70)
        self.xunit.currentIndexChanged.connect(self.changedGraphTimeUnit)
        self.xunit.setToolTip('The time axis to be shown as Time-of-Day (Time) or time since first record in seconds, minutes, hours, days; auto selects most appropriate period')

        # The drop-down selector for selected variable
        self.select = QComboBox()
        self.select.setToolTip('The data to be selected for analysis')
        self.select.setEnabled(False)
        self.select.currentIndexChanged.connect(self.changedGraphSelectedVariable)
        self.select.setMaxVisibleItems(12)
        for vname in gglobs.varnames:
            self.select.addItems([gglobs.vardict[vname][0]])

        # The checkboxes to select the displayed variables
        self.varDisplayCheckbox = {}
        for vname in gglobs.varnames:
            vshort = gglobs.vardict[vname][1]
            vlong  = gglobs.vardict[vname][0]

            self.varDisplayCheckbox[vname] = QCheckBox    (vshort)
            self.varDisplayCheckbox[vname].setToolTip     (vlong)
            self.varDisplayCheckbox[vname].setChecked     (False)
            self.varDisplayCheckbox[vname].setEnabled     (False)
            self.varDisplayCheckbox[vname].setTristate    (False)

            # "double lambda needed for closure" WTF???
            self.varDisplayCheckbox[vname].stateChanged.connect((lambda x: lambda: self.changedGraphDisplayCheckboxes(x))(vname))

        chk_width = 20

        self.avgbox = QCheckBox("Avg")
        self.avgbox.setLayoutDirection(Qt.RightToLeft)
        self.avgbox.setChecked(gglobs.avgChecked)
        self.avgbox.setTristate (False)
        self.avgbox.setToolTip("If checked, Average and ±95% lines will be shown")
        self.avgbox.stateChanged.connect(self.changedGraphOptionsAvg)

        self.mavbox = QCheckBox("MvAvg")
        self.mavbox.setLayoutDirection(Qt.RightToLeft)
        self.mavbox.setChecked(gglobs.mavChecked)
        self.mavbox.setTristate (False)
        self.mavbox.setToolTip('If checked a Moving Average line will be drawn')
        self.mavbox.stateChanged.connect(self.changedGraphOptionsMav)

        self.mav=QLineEdit()
        self.mav.setMinimumWidth(50)
        self.mav.setMaximumWidth(50)
        self.mav.setToolTip('Enter the Moving Average smoothing period in seconds')
        #self.mav.setText(str(gglobs.mav_initial))
        self.mav.setText("{:0.0f}".format(gglobs.mav_initial))

        self.mav.textChanged.connect(self.changedGraphOptionsMavText)

        btn_width = 50

        btnPoisson =  QPushButton('Poiss')
        #btnPoisson.clicked.connect(lambda: self.plotPoisson())
        btnPoisson.clicked.connect(lambda: gpoisson.newplotPoisson())
        btnPoisson.setFixedWidth(btn_width)
        btnPoisson.setToolTip("Shows a plot of a Poisson curve on a histogram of the data in the current plot")

        btnFFT =  QPushButton('FFT')
        #btnFFT.clicked.connect(lambda: self.plotFFT())
        btnFFT.clicked.connect(gpoisson.newplotFFT)
        btnFFT.setFixedWidth(btn_width)
        btnFFT.setToolTip("Show a plot of FFT spectra & Autocorrelation of the data in the current plot")

        btnPlotStats =  QPushButton('Stats')
        btnPlotStats.clicked.connect(lambda: gtools.printStats())
        btnPlotStats.setFixedWidth(btn_width)
        btnPlotStats.setToolTip("Shows the Statistics of the data in the current plot")

        btnQuickStats =  QPushButton('SuSt')
        btnQuickStats.clicked.connect(lambda: gtools.printSuSt())
        btnQuickStats.setFixedWidth(btn_width)
        btnQuickStats.setToolTip("Shows Summary Statistics of all variables and data in the plot")

        btnReset  = QPushButton('Reset')
        btnReset.clicked.connect(self.reset_replotGraph)
        btnReset.setFixedWidth(btn_width)
        btnReset.setToolTip("Reset all Graph Options to Default conditions")

        btnClear  = QPushButton('Clear')
        btnClear.clicked.connect(self.clearGraphLimits)
        btnClear.setFixedWidth(btn_width)
        btnClear.setToolTip("Clear the Graph Limit Options to Default conditions")

        btnApplyGraph = QPushButton('Apply')
        btnApplyGraph.clicked.connect(self.applyGraphOptions)
        btnApplyGraph.setStyleSheet("background-color: lightblue")
        btnApplyGraph.setFixedWidth(btn_width)
        btnApplyGraph.setMinimumHeight(65)
        btnApplyGraph.setToolTip("Apply the Graph Options and replot")
        btnApplyGraph.setDefault(True)

        self.labelVar = QLabel("---")
        self.labelVar.setToolTip("Shows the variable value in additional units when logging")
        self.labelVar.setMinimumWidth(130)
        self.labelVar.setFont(QFont('sans', 13, QFont.Bold))
        #~ self.labelVar.setFont(QFont('sans', 12, QFont.Bold))
        self.labelVar.setStyleSheet('color:darkgray;')
        self.labelVar.setAlignment(Qt.AlignCenter)
        self.labelVar.mousePressEvent=gtools.displayLastValues

    # separator lines
        vlineA0 = QFrame()
        vlineA0.setFrameShape(QFrame.VLine)

        hlineB3 = QFrame()
        hlineB3.setFrameShape(QFrame.HLine)

    # OFF / ON button
        btn_width = 35
        btnOFF = QPushButton('OFF')
        btnOFF .setToolTip("Uncheck all variables")
        btnOFF .clicked.connect(lambda: self.plotVarsOffOn("OFF"))
        btnOFF .setMaximumWidth(btn_width)

        btnON  = QPushButton('ON')
        btnON  .setToolTip("Check all avialable variables")
        btnON  .clicked.connect(lambda: self.plotVarsOffOn("ON"))
        btnON  .setMaximumWidth(btn_width)

    # layout of variables check boxes with OFF / ON button
        layoutH = QHBoxLayout()
        layoutH.addWidget(btnOFF)
        layoutH.addWidget(btnON)
        for i, vname in enumerate(gglobs.varnames):
            layoutH.addWidget(self.varDisplayCheckbox[vname])

        self.btnColorText = "Color of selected variable; click to change it. Current color:  "
        self.btnColor   = ClickLabel('Color')
        self.btnColor   .setAlignment(Qt.AlignCenter)
        self.btnColor   .setMaximumWidth(50)
        self.btnColor   .setStyleSheet("QLabel { border: 1px solid silver;  border-radius: 3px; }")
        addMenuTip(self.btnColor, self.btnColorText + "None")

    #layout the GraphOptions
        graphOptions=QGridLayout()
        graphOptions.setContentsMargins(5,5,5,5) #spacing around the graph options

        # to define the order of stepping through by tab key
        # row 1 .. 3, col 1+2 is put in front
        row = 1
        graphOptions.addWidget(self.ymin,       row, 1)
        graphOptions.addWidget(self.ymax,       row, 2)
        row = 2
        graphOptions.addWidget(self.y2min,      row, 1)
        graphOptions.addWidget(self.y2max,      row, 2)
        row = 3
        graphOptions.addWidget(self.xmin,       row, 1)
        graphOptions.addWidget(self.xmax,       row, 2)

        row = 0
        graphOptions.addWidget(ltitle,          row, 0)
        graphOptions.addWidget(lmin,            row, 1)
        graphOptions.addWidget(lmax,            row, 2)
        graphOptions.addWidget(btnReset,        row, 3)
        graphOptions.addWidget(btnSetCalib,     row, 4)
        graphOptions.addWidget(vlineA0,         row, 5, 4, 1)
        graphOptions.addWidget(self.select,     row, 6, 1, 2)
        graphOptions.addWidget(btnQuickStats,   row, 8)

        row = 1
        graphOptions.addWidget(lcounts,         row, 0)
        # see above
        # see above
        graphOptions.addWidget(btnClear,        row, 3)
        graphOptions.addWidget(self.yunit,      row, 4)
        # col 5 is empty (vert line)
        graphOptions.addWidget(self.mavbox,     row, 6)
        graphOptions.addWidget(self.mav,        row, 7)
        graphOptions.addWidget(btnPlotStats,    row, 8)

        row = 2
        graphOptions.addWidget(ly2,             row, 0)
        # see above
        # see above
        graphOptions.addWidget(btnApplyGraph,   row, 3, 2, 1)
        graphOptions.addWidget(self.y2unit,     row, 4)
        # col 5 is empty (vert line)
        graphOptions.addWidget(self.avgbox,     row, 6)
        graphOptions.addWidget(self.btnColor,   row, 7)
        graphOptions.addWidget(btnPoisson,      row, 8)

        row = 3
        graphOptions.addWidget(ltime,           row, 0)
        # see above
        # see above
        graphOptions.addWidget(self.xunit,      row, 4)
        # col 5 is empty (vert line)
        graphOptions.addWidget(self.labelVar,   row, 6, 1, 2)
        graphOptions.addWidget(btnFFT,          row, 8)

        row = 4
        graphOptions.addWidget(hlineB3,         row, 0, 1, 9)

        row = 5
        graphOptions.addLayout(layoutH,         row, 0, 1, 9)

    # group Graph Options into Groupbox
        graphOptionsGroup = QGroupBox()
        graphOptionsGroup.setContentsMargins(0,0,0,0)
        graphOptionsGroup.setMaximumHeight(200)   # relevant because no stretch from graphic!
        graphOptionsGroup.setStyleSheet("QGroupBox {border-style: solid; border-width: 1px; border-color: silver;}")
        graphOptionsGroup.setLayout(graphOptions)

# NotePad
        self.notePad = QTextEdit()
        self.notePad.setReadOnly(True)
        self.notePad.setFont(self.fontstd)
        self.notePad.setLineWrapMode(QTextEdit.NoWrap)
        self.notePad.setStyleSheet("color: rgb(60, 60, 60)")
        self.notePad.setTextColor(QColor(60, 60, 60))
        #self.notePad.setStyleSheet("background-color:lightgreen;")

        #set pointer gglobs.notePad (used for fprint in utils)
        gglobs.notePad = self.notePad

# LogPad
        self.logPad = QTextEdit()
        self.logPad.setReadOnly(True)
        self.logPad.setFont(self.fontstd)
        self.logPad.setLineWrapMode(QTextEdit.NoWrap)
        self.logPad.setStyleSheet("color: rgb(60, 60, 60)")
        self.notePad.setTextColor(QColor(60, 60, 60))
        #self.logPad.setStyleSheet("background-color:lightgreen;")

        #set gglobs.logPad (used for logPrint in utils)
        gglobs.logPad = self.logPad

# set the layout - left side
        splitterPad = QSplitter(Qt.Vertical)
        splitterPad.addWidget(self.notePad)
        splitterPad.addWidget(self.logPad)
        splitterPad.setSizes([800, 300])

        layoutLeft = QVBoxLayout()
        layoutLeft.addWidget(dataOptionsGroup)
        layoutLeft.addWidget(splitterPad)
        layoutLeft.setContentsMargins(0,0,0,0)
        layoutLeft.setSpacing(0)

# set the layout - right side
        myLayout =  QVBoxLayout()     # to show canvas with frame
        myLayout.setContentsMargins(0,0,0,0) # left, top, right, bottom
        myLayout.setSpacing(0)
        myLayout.addWidget(self.canvas)

        myGroup = QGroupBox()
        myGroup.setLayout(myLayout)
        myGroup.setContentsMargins(0,0,0,0)
        myGroup.setStyleSheet("background-color:#DFDEDD;") # same color as canvas

        layoutRight = QVBoxLayout()
        layoutRight.addWidget(graphOptionsGroup)
        layoutRight.addWidget(self.canvas)      # add canvas directly, no frame
        layoutRight.setContentsMargins(0,0,0,0)
        layoutRight.setSpacing(0)

# set the layout - both
        leftWidget = QWidget()
        leftWidget.setLayout(layoutLeft)

        rightWidget = QWidget()
        rightWidget.setLayout(layoutRight)

        splitterBoth = QSplitter(Qt.Horizontal)
        splitterBoth.addWidget(leftWidget)
        splitterBoth.addWidget(rightWidget)
        splitterBoth.setSizes([800, 750])
        splitterBoth.setContentsMargins(5,0,5,0)

# centralwidget
        self.setCentralWidget(splitterBoth)

#timer for logging
        self.timer = QTimer()
        self.timer.timeout.connect(self.getLogValues)

#show
        self.dcfLog.setText(str(gglobs.logFilePath))     # default is None
        self.dcfHis.setText(str(gglobs.hisFilePath))
        self.showTimingSetting (gglobs.logcycle)

        self.show()
        if gglobs.window_size == "maximized":   self.showMaximized()

        dprint("Fonts:  App     -",     strFontInfo("", app.font()))  # print font info for QApplication
        dprint("Fonts:  menubar -",     strFontInfo("", self.menubar.fontInfo()))
        dprint("Fonts:  logPad  -",     strFontInfo("", self.logPad.fontInfo()))
        dprint("Fonts:  notePad -",     strFontInfo("", self.notePad.fontInfo()))
        dprint("Screen: Dimensions: ",  QDesktopWidget().screenGeometry()) # gives screen dimensions
        dprint("Screen: Available:  ",  screen_available)                        # gives screen dimensions available

        # Note on Windows sizes:
        # "On X11, a window does not have a frame until the window manager decorates it."
        # see: http://doc.qt.io/qt-4.8/application-windows.html#window-geometry
        dprint("Window: Dimensions: ",  self.geometry(), " w/o Frame") # gives Windows dimensions but has the frame EXCLUDED!
        dprint("Window: Dimensions: ",  self.frameGeometry(), " WITH Frame (not valid on X11)") # self.frameGeometry() gives Windows dimensions including frame, but not on X11!

        # copyright message
        message = __copyright__ + ", by " + __author__ + ", License: " + __license__
        self.showStatusMessage(message, timing=0, error=False) # message remains until overwritten by next

        Qt_update()

        wprint("Data  Options group: height: {}, width: {}".format(dataOptionsGroup.height(), dataOptionsGroup.width()))
        wprint("Graph Options group: height: {}, width: {}".format(graphOptionsGroup.height(), graphOptionsGroup.width()))

        dprint(TGREEN + "Starting the GUI complete " + "-" * 100 + TDEFAULT + "\n")

        if gglobs.startup_failure > "": self.startup_failure() # EXIT on Failure!

        isAnyDeviceActive = False
        if gglobs.GMCActivation     : isAnyDeviceActive = True
        if gglobs.AudioActivation   : isAnyDeviceActive = True
        if gglobs.I2CActivation     : isAnyDeviceActive = True
        if gglobs.RMActivation      : isAnyDeviceActive = True
        if gglobs.AmbioActivation   : isAnyDeviceActive = True
        if gglobs.LJActivation      : isAnyDeviceActive = True
        if gglobs.GSActivation      : isAnyDeviceActive = True

        if not isAnyDeviceActive:
            efprint("ALERT: You have not activated any device! Logging and downloads are not possible.")
            qefprint("ALERT: But you can work on Log and History data loaded from file.")

        # Devel Data - start GeigerLog with command 'devel' e.g.: 'geigerlog -dv devel'
        # on devel1 load database default.logdb if available
        if gglobs.devel1:
            defaultFile = os.path.join(gglobs.dataPath, "default.logdb")
            #~defaultFile = os.path.join(gglobs.dataPath, "WhiteNoisePoisson_mode=CPM_cycle=60.0_mean=10000.logdb")
            if os.access(defaultFile , os.R_OK):  self.getLogFile(defaultLogDBPath = defaultFile)
            else:                                 dprint("Testfile '{}' not found".format(defaultFile), debug=True)

        Qt_update()
        if gglobs.devel2:
            self.switchConnections(new_connection = "ON")

        playWav("ok")

        #~print("-----------------------------------------------------------------")
        #~dir(QFontDatabase(QFontDatabase.Any))
        #~print("-----------------------------------------------------------------")

#========== END __init__ ------------------------------------------------------
#========== END __init__ ######################################################
#========== END __init__ ******************************************************
#
#========== BEGIN Class Functions =============================================

    def startup_failure(self):
        """if configuration file is missing or incorrect"""

        playWav("error")
        Qt_update()

        dprint(gglobs.startup_failure, debug=True)

        msg = QMessageBox()
        msg.setWindowIcon(self.iconGeigerLog)
        msg.setWindowTitle("STARTUP ERROR")
        msg.setText("<!doctype html>" + gglobs.startup_failure)
        msg.setStandardButtons(QMessageBox.Ok)
        msg.setDefaultButton(QMessageBox.Ok)
        msg.setEscapeButton(QMessageBox.Ok)
        msg.setWindowModality(Qt.WindowModal)
        msg.exec()

        self.close()    # Exit GeigerLog


    def saveNotePad(self):
        """Save Content of NotePad to file"""

        if gglobs.currentDBPath is None:
            self.showStatusMessage("No data available")
            return

        newFile = gglobs.currentDBPath + '.notes'
        fprint(header("Saving NotePad Content"))
        fprint("to File: {}\n".format(newFile))

        nptxt = self.notePad.toPlainText()  # Saving in Plain Text format; all is b&W,
                                            # colors are not preserved
        #htxt = self.notePad.toHtml()       # Saving in HTML Format; preserves any color
        #print("nptxt:", nptxt)

        with open(newFile, 'a') as f:
            f.write(nptxt)


    def popup(self):

        """ checking radiobuttons
        radio1 = QRadioButton("button 1")
        radio2 = QRadioButton("button 2")
        radio3 = QRadioButton("button 3")

        for i in range(1,4):
            buttonname = "radio" + str(i)           # das geht???????
            if buttonname.isChecked():
                print buttonname + "is Checked"
        """

        if not gglobs.GMCConnection:
            self.showStatusMessage("No GMC Device Connected")
            return

        # https://www.tutorialspoint.com/pyqt/pyqt_qlineedit_widget.htm
        # https://snorfalorpagus.net/blog/2014/08/09/validating-user-input-in-pyqt4-using-qvalidator/

        myLocale = QLocale (QLocale(QLocale.English, QLocale.UnitedStates))

        setDefault = False

        while True:
            #fbox=QFormLayout()
            fbox=QFormLayout()
            #fbox.setFieldGrowthPolicy (2)
            fbox.setFieldGrowthPolicy (QFormLayout.AllNonFixedFieldsGrow)

            # power
            #r01=QRadioButton("On")
            r01=QRadioButton("On")
            r02=QRadioButton("Off")
            powergroup = QButtonGroup()
            powergroup.addButton(r01)
            powergroup.addButton(r02)
            hbox0=QHBoxLayout()
            hbox0.addWidget(r01)
            hbox0.addWidget(r02)
            hbox0.addStretch()
            fbox.addRow(QLabel("Power"),hbox0)
            if gcommands.isPowerOn() == 'ON':
                r01.setChecked(True)
            else:
                r02.setChecked(True)

            # alarm
            r11=QRadioButton("On")
            r12=QRadioButton("Off")
            alarmgroup = QButtonGroup()
            alarmgroup.addButton(r11)
            alarmgroup.addButton(r12)

            hbox1=QHBoxLayout()
            hbox1.addWidget(r11)
            hbox1.addWidget(r12)
            hbox1.addStretch()
            fbox.addRow(QLabel("Alarm"),hbox1)
            if gcommands.isAlarmOn() == 'ON':
                r11.setChecked(True)
            else:
                r12.setChecked(True)

            # Speaker
            r21=QRadioButton("On")
            r22=QRadioButton("Off")
            #speakergroup = QButtonGroup()
            speakergroup = QButtonGroup()
            speakergroup.addButton(r21)
            speakergroup.addButton(r22)
            hbox2=QHBoxLayout()
            hbox2.addWidget(r21)
            hbox2.addWidget(r22)
            hbox2.addStretch()
            fbox.addRow(QLabel("Speaker"),hbox2)
            if gcommands.isSpeakerOn() == 'ON':
                r21.setChecked(True)
            else:
                r22.setChecked(True)

            # history Saverdatatapye
            hbox3=QHBoxLayout()
            cb1=QComboBox()
            cb1.addItems(gglobs.savedatatypes)
            hbox3.addWidget(cb1)
            hbox3.addStretch()
            fbox.addRow(QLabel("History Saving Mode"),hbox3)

            if not gglobs.GMCConnection:
                cb1.setCurrentIndex(0)
            else:
            #    cb1.setCurrentIndex(gglobs.savedataindex) # for testing only
                cb1.setCurrentIndex(0) ### only for testing

            # WiFi settings
            l1e=QLineEdit()
            l1e.setMaxLength (32)
            l2e=QLineEdit()
            l2e.setMaxLength (32)
            l3e=QLineEdit()
            l3e.setMaxLength (32)
            l4e=QLineEdit()
            l4e.setMaxLength (32)
            l5e=QLineEdit()
            l5e.setMaxLength (32)
            l6e=QLineEdit()
            l6e.setMaxLength (32)

            # self.calibration
            self.calHead = QHBoxLayout()
            self.calHead.addWidget(QLabel(" CPM"))
            self.calHead.addWidget(QLabel(" µSv/h"))
            self.calHead.addWidget(QLabel(" µSv/h / CPM"))

            fbox.addRow("Calibration Units:", self.calHead)

            self.cal0     = QHBoxLayout()
            self.cal0_cpm = QLineEdit()
            self.cal0_cpm.setValidator (QIntValidator(0, 99999))
            #self.cal0_cpm.textChanged.connect(self.textChanged)
            #self.cal0_cpm.textChanged.connect(lambda: self.textChanged("self.cal0_cpm"))
            self.cal0_cpm.editingFinished.connect(lambda: self.editingFinished("self.cal0_cpm"))
            #self.cal0_cpm.textEdited.connect(lambda: self.textChanged("self.cal0_cpm"))
            self.cal0_cpm.setToolTip("Enter an integer from 0 ... 99999")

            self.cal0_usv = QLineEdit()
            #self.cal0_usv.setValidator(QDoubleValidator(0, 9999, 4))
            #self.cal0_usv.textChanged.connect(lambda: self.textChanged(123))
            self.cal0_usv.editingFinished.connect(lambda: self.editingFinished("self.cal0_usv"))
            #self.cal0_usv.textEdited.connect(lambda: self.textChanged("self.cal0_usv"))
            #self.cal0_usv.textChanged.connect(self.check_state)
            self.cal0_usv.setToolTip("Enter a number from 0 ... 9999 with no more than 4 decimals")

            #self.cal0_fac = QLineEdit()
            #self.cal0_fac.setEnabled(False)
            self.cal0_fac = QLabel()

            self.cal0.addWidget(self.cal0_cpm)
            self.cal0.addWidget(self.cal0_usv)
            self.cal0.addWidget(self.cal0_fac)
            fbox.addRow("Calibration Point 1", self.cal0)

            self.cal1     = QHBoxLayout()
            self.cal1_cpm = QLineEdit()
            self.cal1_cpm.setValidator (QIntValidator(0, 99999))
            self.cal1_usv = QLineEdit()
            #self.cal1_fac = QLineEdit()
            #self.cal1_fac.setEnabled(False)
            self.cal1_fac = QLabel()

            self.cal1.addWidget(self.cal1_cpm)
            self.cal1.addWidget(self.cal1_usv)
            self.cal1.addWidget(self.cal1_fac)
            fbox.addRow("Calibration Point 2", self.cal1)

            self.cal2     = QHBoxLayout()
            self.cal2_cpm = QLineEdit()
            self.cal2_cpm.setValidator (QIntValidator(0, 99999))
            self.cal2_usv = QLineEdit()
            #self.cal2_fac = QLineEdit()
            #self.cal2_fac.setEnabled(False)
            self.cal2_fac = QLabel()

            self.cal2.addWidget(self.cal2_cpm)
            self.cal2.addWidget(self.cal2_usv)
            self.cal2.addWidget(self.cal2_fac)
            fbox.addRow("Calibration Point 3", self.cal2)

            for i in range(0,3):
                self.calcpm = gglobs.cfgLow["CalibCPM_{}".format(i)]
                self.calusv = gglobs.cfgLow["CalibuSv_{}".format(i)]
                self.calfac = self.calusv / self.calcpm

                if i == 0:
                    self.cal0_cpm.setText("{:1.0f}".format(self.calcpm))
                    self.cal0_usv.setText("{:1.2f}".format(self.calusv))
                    self.cal0_fac.setText("{:1.6f}".format(self.calfac))
                elif i == 1:
                    self.cal1_cpm.setText("{:1.0f}".format(self.calcpm))
                    self.cal1_usv.setText("{:1.2f}".format(self.calusv))
                    self.cal1_fac.setText("{:1.6f}".format(self.calfac))
                elif i == 2:
                    self.cal2_cpm.setText("{:1.0f}".format(self.calcpm))
                    self.cal2_usv.setText("{:1.2f}".format(self.calusv))
                    self.cal2_fac.setText("{:1.6f}".format(self.calfac))


            fbox.addRow("Website",l1e)
            fbox.addRow("URL",l2e)
            fbox.addRow("SSID",l3e)
            fbox.addRow("Password",l4e)
            fbox.addRow("CounterID",l5e)
            fbox.addRow("UserID",l6e)

            if setDefault :
                l1e.setText(gglobs.GMCmap["Website"])
                l2e.setText(gglobs.GMCmap["URL"])
                l3e.setText(gglobs.GMCmap["SSID"])
                l4e.setText(gglobs.GMCmap["Password"])
                l5e.setText(gglobs.GMCmap["CounterID"])
                l6e.setText(gglobs.GMCmap["UserID"])

            else:
                l1e.setText(gglobs.cfgMap["Website"])
                l2e.setText(gglobs.cfgMap["URL"])
                l3e.setText(gglobs.cfgMap["SSID"])
                l4e.setText(gglobs.cfgMap["Password"])
                l5e.setText(gglobs.cfgMap["CounterID"])
                l6e.setText(gglobs.cfgMap["UserID"])

            #fbox.addRow(QPushButton("Submit"),QPushButton("Cancel"))

            self.dialog = QDialog()
            self.dialog.setWindowIcon(self.iconGeigerLog)
            self.dialog.setFont(self.fontstd)
            self.dialog.setWindowTitle("popup")
            #d.setWindowModality(Qt.ApplicationModal)
            self.dialog.setWindowModality(Qt.WindowModal)
            #d.setMinimumWidth(800)
            #self.dialog.setMinimumHeight(gglobs.window_height + 50)


            # buttonbox: https://srinikom.github.io/pyside-docs/PySide/QtGui/QDialogButtonBox.html
            bbox    = QDialogButtonBox()

            bbox.addButton("Apply my Defaults", QDialogButtonBox.HelpRole)
            #bbox.setStandardButtons(QDialogButtonBox.Ok|QDialogButtonBox.Cancel|QDialogButtonBox.Reset)
            bbox.setStandardButtons(QDialogButtonBox.Ok|QDialogButtonBox.Cancel)
            bbox.addButton("My Reset", QDialogButtonBox.ResetRole)
            bbox.accepted.connect(lambda: self.dialog.done(0))
            bbox.rejected.connect(lambda: self.dialog.done(1))
            bbox.helpRequested.connect(lambda: self.dialog.done(2))
            bbox.clicked .connect(lambda: self.dialog.done(3))

            layoutV   = QVBoxLayout(self.dialog)
            layoutV.addLayout(fbox)
            layoutV.addWidget(bbox)

            popupdlg = self.dialog.exec_()             # both seem to work the same
            print("-------------Ex:", popupdlg)

            if   popupdlg == 0:     break
            elif popupdlg == 2:     setDefault = True
            elif popupdlg == 3:     setDefault = False
            else:                   break


        print("r01 is Checked: ", r01.isChecked())
        print("r02 is Checked: ", r02.isChecked())
        print("r11 is Checked: ", r11.isChecked())
        print("r12 is Checked: ", r12.isChecked())
        print("r21 is Checked: ", r21.isChecked())
        print("r22 is Checked: ", r22.isChecked())
        print("cb1.currentIndex():", cb1.currentIndex())


    def textChanged(self,  number, *args, **kwargs):
        """ Function doc """

        print("textChanged:---------------------------")
        print("len(args):", len(args))
        for a in args:
            print("a:", a)

        print("len(kwargs):", len(kwargs))
        for a in kwargs:
            print("a:", a)
        print("number is:", number)

        print("self.sender:",               self.sender)
        print("self.sender():",             self.sender())
        print("self.sender().text:",        self.sender().text)
        print("self.sender().text():",      self.sender().text())
        print("self.sender().validator:",   self.sender().validator)
        print("self.sender().validator():", self.sender().validator())

        sender = self.sender()
        validator = sender.validator()
        state = validator.validate(sender.text(), 0)[0]
        print("validator.validate(sender.text(), 0):", validator.validate(sender.text(), 0))
        print("validator.validate(sender.text(), 1):", validator.validate(sender.text(), 1))

        print("float(self.sender().text()):",      float(self.sender().text()))


    def editingFinished(self, text, *args, **kwargs):
        """ Function doc """
        print("editingFinished---------------------------")
        print("len(args):", len(args))
        for a in args:
            print("a:", a)

        print("len(kwargs):", len(kwargs))
        for a in kwargs:
            print("a:", a)

        print("self.sender().text:",        self.sender().text)

        try:
            print("float(self.sender().text()):",      float(self.sender().text()))
        except:
            print("float(self.sender().text()):",      "##############################")

        try:
            usv = float(self.cal0_usv.text())
            self.cal0_fac.setText("{:1.6f}".format(usv  / float(self.cal0_cpm.text() )))
        except:
            self.cal0_usv.setFocus()
            self.cal0_usv.setStyleSheet('QLineEdit { background-color: %s }' % 'yellow')

            playWav("error")


    def check_state(self, *args, **kwargs):
        print("check_state:---------------------------")
        print("len(args):", len(args))
        for a in args:
            print("a:", a)

        print("len(kwargs):", len(kwargs))
        for a in kwargs:
            print("a:", a)
        print("self.sender:",               self.sender)
        print("self.sender():",             self.sender())
        print("self.sender().text:",        self.sender().text)
        print("self.sender().text():",      self.sender().text())
        print("self.sender().validator:",   self.sender().validator)
        print("self.sender().validator():", self.sender().validator())

        sender = self.sender()
        validator = sender.validator()
        state = validator.validate(sender.text(), 0)[0]
        print("validator.validate(sender.text(), 0):", validator.validate(sender.text(), 0))
        print("validator.validate(sender.text(), 1):", validator.validate(sender.text(), 1))

        print("float(self.sender().text()):",      float(self.sender().text()))

        if state == QValidator.Acceptable:
            #color = '#c4df9b' # green
            color = 'white'
        elif state == QValidator.Intermediate:
            color = '#fff79a' # yellow
        else:
            playWav("error")
            color = '#f6989d' # red
        sender.setStyleSheet('QLineEdit { background-color: %s }' % color)


    def snapLogValue(self, event):
        """Take a measurement when toolbar icon Snap is clicked"""

        if not gglobs.logging: return

        vprint("snapLogValue:")
        setDebugIndent(1)

        self.getLogValues()

        fprint(header("Snapped Log Values"))
        fprint(gglobs.lastRecord)
        vprint("snapLogValue: " + gglobs.lastRecord)

        # comment to the DB
        ctype       = "COMMENT"
        cJulianday  = "NOW"
        cinfo       = "Snapped log values: {}".format(gglobs.lastRecord)
        gsql.DB_insertComments(gglobs.logConn, [[ctype, cJulianday, "localtime", cinfo]])

        setDebugIndent(0)


#exit GeigerLog
    def closeEvent(self, event):
        """is called via self.close! Allow to Exit unless Logging is active"""

        # event: QEvent.Close = 19 : Widget was closed
        dprint("closeEvent: event type: {}".format(event.type()))
        setDebugIndent(1)

        if gglobs.logging :
            event.ignore()
            self.showStatusMessage("Cannot exit when logging! Stop logging first")
            dprint("closeEvent: ignored; Cannot exit when logging! Stop logging first")
        else:
            event.accept()                   # allow closing the window
            dprint("closeEvent: accepted")

            # terminate the devices
            if gglobs.GMCConnection     : gcommands   .terminateGMC()
            if gglobs.RMConnection      : gradmon     .terminateRadMon()
            if gglobs.AmbioConnection   : gambiomon   .terminateAmbioMon()
            if gglobs.LJConnection      : glabjack    .terminateLabJack() # LJ might not be loaded
            #~if gglobs.AudioConnection   : gaudio      .terminateAudio()
            if gglobs.AudioConnection   : gsounddev   .terminateSounddev()
            if gglobs.I2CConnection     : gi2c        .terminateI2C()

            # close the databases for Log and His
            gsql .DB_closeDatabase(gglobs.logConn)
            gsql .DB_closeDatabase(gglobs.hisConn)

            QApplication.quit()              # works but keeps prog running, CTRL-C needed
            QApplication.closeAllWindows()   # works but keeps prog running, CTRL-C needed

            dprint("closeEvent: Exiting now")
            sys.exit(0)                      # sometimes needed to really shut down

        setDebugIndent(0)


#GraphOptions

    def changedGraphSelectedVariable(self):
        """called from the select combo for variables"""

        self.applyGraphOptions()


    def changedGraphDisplayCheckboxes(self, value):
        """Graph varDisplayCheckbox Value has changed"""

        if not gglobs.allowGraphUpdate: return

        oldIndex = self.select.currentIndex()

        text    = gglobs.vardict[value][0]
        index   = self.select.findText(text)
        #print("changedGraphDisplayCheckboxes: var:{}, longname:{}, index:{}".format(value, text, index))

        if self.varDisplayCheckbox[value].isChecked():
            # sets and enables the select combobox to the checked variable
            # thus making it to the selected variable
            self.select.model().item(index) .setEnabled(True)
            self.select                     .setCurrentIndex(index)

        else:
            # disables the unchecked variable on the select combobox,
            # and sets it to the first enabled entry. If none found then CPM is selected
            self.select.model().item(index) .setEnabled(False)
            foundSelVar = 0
            for i, key in enumerate(gglobs.varnames):
                #print("i, key, self.select.model().item(i) .isEnabled():", i, key, self.select.model().item(i) .isEnabled())
                if self.select.model().item(i) .isEnabled():
                    foundSelVar = i
                    break
            if self.select.currentIndex() == index: self.select.setCurrentIndex(foundSelVar)

        #print("----self.select.model().item(index).isEnabled:", self.select.model().item(index).isEnabled())

        # if the index is not changed, then an update is needed; otherwise
        # a changed index results in an update anyway via changedGraphSelectedVariable
        if self.select.currentIndex() == oldIndex:  self.applyGraphOptions()


    def changedGraphOptionsAvg(self, i):
        """Graph Option Avg has changed"""

        #print("changedGraphOptionsAvg: i:", i)
        gglobs.avgChecked  = self.avgbox.isChecked()
        self.applyGraphOptions()


    def changedGraphOptionsMav(self, i):
        """Graph Option Mav has changed"""

        #print("changedGraphOptionsMav: i:", i)
        gglobs.mavChecked  = self.mavbox.isChecked()
        if gglobs.mavChecked: gglobs.fprintMAV = True
        self.applyGraphOptions()


    def changedGraphOptionsMavText(self, i):
        """Graph Option MavText has changed"""

        #print("changedGraphOptionsMavText: i:", i)
        if self.mavbox.isChecked():
            #print("self.mavbox.isChecked():", self.mavbox.isChecked())
            gglobs.fprintMAV = True

        self.applyGraphOptions()


    def changedGraphCountUnit(self, i):
        """counter unit Graph Options for left Y-axis was changed"""

        oldYunit            = gglobs.YunitCurrent
        gglobs.YunitCurrent = str(self.yunit.currentText())
        newYunit            = gglobs.YunitCurrent
        #print("changedGraphCountUnit: i:", i, ",  oldYunit:", oldYunit, ",  newYunit:", newYunit)

        # convert Y to CPM unit if not already CPM
        if oldYunit == "µSv/h":
            if gglobs.Ymin != None: gglobs.Ymin = gglobs.Ymin / gglobs.calibration1st
            if gglobs.Ymax != None: gglobs.Ymax = gglobs.Ymax / gglobs.calibration1st

        # convert Y to µSv/h unit if not already µSv/h
        if newYunit == "µSv/h":
            if gglobs.Ymin != None: gglobs.Ymin = gglobs.Ymin * gglobs.calibration1st
            if gglobs.Ymax != None: gglobs.Ymax = gglobs.Ymax * gglobs.calibration1st

        if gglobs.Ymin == None: self.ymin.setText("")
        else:                   self.ymin.setText("{:.5g}".format(gglobs.Ymin))

        if gglobs.Ymax == None: self.ymax.setText("")
        else:                   self.ymax.setText("{:.5g}".format(gglobs.Ymax))

        if newYunit == "µSv/h":
            for vname in ("CPM", "CPS", "CPM1st", "CPS1st", "CPM2nd", "CPS2nd", "CPM3rd", "CPS3rd"):
                gglobs.varunit[vname] = "µSv/h"

        else: # newYunit == CPM
            for vname in ("CPM", "CPM1st", "CPM2nd", "CPM3rd"):
                gglobs.varunit[vname] = "CPM"

            for vname in ("CPS", "CPS1st", "CPS2nd", "CPS3rd"):
                gglobs.varunit[vname] = "CPS"

        self.applyGraphOptions()


    def changedGraphTemperatureUnit(self, i):
        """Temperature unit Graph Options was changed"""

        #print("changedGraphTemperatureUnit: New T unit:  i:", i, str(self.y2unit.currentText()) )

        if   i == 0:    gglobs.varunit["T"] = "°C"
        elif i == 1:    gglobs.varunit["T"] = "°F"

        self.applyGraphOptions()


    def changedGraphTimeUnit(self, i):
        """recalc xmin, xmax on Time unit changes"""

        #print("-----------------------changedGraphTimeUnit: i:", i)

        if np.all(gglobs.logTime) == None: return

        oldXunit = gglobs.XunitCurrent
        #print "oldXunit", oldXunit

        # convert all entries to days since start
        if   oldXunit == "Time":
            if gglobs.Xleft  != None: gglobs.Xleft = gglobs.Xleft - gglobs.logTimeFirst
            if gglobs.Xright != None: gglobs.Xright = gglobs.Xright - gglobs.logTimeFirst

        elif oldXunit == "day": # no changes all in days
            if gglobs.Xleft  != None: gglobs.Xleft = gglobs.Xleft
            if gglobs.Xright != None: gglobs.Xright = gglobs.Xright

        elif oldXunit == "hour":
            if gglobs.Xleft  != None: gglobs.Xleft = gglobs.Xleft / 24.
            if gglobs.Xright != None: gglobs.Xright = gglobs.Xright / 24.

        elif oldXunit == "minute":
            if gglobs.Xleft  != None: gglobs.Xleft = gglobs.Xleft / 1440.
            if gglobs.Xright != None: gglobs.Xright = gglobs.Xright / 1440.

        elif oldXunit == "second":
            if gglobs.Xleft  != None: gglobs.Xleft = gglobs.Xleft / 86400.
            if gglobs.Xright != None: gglobs.Xright = gglobs.Xright / 86400.

        gglobs.XunitCurrent = str(self.xunit.currentText())
        newXunit            = gglobs.XunitCurrent

        if newXunit == "auto":
            l = gglobs.logTime.max() - gglobs.logTime.min()
            #print "l=", l
            if   l > 3:          Xunit = "day"
            elif l * 24. > 3:    Xunit = "hour"
            elif l * 1440. > 3:  Xunit = "minute"
            else:                Xunit = "second"

            newXunit = Xunit

        gglobs.XunitCurrent = newXunit
        gglobs.Xunit        = newXunit
        #print "newXunit", newXunit

        if newXunit == "Time":
            if gglobs.Xleft  != None: gglobs.Xleft =  (str(mpld.num2date((gglobs.Xleft  + gglobs.logTimeFirst))))[:19]
            if gglobs.Xright != None: gglobs.Xright = (str(mpld.num2date((gglobs.Xright + gglobs.logTimeFirst))))[:19]

        elif newXunit == "day": # no changes all in days
            if gglobs.Xleft  != None: gglobs.Xleft = gglobs.Xleft
            if gglobs.Xright != None: gglobs.Xright = gglobs.Xright

        elif newXunit == "hour":
            if gglobs.Xleft  != None: gglobs.Xleft = gglobs.Xleft * 24.
            if gglobs.Xright != None: gglobs.Xright = gglobs.Xright * 24.

        elif newXunit == "minute":
            if gglobs.Xleft  != None: gglobs.Xleft = gglobs.Xleft * 1440.
            if gglobs.Xright != None: gglobs.Xright = gglobs.Xright * 1440.

        elif newXunit == "second":
            if gglobs.Xleft  != None: gglobs.Xleft = gglobs.Xleft * 86400.
            if gglobs.Xright != None: gglobs.Xright = gglobs.Xright * 86400.

        if gglobs.Xleft == None:
            self.xmin.setText("")
        else:
            try:
                xl = "{:1.8f}".format(float(gglobs.Xleft))
            except:
                xl = gglobs.Xleft
            self.xmin.setText(xl)

        if gglobs.Xright == None:
            self.xmax.setText("")
        else:
            try:
                xr = "{:1.8f}".format(float(gglobs.Xright))
            except:
                xr = gglobs.Xright
            self.xmax.setText(xr)

        self.applyGraphOptions()


    def keyPressEvent(self, event):
        """Apply Graph is only Button to accept Enter and Return key"""

        # from: http://pyqt.sourceforge.net/Docs/PyQt4/qt.html#Key-enum
        # Qt.Key_Return     0x01000004
        # Qt.Key_Enter      0x01000005  Typically located on the keypad. (= numeric keypad)
        #print("event.key():", event.key())

        if event.key() in (Qt.Key_Enter, Qt.Key_Return):
            self.applyGraphOptions()


    def plotVarsOffOn(self, newstate="OFF"): # alt: 'ON'
        """checks or unchecks all variables from plotting"""

        gglobs.allowGraphUpdate    = False
        if newstate == "OFF":
            for i, vname in enumerate(gglobs.varnames):
                self.varDisplayCheckbox[vname].setChecked(False)
                self.select.model().item(i)   .setEnabled(False)
        else:
            for i, vname in enumerate(gglobs.varnames):
                if gglobs.varcheckedCurrent[vname]:
                    self.varDisplayCheckbox[vname].setChecked(True)
                    self.varDisplayCheckbox[vname].setEnabled(True)
                    self.select.model().item(i)   .setEnabled(True)

        # makes the index of the first enabled variable as the currentindex of the
        # variable select drop-down box
        for i, vname in enumerate(gglobs.varnames):
            #print("----i, self.select.model().item(i).isEnabled:", i, gglobs.exgg.select.model().item(i).isEnabled())
            if self.select.model().item(i).isEnabled():
                gglobs.exgg.select          .setCurrentIndex(i)
                break

        gglobs.allowGraphUpdate    = True
        self.applyGraphOptions() # not automatically done due to
                                 # blocking by gglobs.allowGraphUpdate


    def clearGraphLimits(self, fprintMAV = False):
        """resets all min, max graph options to empty and plots the graph"""

        dprint("clearGraphLimits:")
        setDebugIndent(1)

        gglobs.Xleft               = None
        gglobs.Xright              = None
        self.xmin.                   setText("")
        self.xmax.                   setText("")

        gglobs.Ymin                = None
        gglobs.Ymax                = None
        self.ymin.                   setText("")
        self.ymax.                   setText("")

        gglobs.Y2min               = None
        gglobs.Y2max               = None
        self.y2min.                  setText("")
        self.y2max.                  setText("")

        gplot.makePlot()

        setDebugIndent(0)


    def reset_replotGraph(self, fprintMAV = False):
        """resets all graph options to start conditions and plots the graph"""

        dprint("reset_replotGraph:")
        setDebugIndent(1)

        gglobs.allowGraphUpdate    = False

        gglobs.Xleft               = None
        gglobs.Xright              = None
        gglobs.Xunit               = "Time"
        self.xmin.                   setText("")
        self.xmax.                   setText("")
        self.xunit.                  setCurrentIndex(0)

        gglobs.Ymin                = None
        gglobs.Ymax                = None
        gglobs.Yunit               = "CPM"
        self.ymin.                   setText("")
        self.ymax.                   setText("")
        self.yunit.                  setCurrentIndex(0)

        gglobs.Y2min               = None
        gglobs.Y2max               = None
        gglobs.Y2unit              = "°C"
        self.y2min.                  setText("")
        self.y2max.                  setText("")
        self.y2unit.                 setCurrentIndex(0)

        self.select.                 setCurrentIndex(0)
        self.select.                 setEnabled(True)

        gglobs.avgChecked          = False
        self.avgbox.                 setChecked(gglobs.avgChecked)

        gglobs.mavChecked          = False
        self.mavbox.                 setChecked(gglobs.mavChecked)

        gglobs.mav                 = gglobs.mav_initial
        #self.mav.                    setText(str(gglobs.mav_initial))
        self.mav.                    setText("{:0.0f}".format(gglobs.mav_initial))

        gglobs.varStyle            = gglobs.varStyleDefault.copy() # reset colors and linetype

        gglobs.allowGraphUpdate    = True

        self.updateDisplayVariableValue()
        self.plotVarsOffOn(newstate="ON")   # also does a plot with applyGraphOptions # just changed

        setDebugIndent(0)


    def applyGraphOptions(self):

        if gglobs.currentConn == None: return

        #replace comma with dot, strip outer whitespace
        xmin  = (str(self.xmin.text()).replace(",", ".")).strip()
        xmax  = (str(self.xmax.text()).replace(",", ".")).strip()
        xunit = str(self.xunit.currentText())

        ymin  = (str(self.ymin.text()).replace(",", ".")).strip()
        ymax  = (str(self.ymax.text()).replace(",", ".")).strip()
        yunit = str(self.yunit.currentText())

        y2min  = (str(self.y2min.text()).replace(",", ".")).strip()
        y2max  = (str(self.y2max.text()).replace(",", ".")).strip()

        mav   = (str(self.mav.text()).replace(",", ".") ).strip()

    #    print( "X  xmin, xmax, xunit:", xmin, xmax, xunit)
    #    print( "Y: ymin, ymax, yunit, mav", ymin, ymax, yunit, mav)

        if  xmin == "":
            gglobs.Xleft  = None
        else:
            if gglobs.Xunit == "Time":
                try:
                    gglobs.Xleft = mpld.datestr2num(str(xmin))
                except:
                    gglobs.Xleft = None
                    efprint("Did not recognize Time Min")
            else:
                try:
                    gglobs.Xleft     = float(xmin)
                except:
                    gglobs.Xleft     = None
                    efprint("Did not recognize Time Min")

        if  xmax == "":
            gglobs.Xright = None
        else:
            if gglobs.Xunit == "Time":
                try:
                    gglobs.Xright = mpld.datestr2num(str(xmax))
                except:
                    gglobs.Xright = None
                    efprint("Did not recognize Time Max")
            else:
                try:
                    gglobs.Xright    = float(xmax)
                except:
                    gglobs.Xright    = None
                    efprint("Did not recognize Time Max")

        #print( "Xleft ", gglobs.Xleft,  ",  Xright", gglobs.Xright)

        if gglobs.Xleft != None and gglobs.Xright != None:
            if gglobs.Xleft >= gglobs.Xright:
                efprint("Wrong numbers: Time Min must be less than Time Max")
                return

        gglobs.Xunit     = xunit

        try:
            gglobs.Ymin      = float(ymin)
        except:
            gglobs.Ymin      = None

        try:
            gglobs.Ymax      = float(ymax)
        except:
            gglobs.Ymax      = None

        if gglobs.Ymin != None and gglobs.Ymax != None:
            if gglobs.Ymin >= gglobs.Ymax:
                efprint("Wrong numbers: Count Rate min must be less than Count Rate max")
                return

        gglobs.Yunit     = yunit

        try:
            gglobs.Y2min      = float(y2min)
        except:
            gglobs.Y2min      = None

        try:
            gglobs.Y2max      = float(y2max)
        except:
            gglobs.Y2max      = None

        if gglobs.Y2min != None and gglobs.Y2max != None:
            if gglobs.Y2min >= gglobs.Y2max:
                efprint("Wrong numbers: Count Rate min must be less than Count Rate max")
                return

        try:
            gglobs.mav     = float(mav)
        except:
            gglobs.mav     = gglobs.mav_initial

        colorName = gglobs.varStyle[getNameSelectedVar()][0]
        self.btnColor.setText("") # self.btnColor.setText(colorName)
        self.btnColor.setStyleSheet("QLabel { border: 1px solid silver;  border-radius: 3px; background-color: %s ; }" % (colorName))
        addMenuTip(self.btnColor, self.btnColorText + colorName)

        gplot.makePlot()
        self.updateDisplayVariableValue()


    def plotGraph(self, dataType):
        """Plots the data as graph; dataType is Log or His"""

        if  dataType == "Log" and gglobs.logConn == None or \
            dataType == "His" and gglobs.hisConn == None:
            self.showStatusMessage("No data available")
            return

        dprint("plotGraph: dataType:", dataType)
        setDebugIndent(1)

        if dataType == "Log":
            gglobs.activeDataSource     = "Log"
            gglobs.currentConn          = gglobs.logConn
            gglobs.currentDBPath        = gglobs.logDBPath
            gglobs.currentDBData        = gglobs.logDBData
            gglobs.varcheckedCurrent    = gglobs.varcheckedLog.copy()

            self.dcfLog.setText(gglobs.currentDBPath)
            self.dcfLog.setStyleSheet("QLineEdit { background-color: #F9F4C9; color: rgb(80,80,80); }")
            self.dcfHis.setStyleSheet("QLineEdit { background-color: #DFDEDD; color: rgb(80,80,80); }")

        elif dataType == 'His':
            gglobs.activeDataSource     = "His"
            gglobs.currentConn          = gglobs.hisConn
            gglobs.currentDBPath        = gglobs.hisDBPath
            gglobs.currentDBData        = gglobs.hisDBData
            gglobs.varcheckedCurrent    = gglobs.varcheckedHis.copy()

            self.dcfHis.setText(gglobs.currentDBPath)
            self.dcfHis.setStyleSheet("QLineEdit { background-color: #F9F4C9; color: rgb(80,80,80); }")
            self.dcfLog.setStyleSheet("QLineEdit { background-color: #DFDEDD; color: rgb(80,80,80); }")

        else:
            dprint("PROGRAMMING ERROR in geigerlog:plotGraph: var dataType is:", dataType, debug=True)
            sys.exit(1)

        #print("plotGraph: gglobs.activeDataSource:", gglobs.activeDataSource)
        #print("plotGraph: gglobs.currentDBPath, gglobs.logDBPath, gglobs.hisDBPath:\n", gglobs.currentDBPath, "\n", gglobs.logDBPath, "\n", gglobs.hisDBPath)
        #print("plotGraph: gglobs.currentConn, gglobs.logConn, gglobs.hisConn:\n", gglobs.currentConn, "\n", gglobs.logConn, "\n", gglobs.hisConn)
        #print("plotGraph: gglobs.varcheckedCurrent   ", gglobs.varcheckedCurrent)
        #print("plotGraph: gglobs.varcheckedLog", gglobs.varcheckedLog)
        #print("plotGraph: gglobs.varcheckedHis", gglobs.varcheckedHis)

        gglobs.allowGraphUpdate    = False
        for i, vname in enumerate(gglobs.varnames):
            value  = gglobs.varcheckedCurrent[vname]   # bool
            #print("vname, values in gglobs.varcheckedCurrent.items():", vname, value)
            self.varDisplayCheckbox[vname]  .setChecked(value)
            self.varDisplayCheckbox[vname]  .setEnabled(value)
            self.select.model().item(i)     .setEnabled(value)
        gglobs.allowGraphUpdate    = True


        if gglobs.currentDBData.size > 0:
            fprint(header("Plot Data"))
            fprint("from: {}".format(gglobs.currentDBPath))

        self.figure.set_facecolor('#F9F4C9') # change colorbg in graph from gray to light yellow
        self.reset_replotGraph()

        setDebugIndent(0)


    def updatecursorposition(self, event):
        """when cursor inside plot, get position and print to statusbar"""
        # see: https://matplotlib.org/api/backend_bases_api.html#matplotlib.backend_bases.MouseEvent

        # calc based on:
        # gglobs.y1_limit = ax1.get_ylim    defined in gplot.py
        # gglobs.y2_limit = ax2.get_ylim

        try: # results in non-breaqking error messages when no data are displayed
            if event.inaxes:
                x = event.xdata
                y2 = event.ydata
                #print x,y
                y1 = (y2 - gglobs.y2_limit[0]) / (gglobs.y2_limit[1] - gglobs.y2_limit[0]) * (gglobs.y1_limit[1] - gglobs.y1_limit[0]) + gglobs.y1_limit[0]

                if gglobs.Xunit == "Time":
                    tod = (str(mpld.num2date(x)))[:19]          # time of day
                    t   = gplot.getTsr(gglobs.logTimeFirst, x)

                else:
                    tod = gplot.getToD(gglobs.logTimeFirst, x, gglobs.XunitCurrent)
                    t   = "{:0.3f} {}s".format(x, gglobs.XunitCurrent)

                message = "Time since 1st record: {}, Time: {}, Counter: {:0.3f}, Ambient: {:0.3f}".format(t, tod, y1, y2)
                self.showStatusMessage(message, timing=0, error=False) # message remains until overwritten by next
        except:
            pass


    def onclick(self, event):
        """on mouseclick in graph enter time coords into xmin, xmax
        left click = xmin, right click = xmax"""

        try: # if no data are shown, this may result in non-breaking error messages
            if event.inaxes:
                x = event.xdata
                y = event.ydata
                b = event.button
                #print event, x,y,b

                if gglobs.Xunit == "Time":
                    t = (str(mpld.num2date(x)))[:19]
                else:
                    t = "{:0.6f}".format(x)

                if b == 1:                  # left click, xmin
                    self.xmin.setText(t)
                elif b == 3:                # right click, xmax
                    self.xmax.setText(t)
                else:
                    pass
        except:
            pass


#history
    def getHistory(self, source = "Binary File"):
        """getHistory from source. source is one out of:
        - "Device"
        - "Database"
        - "Binary File"
        - "Parsed File"
        no return; data stored in global variables"""

    #
    # make the filedialog
    #
        # conditions
        if   source == "Database":
            # there must be an existing '*hisdb' file;
            # writing to it is not necessary; it will not be modified
            dlg=QFileDialog(caption = "Get History from Existing Database File", options=QFileDialog.DontUseNativeDialog)
            dlg.setFileMode(QFileDialog.ExistingFile)
            dlg.setNameFilter("History Files (*.hisdb)")

        elif source == "Binary File":
            # there must be an existing, readable '*.bin' file,
            # and it must be allowed to write .hisdb files
            # the bin file will remain unchanged
            dlg=QFileDialog(caption = "Get History from Existing Binary File", options=QFileDialog.DontUseNativeDialog)
            dlg.setFileMode(QFileDialog.ExistingFile)
            dlg.setNameFilter("History Files (*.bin)")

        elif source == "Parsed File":
            # there must be an existing, readable '*.his' file
            # and it must be allowed to write .hisdb files
            # the his file will remain unchanged
            dlg=QFileDialog(caption= "Get History from Existing *.his or other CSV File", options=QFileDialog.DontUseNativeDialog)
            dlg.setFileMode(QFileDialog.ExistingFile)
            dlg.setNameFilter("History Files (*.his *.csv *.txt)")

        elif source == "Device":    # a GMC device
            if gglobs.logging:
                fprint(header("Get History from GMC Device"))
                fprint("Cannot load History when logging. Stop Logging first", error=True)
                return

            # may use existing or new .hisdb file, but must be allowed to overwrite this file
            # an existing hisdb file will be overwritten
            dlg=QFileDialog(caption = "Get History from GMC Device - enter new filename or select from existing", options=QFileDialog.DontUseNativeDialog)
            dlg.setFileMode(QFileDialog.AnyFile)
            dlg.setNameFilter("History Files (*.hisdb)")

        elif source == "GSDevice":  # a Gamma Scout device
            # may use existing or new .hisdb file, but must be allowed to overwrite this file
            # an existing hisdb file will be overwritten
            dlg=QFileDialog(caption = "Get History from Gamma-Scout Device - enter new filename or select from existing", options=QFileDialog.DontUseNativeDialog)
            dlg.setFileMode(QFileDialog.AnyFile)
            dlg.setNameFilter("History Files (*.hisdb)")

        elif source == "GSDatFile":
            # there must be an existing, readable '*.dat' file, created by
            # memory dumping of a Gamm Scout device,
            # and it must be allowed to write .hisdb files
            # the dat file will remain unchanged
            dlg=QFileDialog(caption = "Get History from Existing Gamma Scout *.dat File", options=QFileDialog.DontUseNativeDialog)
            dlg.setFileMode(QFileDialog.ExistingFile)
            dlg.setNameFilter("History Files (*.dat)")

        elif source == "AMDeviceCAM":  # an AmbioMon device for CAM data
            # may use existing or new .hisdb file, but must be allowed to overwrite this file
            # an existing hisdb file will be overwritten
            dlg=QFileDialog(caption = "Get History from AmbioMon Device - enter new filename or select from existing", options=QFileDialog.DontUseNativeDialog)
            dlg.setFileMode(QFileDialog.AnyFile)
            dlg.setNameFilter("History Files (*.hisdb)")

        elif source == "AMDeviceCPS":  # an AmbioMon device for CPS data
            # may use existing or new .hisdb file, but must be allowed to overwrite this file
            # an existing hisdb file will be overwritten
            dlg=QFileDialog(caption = "Get History from AmbioMon Device - enter new filename or select from existing", options=QFileDialog.DontUseNativeDialog)
            dlg.setFileMode(QFileDialog.AnyFile)
            dlg.setNameFilter("History Files (*.hisdb)")

        #~ elif source == "AMDatFile":
            #~ ####### not valid -- placeholder for AmbioMon !!!!!!!! ############
            #~ # wird es auch nicht geben, da CSV Files verwendet werden !!!
            #~ #
            #~ # there must be an existing, readable '*.dat' file, created by
            #~ # memory dumping of a Gamm Scout device,
            #~ # and it must be allowed to write .hisdb files
            #~ # the dat file will remain unchanged
            #~ dlg=QFileDialog(caption = "Get History from Existing Gamma Scout *.dat File", options=QFileDialog.DontUseNativeDialog)
            #~ dlg.setFileMode(QFileDialog.ExistingFile)
            #~ dlg.setNameFilter("History Files (*.dat)")

        elif source == "AMFileCAM":
            # there must be an existing, readable '*.CAM' file, created by
            # e.g. downloading from an AmbioMon device,
            # and it must be allowed to write .hisdb files
            # the *.CAM file will remain unchanged
            dlg=QFileDialog(caption = "Get History from Existing AmbioMon binary *.CAM File", options=QFileDialog.DontUseNativeDialog)
            dlg.setFileMode(QFileDialog.ExistingFile)
            dlg.setNameFilter("History Binary Files (*.CAM)")

        elif source == "AMFileCPS":
            # there must be an existing, readable '*.CPS' file, created by
            # e.g. downloading from an AmbioMon device,
            # and it must be allowed to write .hisdb files
            # the *.CPS file will remain unchanged
            dlg=QFileDialog(caption = "Get History from Existing AmbioMon binary *.CPS File", options=QFileDialog.DontUseNativeDialog)
            dlg.setFileMode(QFileDialog.ExistingFile)
            dlg.setNameFilter("History Binary Files (*.CPS)")

        else:
            printProgError("getHistory: Filedialog: Wrong source: ", source)

        dlg.setViewMode     (QFileDialog.Detail)
        dlg.setWindowIcon   (self.iconGeigerLog)
        dlg.setDirectory    (gglobs.fileDialogDir)

        # Execute dialog
        if dlg.exec_() == QDialog.Accepted:  pass     # QDialog Accepted
        else:                                return   # QDialog Rejected
    ### end filedialog -  a file was selected

    #
    # Process the selected file
    #
        while True:
            fprint(header("Get History from {}".format(source)))
            dprint("getHistory: from source: ", source)
            setDebugIndent(1)

            gglobs.fileDialogDir = dlg.directory().path() # remember the directory
            #print("getHistory: fileDialogDir:", gglobs.fileDialogDir)

            fnames      = dlg.selectedFiles()
            fname       = str(fnames[0])                # file path
            fext        = os.path.splitext(fname)[1]    # file ext
            fname_base  = os.path.splitext(fname)[0]    # file basename with path w/o ext
            dprint( "getHistory: fname: '{}', fname_base: '{}', fext: '{}'".format(fname, fname_base, fext))

            gglobs.binFilePath = None
            gglobs.hisFilePath = None
            gglobs.datFilePath = None

            if   source == "Database":
                gglobs.hisDBPath   = fname # already has extension ".hisdb"
                if not isFileReadable(gglobs.hisDBPath):     break

            elif source == "Binary File":
                gglobs.binFilePath = fname
                gglobs.hisDBPath   = fname_base + ".hisdb"
                if not isFileReadable (gglobs.binFilePath):  break
                if not isFileWriteable(gglobs.hisDBPath):    break

            elif source == "Parsed File":
                gglobs.hisFilePath = fname
                gglobs.hisDBPath   = fname_base + ".hisdb"
                if not isFileReadable (gglobs.hisFilePath):  break
                if not isFileWriteable(gglobs.hisDBPath):    break

            elif source in ("Device", "GSDevice", "AMDeviceCAM", "AMDeviceCPS"):
                if fext != ".hisdb":
                    gglobs.hisDBPath   = fname + ".hisdb" # file has any extension or none
                else:
                    gglobs.hisDBPath   = fname            # file already has .hisdb extension
                if not isFileWriteable(gglobs.hisDBPath):    break

            elif source == "GSDatFile":
                gglobs.datFilePath = fname
                #~ gglobs.hisDBPath   = fname_base + ".hisdb"
                gglobs.hisDBPath   = fname + ".hisdb"
                if not isFileReadable (gglobs.datFilePath):  break
                if not isFileWriteable(gglobs.hisDBPath):    break

            elif source in ("AMFileCAM", "AMFileCPS"):
                gglobs.AMFilePath = fname
                #~ gglobs.hisDBPath   = fname_base + ".hisdb"
                gglobs.hisDBPath   = fname + ".hisdb"
                if not isFileReadable (gglobs.AMFilePath):   break
                if not isFileWriteable(gglobs.hisDBPath):    break

            else:
                printProgError("getHistory: Processing Selected File: Wrong source: ", source)


            # Messagebox re Overwriting file
            if source in ("Device", "GSDevice", "AMDeviceCAM", "AMDeviceCPS"):
                if os.path.isfile(gglobs.hisDBPath):
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Critical)
                    msg.setWindowTitle("CAUTION")
                    critical  = """You selected an existing file, which will be <b>OVERWRITTEN</b> if you continue. Please confirm with OK.
                                    <br><br>Otherwise click Cancel and enter a new filename in the Get History from Device dialog."""
                    msg.setText(critical)
                    msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
                    msg.setDefaultButton(QMessageBox.Cancel)
                    msg.setEscapeButton(QMessageBox.Cancel)
                    retval = msg.exec_()

                    if retval != 1024:
                        fprint("Get History is cancelled")
                        break

            gglobs.currentDBPath   = gglobs.hisDBPath

            #dprint("getHistory: gglobs.binFilePath:     ", gglobs.binFilePath)
            #dprint("getHistory: gglobs.hisFilePath:     ", gglobs.hisFilePath)
            #dprint("getHistory: gglobs.hisDBPath:       ", gglobs.hisDBPath)
            #dprint("getHistory: gglobs.currentDBPath:   ", gglobs.currentDBPath)

            self.setBusyCursor()
            fprint("History database: {}"        .format(gglobs.hisDBPath))
            dprint("getHistory: database file:{}".format(gglobs.hisDBPath))

            self.dcfHis.setText(gglobs.currentDBPath)
            self.clearLogPad()

            # an existing classic his, bin, or dat file was selected,
            # delete old database first
            if      gglobs.hisFilePath != None \
                or  gglobs.binFilePath != None \
                or  gglobs.datFilePath != None \
                or  gglobs.hisDBPath   != None and source in ("Device", "GSDevice", "AMDeviceCAM", "AMDeviceCPS") :

                #gglobs.hisConn = gsql.DB_deleteDatabase(gglobs.hisConn, gglobs.hisDBPath)
                gsql.DB_deleteDatabase(gglobs.hisConn, gglobs.hisDBPath)

            # Open the database
            gglobs.hisConn = gsql.DB_openDatabase  (gglobs.hisConn, gglobs.hisDBPath)

            if gglobs.hisFilePath != None:
                fprint("Creating from file {}".format(gglobs.hisFilePath))
                # read data from CSV file into database
                self.setNormalCursor()
                success = self.getCSV(gglobs.hisFilePath)
                if success:
                    self.setBusyCursor()
                    gsql.DB_convertCSVtoDB(gglobs.hisConn, gglobs.hisFilePath)
                else:
                    efprint("Database creation was cancelled")
                    return

            elif gglobs.binFilePath != None:
                fprint("Creating from file {}".format(gglobs.binFilePath))

            # Make Hist for source = GMC Device, GMC Binary File
            if source in ("Device", "Binary File"):
                error, message = ghist.makeHistory(source)
                if error == -1:                                # a severe error
                    fprint(message, error=True)
                    break

            # Make Hist for source = Gamma Scout device or Gamma Scout *.dat File
            elif source in ("GSDevice", "GSDatFile"):
                error, message = ggscout.GSmakeHistory(source, gglobs.GSDeviceName)
                if error == -1:                                # a severe error
                    fprint(message, error=True)
                    break

            # Make Hist for source = AmbioMon device
            elif source in ("AMDeviceCAM", "AMDeviceCPS"):
                error, message = gambiomon.AMmakeHistory(source, gglobs.AmbioDeviceName)
                if error == -1:                                # a severe error
                    fprint(message, error=True)
                    break

            # Make Hist for source = AmbioMon binary file
            elif source in ("AMFileCAM", "AMFileCPS"):
                error, message = gambiomon.AMmakeHistory(source, gglobs.AmbioDeviceName)
                if error == -1:                                # a severe error
                    fprint(message, error=True)
                    break


#keep       gglobs.hisDBData                       = self.getDataFromFile() # old stuff keep !!!!
            gglobs.hisDBData, gglobs.varcheckedHis = self.getDataFromDatabase() # also creates varchecked

            self.plotGraph("His")
            self.checkLoggingState()
            QApplication.processEvents() # to make Normal Cursor appear only after graph shown
            break

        self.setNormalCursor()

        setDebugIndent(0)


    def toolPrintArrayInfo(self, name, array):
        """tool for devel for some array properties"""

        #return

        print("\nArrayname: " + name + ": ")
        print("rows type:   ", type(array))
        print("len(rows):   ", len(array))
        print("all rows:\n",   array)
        print()
        print("rows[0] type:", type(array[0]))
        print("len(rows[0]):", len(array[0]))
        print("all rows[0]:\n", array[0])
        for i in range(len(array[0])):
            print("{}[0][{}]: {}, type:{}".format(name, i, array[0][i], type(array[0][i])))
        print("------------------------------------------------")


    def getDataFromDatabase(self):
        """
        read the data from database
        and create data array with timestamp, CPM, CPS, etc
        """

        dprint("getDataFromDatabase: ")
        setDebugIndent(1)

        start = time.time()

        nrows           = None                           # set later by DB call
        ncols           = gglobs.datacolsDefault
        localvarchecked = gglobs.varcheckedCurrent.copy()

        sql = """
            SELECT
                Julianday - {} as jday,
                CPM,
                CPS,
                CPM1st,
                CPS1st,
                CPM2nd,
                CPS2nd,
                CPM3rd,
                CPS3rd,
                T,
                P,
                H,
                X
            FROM data
            WHERE Julianday IS NOT NULL
            ORDER BY jday
             """.format(gglobs.JULIAN111)

    # get the db rows
        # as a list of tuples:
        # [(737062.8293287037, 14, 0, None, None, None, None, None, None, None, None),
        #  (737062.8293402777, 14, 0, None, None, None, None, None, None, None, None),
        #  (737062.8293518517, 14 ...
        # will crash if a column is not defined
        try:
            start3  = time.time()
            res     = gglobs.currentConn.execute(sql)
            rows    = res.fetchall()
            nrows   = len(rows)
            vprint("getDataFromDatabase: {:8.2f}ms sql call, " .format((time.time() - start3) * 1000.))
        #    self.toolPrintArrayInfo("rows", rows)
        except Exception as e:
            dprint("Exception executing SQL: ", e, debug=True)
            dprint("SQL command: ", sql, debug=True)
            efprint("ERROR trying to read database: ", e)
            setDebugIndent(0)
            return np.empty([0, 0]), localvarchecked


    # convert db rows to np array
        # np_rows is a type: <class 'numpy.ndarray'>, a ndarray of ndarrays, like:
        # [[737058.5991640585 17 0 ... 1024.68 32.0 9]
        #  [737058.5991872079 17 0 ... None None None]
        #  [737058.5992103536 17 0 ... None None None]
        start4 = time.time()
        np_rows = np.asarray(rows)
        vprint("getDataFromDatabase: {:8.2f}ms convert db rows to np.asarray" .format((time.time() - start4) * 1000.))
    #    self.toolPrintArrayInfo("np_rows", np_rows)

    #   create dataarray value by value, check for being "floatable"
        # dataArray is a type <class 'numpy.ndarray'>
        # this converts the None to nan
        # [[7.37058599e+05 1.70000000e+01 0.00000000e+00 ... 1.02468000e+03  3.20000000e+01 9.00000000e+00]
        #  [7.37058599e+05 1.70000000e+01 0.00000000e+00 ...            nan             nan            nan]
        #  [7.37058599e+05 1.70000000e+01 0.00000000e+00 ...
        start5      = time.time()
        dataArray   = np.empty([nrows, ncols])
        if nrows > 0:    # do it only when data are in the database;  otherwise ???
            for row in range(0, nrows):              # rows
                for col in range(0, ncols):          # columns
                    try:
                        dataArray [row, col] = np_rows[row, col]
                    except Exception as e:
                        dataArray[row, col] = gglobs.NAN # "ValueError: cannot convert float NaN to integer"
                        dprint("getDataFromDatabase: Exception: row={}, col={} ".format(row, col), e)

        """
    # create dataarray via slicing
        # dataArray is a type <class 'numpy.ndarray'>
        # this converts the None to nan
        # [[7.37058599e+05 1.70000000e+01 0.00000000e+00 ... 1.02468000e+03  3.20000000e+01 9.00000000e+00]
        #  [7.37058599e+05 1.70000000e+01 0.00000000e+00 ...            nan             nan            nan]
        #  [7.37058599e+05 1.70000000e+01 0.00000000e+00 ...
        start5      = time.time()
        dataArray   = np.empty([nrows, ncols])
        if nrows > 0:    # do it only when data are in the database; error otherwise
            try:
                for i in range(0, ncols):
                    try:
                        dataArray[:, i] = np_rows[:, i ]
                    except Exception as e:
                        dataArray[:, i] = gglobs.NAN # "ValueError: cannot convert float NaN to integer"
                        #dataArray[:, i] = 0
                        dprint("getDataFromDatabase: Exception: i={} ".format(i), e)

            except Exception as e:
                dprint("getDataFromDatabase: Exception: ", e)
                efprint("getDataFromDatabase: Exception: {}".format(e))
                efprint("getDataFromDatabase: col: {}, np_rows[:, i ]: {}".format(i, np_rows[:, i ]))
                setDebugIndent(0)
                return np.empty([0, 0]), localvarchecked

        vprint("getDataFromDatabase: {:8.2f}ms make dataarray from np.asarray" .format((time.time() - start5) * 1000.))
    #    self.toolPrintArrayInfo("dataArray", dataArray)
"""


    # Check the dataarray for columns having ONLY nan values. Block those
    # column from being selectable in combobox and showing in graph
        start6 = time.time()
        # all except DateTime set to true if at least one entry is not nan
        for i, a in enumerate(gglobs.varnames):
            if not np.isnan(dataArray[:, i + 1]).all():
                #print("i:", i, a, "has data")
                localvarchecked [a] = True
            else:
                #print("i:", i, a, "has only nan data")
                localvarchecked [a] = False
        vprint("getDataFromDatabase: {:8.2f}ms for nan checking, " .format((time.time() - start6) * 1000.))

    # Clean up
        dprint("getDataFromDatabase: {:8.2f}ms total for {} records with {} values each".format((time.time() - start) * 1000., nrows, ncols))

        setDebugIndent(0)

        return dataArray, localvarchecked






    def setLogTimings(self):
        """Set logcycle"""

        dprint("setLogTimings:")
        setDebugIndent(1)

        lctime     = QLabel("Log Cycle [s]\n(at least 0.1s)")
        lctime.setAlignment(Qt.AlignLeft)

        self.ctime  = QLineEdit()
        validator = QDoubleValidator(0.1, 9999, 1, self.ctime)
        self.ctime.setValidator(validator)
        self.ctime.setToolTip('The logging cycle in seconds')
        self.ctime.setText("{:0.3g}".format(gglobs.logcycle))

        graphOptions=QGridLayout()
        graphOptions.addWidget(lctime,                  0, 0)
        graphOptions.addWidget(self.ctime,              0, 1)

        graphOptionsGroup = QGroupBox()
        graphOptionsGroup.setLayout(graphOptions)

        d = QDialog(self) # set parent self to popup in center of geigerlog window
        d.setWindowIcon(self.iconGeigerLog)
        d.setFont(self.fontstd)
        d.setWindowTitle("Set Log Timings")
        d.setWindowModality(Qt.ApplicationModal)
        #d.setWindowModality(Qt.NonModal)
        #d.setWindowModality(Qt.WindowModal)

        self.bbox = QDialogButtonBox()
        self.bbox.setStandardButtons(QDialogButtonBox.Cancel | QDialogButtonBox.Ok )
        self.bbox.accepted.connect(lambda: d.done(0))
        self.bbox.rejected.connect(lambda: d.done(99))

        gglobs.btn = self.bbox.button(QDialogButtonBox.Ok)
        gglobs.btn.setEnabled(True)

        layoutV = QVBoxLayout(d)
        layoutV.addWidget(graphOptionsGroup)
        layoutV.addWidget(self.bbox)

        self.ctime.textChanged.connect(self.check_state) # last chance
        self.ctime.textChanged.emit   (self.ctime.text())

        if gglobs.logging:
            gglobs.btn.setEnabled(False)
            self.ctime.setEnabled(False)
            self.ctime.setStyleSheet('QLineEdit { background-color: %s;  }' % ("#e0e0e0",))

        retval = d.exec_()
        #print("reval:", retval)

        if retval == 99:
            dprint("setLogTimings: Escape, cycle time unchanged: ", gglobs.logcycle)
        else:
            # change the cycle time
            oldlogcycle = gglobs.logcycle
            logcycle    = self.ctime.text().replace(",", ".")  #replace comma with dot
            try:    lc  = round(float(logcycle), 1)
            except: lc  = oldlogcycle

            gglobs.logcycle = lc
            self.showTimingSetting(gglobs.logcycle)
            dprint("setLogTimings: ok, new cycle time: ", gglobs.logcycle)

            # update database with logcyle
            if gglobs.logConn != None:
                gsql.DB_updateLogcycle(gglobs.logConn, gglobs.logcycle)

        setDebugIndent(0)


    def check_state(self, *args, **kwargs):
        sender = self.sender()

        #print("sender.text():", sender.text())
        #print("args:", args)
        #print("kwargs:", kwargs)

        try:
            v = float(sender.text().replace(",", "."))
            if v < 0.1:
                state = 0       # too low
            else:
                state = 2       # ok
        except:
            state = 0           # wrong

        #print("QValidator.Acceptable:", QValidator.Acceptable)

        # Value: QValidator.Acceptable == 2
        if state == QValidator.Acceptable:
            #bgcolor = '#c4df9b' # green
            bgcolor = 'white' # white
            color   = 'black'
            gglobs.btn.setEnabled(True)
        #elif state == QValidator.Intermediate:
        #    color = '#fff79a' # yellow
        else:
            bgcolor = '#f6989d' # red
            bgcolor = '#fff79a' # yellow
            color   = 'red'
            self.ctime.setFocus()
            gglobs.btn.setEnabled(False)

        sender.setStyleSheet('QLineEdit { background-color: %s; color: %s }' % (bgcolor, color))


#logging
    def startLogging(self):
        """Starts the logging"""

        dprint("startLogging:")
        setDebugIndent(1)

        fprint(header("Start Logging"))

        while True:

            # A logfile is not loaded
            # should never happen as the start button should be inactive
            if gglobs.logDBPath == None:
                efprint("ALERT: Cannot log; Logfile is not loaded")
                break

            # Logfile is read-only, not writeable
            if not os.access(gglobs.logDBPath, os.W_OK):
                efprint("ALERT: Cannot log; Logfile is read-only, not available for writing!")
                break

            # No loggable variables
            if gglobs.activeVariables == 0:
                fprint("ALERT: No variables for logging available; Logging is not possible!", error=True)
                fprint("Please check configuration if this is unexpected !", error=True)
                break

            # all clear, go for it
            gglobs.logging              = True          # set early, to alloww threads to get data
            gglobs.cpm_counter          = 0
            gglobs.currentDBPath        = gglobs.logDBPath

            w1  = "#DEVICES, {}, Connected: {}"           .format(stime(), gglobs.textDevVars)
            w2  = "#LOGGING, {}, Start: Cycle: {} sec"    .format(stime(), gglobs.logcycle)
            for a in (w1, w2):
                logPrint(a)
                fprint  (a)

            comments    = [None] * 2
            cinfo       = "Connected: {}"              .format(gglobs.textDevVars)
            comments[0] = ["DEVICES", "NOW", "localtime", cinfo]

            cinfo       = "Start: Cycle: {} sec"       .format(gglobs.logcycle)
            comments[1] = ["LOGGING", "NOW", "localtime", cinfo]
            gsql.DB_insertComments(gglobs.logConn, comments)

            self.cleanupDevices("before")

            # a loaded file may contain variables, which are currently not loggable
            # but should be displayed. Make sure all old and all new vars can be displayed
            for vname in gglobs.varnames:
                gglobs.varcheckedLog[vname] = True if    gglobs.varcheckedLog[vname] \
                                                      or gglobs.loggableVars[vname] \
                                         else False

            self.timer.start(int(gglobs.logcycle * 1000.0)) # timer time is in ms; logcycle in sec
            dprint("startLogging: Logging now; Timer is started with cycle {} sec.".format(gglobs.logcycle))

            self.checkLoggingState()
            self.plotGraph("Log")               # initialize graph settings; getLogValues calls makePlot directly
            self.getLogValues()                  # make first call now; timer fires only AFTER 1st period!

            break

        setDebugIndent(0)


    def stopLogging(self):
        """Stops the logging"""

        if not gglobs.logging: return

        dprint("stopLogging:")
        setDebugIndent(1)

        fprint(header("Stop Logging"))
        self.timer.stop()
        gglobs.logging = False

        writestring  = "#LOGGING, {}, Stop".format(stime())
        logPrint(writestring)
        fprint(writestring)

        gsql.DB_insertComments(gglobs.logConn, [["LOGGING", "NOW", "localtime", "Stop"]])

        self.cleanupDevices("after")

        self.checkLoggingState()
        self.labelVar.setStyleSheet('color:darkgray;')
        self.updateDisplayVariableValue()

        dprint("stopLogging: Logging is stopped")
        setDebugIndent(0)


    def cleanupDevices(self, ctype="before"):       # ctype="before" or "after"
        """like getExtrabyte for GMC devices"""

        if   ctype == "before":
            if gglobs.GMCConnection:
                dprint("startLogging: Cleaning pipeline before logging")
                gcommands.getExtraByte()

        elif ctype == "after":
            if gglobs.GMCConnection:
                dprint("stopLogging: Cleaning pipeline after logging")
                gcommands.getExtraByte()

        else:
            #whatever; just as placeholder
            if gglobs.GMCConnection:
                dprint("stopLogging: Cleaning pipeline ...")
                gcommands.getExtraByte()



    def addComment(self, dataType):
        """Adds a comment to the current log"""

        if dataType == "Log":
            if gglobs.logConn is None:
                self.showStatusMessage("No LogFile available")
                return
            info        = "Enter your comment to the Log: " + " "*100
        else:
            if gglobs.hisConn is None:
                self.showStatusMessage("No HisFile available")
                return
            info        = "Enter your comment to the History: " + " "*97

        d           = QInputDialog()
        dtext, ok   = d.getText(self, 'Add a Comment', info)
        dtext       = str(dtext)

        if ok:
            ctype       = "COMMENT"
            cJulianday  = "NOW"
            cinfo       = dtext
            if dataType == "Log":
                fprint(header("Add Comment to Log"))
                logPrint("#COMMENT, {}, {}".format(stime(), dtext)) # to the LogPad
                fprint("#COMMENT, {}, {}".format(stime(), dtext))   # to the NotePad
                gsql.DB_insertComments(gglobs.logConn, [[ctype, cJulianday, "localtime", cinfo]]) # to the DB

            else: # dataType == "His"
                fprint(header("Add Comment to History"))
                fprint("#COMMENT, {}, {}".format(stime(), dtext))   # to the NotePad
                cJulianday  = None
                gsql.DB_insertComments(gglobs.hisConn, [[ctype, cJulianday, "localtime", cinfo]]) # to the db

        vprint("Add a Comment: text='{}', ok={}".format(dtext,ok))


    def addError(self, errtext):
        """Adds ERROR info from gcommands as comment to the current log"""

        logPrint("#COMMENT, {}, {}".format(stime(), errtext))   # to the LogPad

        if not gglobs.logConn is None:                          # to the DB
            gsql.DB_insertComments(gglobs.logConn, [["DevERROR", "NOW", "localtime", errtext]])


    def getLogValues(self):
        """
        Reads variables CPM, ... etc. from devices, saves it in log file, and
        prints record into LogPad.
        Called by the timer once the timer is started
        """

        if not gglobs.logging:      return    # currently not logging
        if gglobs.logConn == None:  return    # no connection defined

        start = time.time()
        vprint("getLogValues: saving to:", gglobs.logDBPath)
        setDebugIndent(1)

        timeJulian, timetag = gsql.DB_getLocaltime() # e.g.: 2458512.928904213, '2019-01-29 10:17:37'
        #print("timetag:", timetag, ",  timeJulian:",timeJulian)

    # Reset the logValues to NULL
        logValue = {}                              # logvalue dict
        for vname in gglobs.varnames:
            logValue[vname] = gglobs.NAN           # set all to NULL/NAN

    # get the new values for each device (if active)
        # gglobs.DevicesNames : ("GMC", "Audio", "I2C", "RadMon", "AmbioMon", "LabJack", "Gamma-Scout")
        # e.g.: gglobs.DevicesVars['GMC']    : ['CPM', 'CPS']
        # e.g.: gglobs.DevicesVars['RadMon'] : ['T', 'P', 'H', 'R']
        for devname in gglobs.DevicesNames:
            #print("devname:", devname)
            if   devname == "GMC"           and gglobs.GMCConnection:
                logValue.update(gcommands.getGMCValues(gglobs.DevicesVars[devname]))

            elif devname == "RadMon"        and gglobs.RMConnection:
                logValue.update(gradmon.getRadMonValues(gglobs.DevicesVars[devname]))

            elif devname == "AmbioMon"      and gglobs.AmbioConnection:
                logValue.update(gambiomon.getAmbioMonValues(gglobs.DevicesVars[devname]))

            elif devname == "LabJack"       and gglobs.LJConnection:
                logValue.update(glabjack.getLabJackValues(gglobs.DevicesVars[devname]))

            elif devname == "Audio"         and gglobs.AudioConnection:
                logValue.update(gsounddev.getSounddevValues(gglobs.DevicesVars[devname]))

            elif devname == "I2C"           and gglobs.I2CConnection:
                logValue.update(gi2c.getI2CValues(gglobs.DevicesVars[devname]))

            elif devname == "Gamma-Scout"   and gglobs.GSConnection:
                logValue.update(ggscout.getGammaScoutValues(gglobs.DevicesVars[devname]))

            elif devname == "Raspi"         and gglobs.RaspiConnection:
                logValue.update(graspi.getRaspiValues(gglobs.DevicesVars[devname]))

        if gglobs.debug:
            printstring = "Non-NAN LogValues: "
            for vname in gglobs.varnames:
                if not np.isnan(logValue[vname]):  printstring += ("{}:{}  ".format(vname, logValue[vname]))
            dprint(printstring)

    # create the printstring and print to LogPad
        # Example: 1162 11:43:40   M=143  S=1  M1=  S1=  M2=128.0  S2=3.0  T=25.0  P=983.63  H=24.0  R=18.0
        # timetag: cut-off Date, use time only  '2018-07-14 12:00:52' --> '12:00:52'
        printstring = "{:2.7g} {:8s} " .format(gglobs.cpm_counter, timetag[11:])
        for vname in gglobs.varnames:
            if gglobs.varcheckedLog[vname]:
                printstring     += " {}=".format(gglobs.vardict[vname][1])
#testing
                #print("getLogValues: vname, logValue[vname]: ", vname, logValue[vname])

                if not np.isnan(logValue[vname]):
                    printstring += "{:<7.6g}".format(logValue[vname]) # can print 6 digit number as integer
                    #~printstring += "{:<6.2f}".format(logValue[vname])
                else:
                    printstring += " " * 6
        logPrint(printstring)
        gglobs.lastRecord   = printstring    # needed when a record was snapped
        #print("----------------printstring:", printstring)

    # create the database insert and update in-memory data
        datalist     = [None] * (gglobs.datacolsDefault + 1) # (12 + 1) x None
        datalist[0]  = gglobs.cpm_counter
        datalist[1]  = "NOW"

        nanOnly      = True
        for i, vname in enumerate(gglobs.varnames):
            if not np.isnan(logValue[vname]):
                nanOnly         = False
                datalist[i + 2] = logValue[vname]
        #print("----------------datalist:", datalist)

        # save data, but only if at least one variable is not nan
        if not nanOnly:
            # Write to database
            gsql.DB_insertData(gglobs.logConn, [datalist[0:2] + ["localtime"] + datalist[2:]])

            # update the logDBData array; time is set to matplotlib time
            gglobs.logDBData = np.append(gglobs.logDBData, \
                                                        [[timeJulian - gglobs.JULIAN111, \
                                                          logValue["CPM"],    \
                                                          logValue["CPS"],    \
                                                          logValue["CPM1st"], \
                                                          logValue["CPS1st"], \
                                                          logValue["CPM2nd"], \
                                                          logValue["CPS2nd"], \
                                                          logValue["CPM3rd"], \
                                                          logValue["CPS3rd"], \
                                                          logValue["T"],      \
                                                          logValue["P"],      \
                                                          logValue["H"],      \
                                                          logValue["X"]]],    \
                                                          axis=0)

    # update index (=cpm_counter)
        gglobs.cpm_counter   += 1

    # update the lastValues
        if gglobs.lastValues == None:                     # occurs only right after start
            gglobs.lastValues = logValue
        else:
            for vname in gglobs.varnames:
                if not np.isnan(logValue[vname]):   # update only if not nan
                    gglobs.lastValues[vname] = logValue[vname]
        #print("gglobs.lastValues:",gglobs.lastValues)

    # update Value Displays
        self.updateDisplayVariableValue()   # getLogValues

        #before = time.time()

    # update graph, only if graph is the current one!
        if gglobs.activeDataSource == "Log":
            gglobs.currentDBData = gglobs.logDBData       # the data!
            gplot.makePlot()                              # direct plot; slightly quicker than PlotGraph

    # before graph: about 20ms with this: Connected: GMC( CPM CPS ); RadMon( T P H R ); Audio( CPM2nd CPS2nd );
    # after  graph: about 90...140ms with this: Connected: GMC( CPM CPS ); RadMon( T P H R ); Audio( CPM2nd CPS2nd );
        #print("getLogValues: duration before graph: {:3.3f} ms".format((before -start)*1000))
        #print("getLogValues: duration after graph:  {:3.3f} ms".format((time.time() -start)*1000))

    # relevant only when ESP32 is connected (maybe in conflict with other USB-To Serial devices!)
        #~readSerialConsole()

        setDebugIndent(0)
# end getLogValues##############################################################


#
# Update the display
#
    def showTimingSetting(self, logcycle):
        """update the Timings shown under Data"""

        self.dcycl.setText("Cycle: {:0.3g} s".format(logcycle))


    def updateDisplayVariableValue(self):
        """update the variable value displayed in the Graph area"""

        #print("-------------updateDisplayVariableValue: ")

        if gglobs.lastValues == None:
            self.labelVar.setText(" --- ")
            self.labelVar.setToolTip("Shows Last Values when logging")
            self.labelVar.setStatusTip("Shows Last Values when logging")
            return

        # updates the variables shown in the DisplayVariables Window
        try:
            for i, vname in enumerate(gglobs.varnames):
                if self.vlabels[i] is None: continue

                if not gglobs.varcheckedLog[vname]:
                    val = "{:>18s}".format("not mapped")
                else:
                    #if not np.isnan(gglobs.lastValues[vname][0]):
                    if not np.isnan(gglobs.lastValues[vname]):
                        #val = "{:>8.2f}".format(gglobs.lastValues[vname][0])
                        val = "{:>10.2f}".format(gglobs.lastValues[vname])
                    else:
                        val = "{:>10s}".format("  --- ")
                self.vlabels[i].setText(val)

                if gglobs.logging and gglobs.varcheckedLog[vname]:
                    self.vlabels[i].setStyleSheet("QLabel { background-color : #F4D345; color : black; }")
                elif not gglobs.logging and gglobs.varcheckedLog[vname]:
                    self.vlabels[i].setStyleSheet("QLabel {color:darkgray; }")
                else:
                    self.vlabels[i].setStyleSheet("QLabel {color:darkgray; font-size:14px;}")

        except Exception as e:
            wprint("------------updateDisplayVariableValue: 1st Exception:", e)
            pass

       # when logging with black on yellow background, else with dark.grey on grey
        if gglobs.logging and gglobs.activeDataSource == "Log":
            self.labelVar.setStyleSheet('color: black; background-color: #F4D345;')

        elif gglobs.activeDataSource == "His":
            self.labelVar.setText(" --- ")
            self.labelVar.setToolTip("Shows Last Values when logging")
            self.labelVar.setStatusTip("Shows Last Values when logging")
            self.labelVar.setStyleSheet('color:darkgray;')
            return

        selVar    = self.select.currentText()         # selected variable
        selUnit1  = self.yunit .currentText()
        selUnit2  = self.y2unit.currentText()
        varText   = " --- "
        statusTip = ""

        if gglobs.calibration1st == "auto":  scale1st = gglobs.DefaultCalibration1st
        else:                                scale1st = gglobs.calibration1st

        if gglobs.calibration2nd == "auto":  scale2nd = gglobs.DefaultCalibration2nd
        else:                                scale2nd = gglobs.calibration2nd

        if gglobs.calibration3rd == "auto":  scale3rd = gglobs.DefaultCalibration3rd
        else:                                scale3rd = gglobs.calibration3rd
        #print("scale1st:", scale1st)
        #print("scale2nd:", scale2nd)
        #print("scale3rd:", scale3rd)

        while True:

            if   selVar == "CPM":
                #value    = gglobs.lastValues["CPM"][0]
                value    = gglobs.lastValues["CPM"]
                if np.isnan(value):   break

                if selUnit1 == "CPM":
                    #~ varText ="{:0.2f} CPM".format(value)
                    varText ="{:0.0f} CPM".format(value)
                else:
                    varText = "{:0.2f} µSv/h".format(value * scale1st)

                statusTip  = "{:0.2f} CPM"     .format(value)
                statusTip += " = {:0.2f} CPS"  .format(value / 60)
                statusTip += " = {:0.2f} µSv/h".format(value * scale1st)
                statusTip += " = {:0.2f} mSv/a".format(value * scale1st / 1000 * 24 * 365.25)

            elif selVar == "CPS":
                #value    = gglobs.lastValues["CPS"][0]
                value    = gglobs.lastValues["CPS"]
                if np.isnan(value):   break

                if selUnit1 == "CPM":
                    #~ varText = "{:0.2f} CPS".format(value)
                    varText = "{:0.0f} CPS".format(value)
                else:
                    varText = "{:0.2f} µSv/h".format(value * 60 * scale1st)

                statusTip  = "{:0.2f} CPS"     .format(value)
                statusTip += " = {:0.2f} CPM"  .format(value * 60)
                statusTip += " = {:0.2f} µSv/h".format(value * 60 * scale1st)
                statusTip += " = {:0.2f} mSv/a".format(value * 60 * scale1st / 1000 * 24 * 365.25)



            elif selVar == "CPM1st":
                #value    = gglobs.lastValues["CPM1st"][0]
                value    = gglobs.lastValues["CPM1st"]
                if np.isnan(value):   break

                if selUnit1 == "CPM":
                    #~ varText = "{:0.2f} CPM".format(value)
                    varText = "{:0.0f} CPM".format(value)
                else:
                    varText = "{:0.2f} µSv/h".format(value * scale1st)

                statusTip  = "{:0.2f} CPM"     .format(value)
                statusTip += " = {:0.2f} CPS"  .format(value / 60)
                statusTip += " = {:0.2f} µSv/h".format(value * scale1st)
                statusTip += " = {:0.2f} mSv/a".format(value * scale1st / 1000 * 24 * 365.25)

            elif selVar == "CPS1st":
                #value    = gglobs.lastValues["CPS1st"][0]
                value    = gglobs.lastValues["CPS1st"]
                if np.isnan(value):   break

                if selUnit1 == "CPM":
                    #~ varText = "{:0.2f} CPS".format(value)
                    varText = "{:0.0f} CPS".format(value)
                else:
                    varText = "{:0.2f} µSv/h".format(value * scale1st)

                statusTip  = "{:0.2f} CPS"     .format(value)
                statusTip += " = {:0.2f} CPM"  .format(value * 60)
                statusTip += " = {:0.2f} µSv/h".format(value * 60 * scale1st)
                statusTip += " = {:0.2f} mSv/a".format(value * 60 * scale1st / 1000 * 24 * 365.25)



            elif selVar == "CPM2nd":
                #value    = gglobs.lastValues["CPM2nd"][0]
                value    = gglobs.lastValues["CPM2nd"]
                if np.isnan(value):   break

                if selUnit1 == "CPM":
                    #~ varText = "{:0.2f} CPM".format(value)
                    varText = "{:0.0f} CPM".format(value)
                else:
                    varText = "{:0.2f} µSv/h".format(value * scale2nd)

                statusTip  = "{:0.2f} CPM"     .format(value)
                statusTip += " = {:0.2f} CPS"  .format(value / 60)
                statusTip += " = {:0.2f} µSv/h".format(value * scale2nd)
                statusTip += " = {:0.2f} mSv/a".format(value * scale2nd / 1000 * 24 * 365.25)


            elif selVar == "CPS2nd":
                #value    = gglobs.lastValues["CPS2nd"][0]
                value    = gglobs.lastValues["CPS2nd"]
                if np.isnan(value):   break

                if selUnit1 == "CPM":
                    #~ varText = "{:0.2f} CPM".format(value)
                    varText = "{:0.0f} CPM".format(value)
                else:
                    varText = "{:0.2f} µSv/h".format(value * scale2nd)

                statusTip  = "{:0.2f} CPS"     .format(value)
                statusTip += " = {:0.2f} CPM"  .format(value * 60)
                statusTip += " = {:0.2f} µSv/h".format(value * 60 * scale2nd)
                statusTip += " = {:0.2f} mSv/a".format(value * 60 * scale2nd / 1000 * 24 * 365.25)



            elif selVar == "CPM3rd":
                #value    = gglobs.lastValues["CPM3rd"][0]
                value    = gglobs.lastValues["CPM3rd"]
                if np.isnan(value):   break

                if selUnit1 == "CPM":
                    #~ varText = "{:0.2f} CPM".format(value)
                    varText = "{:0.0f} CPM".format(value)
                else:
                    varText = "{:0.2f} µSv/h".format(value * scale2nd)

                statusTip  = "{:0.2f} CPM"     .format(value)
                statusTip += " = {:0.2f} CPS"  .format(value / 60)
                statusTip += " = {:0.2f} µSv/h".format(value * scale2nd)
                statusTip += " = {:0.2f} mSv/a".format(value * scale2nd / 1000 * 24 * 365.25)

            elif selVar == "CPS3rd":
                #value    = gglobs.lastValues["CPS3rd"][0]
                value    = gglobs.lastValues["CPS3rd"]
                if np.isnan(value):   break

                if selUnit1 == "CPM":
                    #~ varText = "{:0.2f} CPM".format(value)
                    varText = "{:0.0f} CPM".format(value)
                else:
                    varText = "{:0.2f} µSv/h".format(value * scale2nd)

                statusTip  = "{:0.2f} CPS"     .format(value)
                statusTip += " = {:0.2f} CPM"  .format(value * 60)
                statusTip += " = {:0.2f} µSv/h".format(value * 60 * scale2nd)
                statusTip += " = {:0.2f} mSv/a".format(value * 60 * scale2nd / 1000 * 24 * 365.25)


            elif selVar == "Temperature":
                #value    = gglobs.lastValues["T"][0]
                value    = gglobs.lastValues["T"]
                if np.isnan(value):   break

                if selUnit2 == "°C":
                    varText = "{:0.2f} °C".format(value)
                else:
                    varText = "{:0.2f} °F".format(value / 5 * 9 + 32)

                statusTip  = "{:0.2f} °C"     .format(value)
                statusTip += " = {:0.2f} °F"  .format(value / 5 * 9 + 32)

            elif selVar == "Pressure":
                #value    = gglobs.lastValues["P"][0]
                value    = gglobs.lastValues["P"]
                if np.isnan(value):   break

                varText = "{:0.2f} hPa".format(value)

                statusTip  = "{:0.2f} hPa"      .format(value)
                statusTip += " = {:0.2f} mbar"  .format(value)

            elif selVar == "Humidity":
                #value       = gglobs.lastValues["H"][0]
                value       = gglobs.lastValues["H"]
                if np.isnan(value):   break
                varText    = "{:0.2f} %".format(value)
                statusTip  = "{:0.2f} %".format(value)

            elif selVar == "Xtra":
                #value    = gglobs.lastValues["X"][0]
                value    = gglobs.lastValues["X"]
                if np.isnan(value):   break

                varText    = "{:0.2f}".format(value)
                statusTip  = "{:0.2f}".format(value)

            break

        self.labelVar.setText(varText)
        self.labelVar.setToolTip(statusTip)
        self.labelVar.setStatusTip(statusTip)


#
# Get Log file
#
    def quickLog(self):
        """Starts logging with empty default log file 'default.log'"""

        fprint(header("Quick Log"))
        fprint("Start logging using Quick Log database 'default.logdb'")
        dprint("quickLog: using Quick Log database 'default.logdb'")
        setDebugIndent(1)

        gglobs.logDBPath   = os.path.join(gglobs.dataPath, "default.logdb")

        gsql.DB_deleteDatabase(gglobs.logConn, gglobs.logDBPath)

        self.getLogFile(defaultLogDBPath = gglobs.logDBPath) # get default.logdb

        self.startLogging()

        setDebugIndent(0)


    def getLogFile(self, defaultLogDBPath = False, source="Database"):
        """Load existing file for logging, or create new one.
        source can be:
        - "Database" (which is *.logdb file )
        - "CSV File" (which is *.log or *.csv file)
        """

        #
        # Get logfile filename/path
        #
        # A default logfile is given; use it
        if defaultLogDBPath != False:
            gglobs.logFilePath      = None
            gglobs.logDBPath        = defaultLogDBPath
            #dprint("getLogFile: using defaultLogDBPath: ", gglobs.logDBPath)

        # A default logfile is NOT given; run dialog to get one
        else:
            if   source == "Database":
                # may use existing or new .logdb file, but must be allowed to overwrite this file
                # an existing logdb file will be appended with new data
                dlg=QFileDialog(caption= "Get LogFile - Enter New Filename or Select from Existing", options=QFileDialog.DontUseNativeDialog)
                dlg.setFileMode(QFileDialog.AnyFile)

                dlg.setNameFilter("Logging Files (*.logdb)")

            elif source == "CSV File":
                # there must be an existing, readable '*.log' or '*.csv' file
                # and it must be allowed to write .hisdb files
                # the log/csv file will remain unchanged

                dlg=QFileDialog(caption = "Get LogFile from Existing File", options=QFileDialog.DontUseNativeDialog)
                dlg.setFileMode(QFileDialog.ExistingFile)
                dlg.setNameFilter("Logging Files (*.log *.csv *.txt)")

            else:
                dprint("getLogFile: Programming ERROR: undefined source:", source)
                sys.exit(1)

            dlg.setViewMode(QFileDialog.Detail)
            dlg.setWindowIcon(self.iconGeigerLog)
            dlg.setDirectory(gglobs.fileDialogDir)

            # Execute dialog
            if dlg.exec_() == QDialog.Accepted:  pass     # QDialog Accepted
            else:                                return   # QDialog Rejected
            ### end filedialog -  a file was selected

            gglobs.fileDialogDir = dlg.directory().path()
            #print("dlg.directory().path():", dlg.directory().path())

            fnames  = dlg.selectedFiles()
            fname   = str(fnames[0])                    # file path
            fext    = os.path.splitext(fname)[1]        # file extension
            fname_base  = os.path.splitext(fname)[0]    # file basename with path w/o ext

            if   source == "Database":  # extension is .logdb
                gglobs.logFilePath = None
                if fext != ".logdb":
                    gglobs.logDBPath   = fname + ".logdb" # file has any extension or none
                else:
                    gglobs.logDBPath   = fname            # file already has .hisdb extension

            elif source == "CSV File":  # extension is .log
                gglobs.logFilePath = fname
                gglobs.logDBPath   = fname_base + ".logdb"
                if not isFileReadable (gglobs.logFilePath):   return

            if source == "Database":
                if os.path.isfile(gglobs.logDBPath):
                    msg = QMessageBox()
                    msg.setIcon(QMessageBox.Warning)
                    msg.setWindowTitle("CAUTION")
                    critical  = """You selected an existing file, which will be modified \
        when logging by <b>APPENDING</b> new data to it. Please confirm with OK.
        <br><br>Otherwise click Cancel and enter a new filename in the Get Log File dialog."""
                    msg.setText(critical)
                    msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
                    msg.setDefaultButton(QMessageBox.Cancel)

                    msg.setEscapeButton(QMessageBox.Cancel)
                    retval = msg.exec_()

                    if retval != 1024:
                        return

        # Done getting LogFile   ##############################################

        self.setBusyCursor()

        gglobs.currentDBPath   = gglobs.logDBPath

        fprint(header("Get Log"))
        fprint("Log database: {}".                               format(gglobs.logDBPath))
        if defaultLogDBPath == False:
            dprint("getLogFile: use selected Log DB file: '{}'". format(gglobs.logDBPath))
        else:
            dprint("getLogFile: use default Log DB file: '{}'".  format(defaultLogDBPath))
        setDebugIndent(1)

        #dprint("getLogFile: gglobs.logFilePath:     ", gglobs.logFilePath)
        #dprint("getLogFile: gglobs.logDBPath:       ", gglobs.logDBPath)
        #dprint("getLogFile: gglobs.currentDBPath:   ", gglobs.currentDBPath)

        if gglobs.logging:   self.stopLogging()
        self.dcfLog.setText(gglobs.logDBPath)
        self.clearLogPad()

        # an existing classic log was selected. It will be converted to a database;
        # any previous conversion will be deleted first
        if gglobs.logFilePath != None:
            fprint("Created from file {}".format(gglobs.logFilePath))
            # delete old database
            gsql.DB_deleteDatabase(gglobs.logConn, gglobs.logDBPath)

            # open new database
            gglobs.logConn      = gsql.DB_openDatabase(gglobs.logConn, gglobs.logDBPath)

            # read data from CSV file into database
            self.setNormalCursor()

            if self.getCSV(gglobs.logFilePath):
                self.setBusyCursor()
                gsql.DB_convertCSVtoDB(gglobs.logConn, gglobs.logFilePath)
            else:
                efprint("Database creation was cancelled")
                return


        # a database file was selected
        else:
            # Database File does NOT exist; create new one
            if not os.path.isfile(gglobs.logDBPath):
                fprint("LogFile newly created - available for writing")

                linfo = "LogFile newly created as '{}'".format(os.path.basename(gglobs.logDBPath))
                logPrint("#HEADER , {}, ".format(stime()) + linfo)

                # open new database
                gglobs.logConn      = gsql.DB_openDatabase(gglobs.logConn, gglobs.logDBPath)

                ctype       = "HEADER"
                cJulianday  = 'NOW'
                cinfo       = linfo
                gsql.DB_insertComments(gglobs.logConn, [[ctype, cJulianday, "localtime", cinfo]])

                # data array for the variables
                gglobs.logDBData = np.empty([0, gglobs.datacolsDefault])

            # Database File does exist
            else:
                # Database File does exist and can read and write
                if os.access(gglobs.logDBPath, os.W_OK):
                    fprint("LogFile opened - available for writing")

                # DB File does exist but can read only
                elif os.access(gglobs.logDBPath, os.R_OK):
                    fprint("LogFile opened - ALERT: available ONLY FOR READING", error=True)

                gglobs.logConn    = gsql.DB_openDatabase  (gglobs.logConn, gglobs.logDBPath)

# keep! gglobs.logDBData                       = self.getDataFromFile()       # via numpy
        gglobs.logDBData, gglobs.varcheckedLog = self.getDataFromDatabase()
        gglobs.lastValues                      = None


        # add the default logcycle as read from the database
        testcycle = gsql.DB_readLogcycle(gglobs.logConn)    # testcycle is type float
        #print("testcycle:",testcycle, type(testcycle))
        if testcycle is None:       # old DB, may not have one
            gsql.DB_insertLogcycle(gglobs.logConn, gglobs.logcycle)
        else:
            gglobs.logcycle = testcycle
            self.showTimingSetting(gglobs.logcycle)

        self.plotGraph("Log")
        self.checkLoggingState()
        QApplication.processEvents() # to make Normal Cursor appear only after graph shown
        self.setNormalCursor()

        setDebugIndent(0)


    def getCSV(self, CSV_FilePath):
        """get a csv file with option to reorder columns"""

        colCountCSV = gglobs.datacolsDefault + 1            # +1 = + index

        # this fails with non-UTF-8 characters in file, like when corrupted
        #with open(CSV_FilePath, "r", encoding='utf8') as cfghandle: # read CSV file as long str
        #    rlines = cfghandle.read()
        #    #print("rlines:", rlines)

        with open(CSV_FilePath, "rb") as cfghandle: # read CSV file as bytes
            byteline = cfghandle.read()
            #print("byteline:", byteline)

        rlines = ""
        for a in byteline.split(b"\n"):
            try:
                rl = a.decode("UTF-8")
            except Exception as e:
                rl = "#" + str(a)
            rlines += rl + "\n"



        yourfile = QLabel("Your CSV file:")
        yourfile.setFont(QFont("Sans",14,weight=QFont.Bold))

        csv_text = QPlainTextEdit()
        csv_text.setLineWrapMode(QPlainTextEdit.NoWrap)
        csv_text.setReadOnly(True)
        csv_text.appendPlainText(rlines)
        csv_text.moveCursor(QTextCursor.Start)

        demo = \
"""
#  Index,            DateTime,      CPM,      CPS,   CPM1st,   CPS1st,   CPM2nd,   CPS2nd,   CPM3rd,   CPS3rd,     Temp,    Press,    Humid,        X
       0, 2019-01-11 19:32:14,      181,        6,      168,        5,       13,        1,       77,        3,         ,         ,         ,
       1, 2019-01-11 19:32:18,      197,        3,      172,        2,       25,        1,       64,        4,     22.3,  1014.64,     45.7,       17
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Column0,             Column1,  Column2,  Column3,  Column4,  Column5,  Column6,  Column7,  Column8,  Column9, Column10, Column11, Column12, Column13"""


        demofile = QLabel("Default Association of Column Number and Data (Example Data)")
        demofile.setFont(QFont("Sans",14,weight=QFont.Bold))

        demo_text = QPlainTextEdit()
        demo_text.setLineWrapMode(QPlainTextEdit.NoWrap)
        demo_text.setReadOnly(True)
        demo_text.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        demo_text.setVerticalScrollBarPolicy  (Qt.ScrollBarAlwaysOff)
        demo_text.setMaximumHeight(120)
        demo_text.appendPlainText(demo)
        demo_text.moveCursor(QTextCursor.Start)

        # maxCols defines how many columns the CSV file is allowed to have
        maxCols         =  22              # all cols(=14) + None + 4 spare
        selectorList    = [""]* maxCols
        selectorList[0] = "None"           #  the None column: ignore the CSV data column
        for i in range(1, maxCols):
            selectorList[i] = "CSV Column "+str(i - 1)
        #print("selectorList:", selectorList) # =['None', 'Column 0', 'Column 1', 'Column 2', ...]

        # only as many col_selectors as there are columns finally; presently = 0...13 = 14
        col_selectors = [""]* colCountCSV
        for i in range(colCountCSV):
            col_selectors[i] = QComboBox()
            col_selectors[i].setMaxVisibleItems(25)
            col_selectors[i].addItems(selectorList)

            ### pick either one
            #col_selectors[i].setCurrentIndex(i + 1)    # every entry has same var as its index = all is preset
            col_selectors[i].setCurrentIndex(0)       # every entry is None                   = all is empty
            ###


        col_selectors[1].model().item(0) .setEnabled(False)


        # layout grid
        dataOptions=QGridLayout()
        dataOptions.setColumnStretch(1,10)          # the drop-down box cols
        dataOptions.setColumnStretch(3,10)          # the drop-down box cols
        dataOptions.setContentsMargins(5,5,5,5)     # spacing around the grid
        dataOptions.setVerticalSpacing(0)           # inner spacing

        #                                                          row, col
        dataOptions.addWidget(QLabel("Index:"),                     0,   0)
        dataOptions.addWidget(col_selectors[0],                     0,   1)
        dataOptions.addWidget(QLabel("DateTime:"),                  1,   0)
        dataOptions.addWidget(col_selectors[1],                     1,   1)

        for i, vname in enumerate(gglobs.varnames):
            dataOptions.addWidget(QLabel(gglobs.vardict[vname][0] + ":"),  i+2, 0)
            dataOptions.addWidget(col_selectors[i+2],                      i+2, 1)
            #dataOptions.addWidget(col_selectors[0],                      i+2, 1)
            if i >=5: break

        for i, vname in enumerate(gglobs.varnames):
            if i <= 5: continue
            dataOptions.addWidget(QLabel(gglobs.vardict[vname][0] + ":"),  i-6, 2)
            dataOptions.addWidget(col_selectors[i+2],                      i-6, 3)

        L0 = QLabel("Guidance:")
        L0.setFont((QFont("Sans",14,weight=QFont.Bold)))

        L5text = \
"""
- CSV file columns MUST be separated by comma
- A DateTime column MUST exist
- It is the order of the columns, which matters
- Set columns to 'None' to ignore
- Columns may be used multiple times
- Non-existing columns become 'Missing Values'
"""
        L5 = QLabel(L5text)
        L5.setFont((QFont("Sans",10,weight=QFont.Bold)))

        dial = QDialog()
        dial.setWindowIcon(self.iconGeigerLog)
        dial.setFont(self.fontstd)
        dial.setWindowTitle("Get Data from CSV File" )
        #dial.setWindowModality(Qt.ApplicationModal)
        #dial.setWindowModality(Qt.NonModal)
        dial.setWindowModality(Qt.WindowModal)
        dial.setMinimumWidth(1300)
        dial.setMinimumHeight(750)

        bbox    = QDialogButtonBox()
        bbox.setStandardButtons(QDialogButtonBox.Ok|QDialogButtonBox.Cancel)
        bbox.accepted.connect(lambda: dial.done(0))
        bbox.rejected.connect(lambda: dial.done(-1))

        layoutV2 = QVBoxLayout()
        layoutV2.addWidget(L0)
        layoutV2.addWidget(L5)
        layoutV2.addStretch()

        layoutH1 = QHBoxLayout()
        layoutH1.addLayout(layoutV2)
        layoutH1.addLayout(dataOptions)

        layoutV = QVBoxLayout(dial)            # uses dial as parent!
        layoutV.addWidget(yourfile)
        layoutV.addWidget(csv_text)
        layoutV.addWidget(demofile)
        layoutV.addWidget(demo_text)
        layoutV.addLayout(layoutH1)
        layoutV.addWidget(bbox)

        dexec = dial.exec_()
        if dexec == 0:
            gglobs.pointer = []
            for i in range(0, colCountCSV):
                gglobs.pointer.append(col_selectors[i].currentIndex() - 1) # -1 !
            return True
        else:
            gglobs.pointer = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] # ????
            return False


#
# Show data from Log, His, and Bin files ######################################
#
    def showData(self, dataSource=None, full=True):
        """Print Log or His Data to notepad, as full file or excerpt.
        dataSource can be 'Log' or 'His' or 'HisBin' (for binary data)"""

        #print("showData start, full: ", dataSource, full)

        if gglobs.activeDataSource == None:
            self.showStatusMessage("No data available")
            return

        textprintButtonOff = "DataExcerpt"
        textprintButtonOn  = "STOP"

        # stop printing
        if self.printbutton.text() == textprintButtonOn:
            gglobs.stopPrinting = True
            return

        # switch button mode to "STOP"
        self.printbutton.setStyleSheet('QPushButton {color: blue; background-color:white; font:bold;}')
        self.printbutton.setText(textprintButtonOn)

        if   dataSource == None:
            if    gglobs.activeDataSource == "Log": dataSource = "Log"
            else:                                   dataSource = "His"

        if   dataSource == "Log":                   self.showLogData(full=full)
        elif dataSource == "His":                   self.showHisData(full=full)
        elif dataSource == "HisBin":                gsql.createLstFromDB(full=full)

        # reset button mode to "DataExcerpt"
        self.printbutton.setStyleSheet('QPushButton {}')
        self.printbutton.setText(textprintButtonOff)


    def showLogData(self, full=True):
        """ print logged data to notepad"""

        if gglobs.logConn == None:
            self.showStatusMessage("No data available")
            return

        self.setBusyCursor()

        if full:
            addp = ""
        else:
            addp = " Excerpt"
        fprint(header("Show Log Data" + addp))
        fprint("from: {}\n".format(gglobs.logDBPath))

        sql, ruler = gsql.getShowCompactDataSql(gglobs.varcheckedLog)

        fprint(ruler)

        if full:
            data = gsql.DB_readData(gglobs.logConn, sql, limit=0)
            #print("showLogData data:", data)

            counter     = 0
            batch       = 50
            printstring = ""
            gglobs.stopPrinting = False
            for a in data:
                #print("showLogData a[1]:", a[1])
                if counter == batch:
                    fprint(printstring[:-1])
                    fprint(ruler)
                    printstring = ""
                    counter     = 0
                printstring += a + "\n"
                counter     += 1
                if gglobs.stopPrinting: break
            gglobs.stopPrinting = False
            fprint(printstring[:-1])
        else:
            fprint(self.getExcerptLines(sql, gglobs.logConn))

        fprint(ruler)

        self.setNormalCursor()


    def showLogTags(self):
        """print comments only from log data"""

        if gglobs.logConn == None:
            self.showStatusMessage("No data available")
            return

        self.setBusyCursor()

        fprint(header("Show Log Tags and Comments"))
        fprint("from: {}\n".format(gglobs.logDBPath))

        rows = gsql.DB_readComments(gglobs.logConn)
        fprint("\n".join(rows))

        self.setNormalCursor()


    def showHisData(self, full=True):
        """print HIST parsed data"""

        if gglobs.hisConn == None:
            self.showStatusMessage("No data available")
            return

        self.setBusyCursor()

        if full:
            addp = ""
        else:
            addp = " Excerpt"
        fprint(header("Show History Data" + addp))
        fprint("from: {}\n".format(gglobs.hisDBPath))

        #print("showHisData: varcheckedHis: ", gglobs.varcheckedHis)
        sql, ruler = gsql.getShowCompactDataSql(gglobs.varcheckedHis)

        fprint(ruler)

        if full:
            data = gsql.DB_readData(gglobs.hisConn, sql, limit=0)
            #print("showHisData data:", data)
            counter     = 0
            batch       = 50
            printstring = ""
            gglobs.stopPrinting = False
            for a in data:
                #print("showHisData a:", a)
                if counter == batch:
                    fprint(printstring[:-1])
                    printstring = ""
                    counter     = 0
                    fprint(ruler)
                printstring += a + "\n"
                counter     += 1
                if gglobs.stopPrinting: break
            gglobs.stopPrinting = False
            fprint(printstring[:-1])
        else:
            fprint(self.getExcerptLines(sql, gglobs.hisConn))

        fprint(ruler)

        self.setNormalCursor()


    def showHisTags(self):
        """print comments only from his data"""

        if gglobs.hisConn == None:
            self.showStatusMessage("No data available")
            return

        self.setBusyCursor()

        fprint(header("Show History Tags and Comments"))
        fprint("from: {}\n".format(gglobs.hisDBPath))

        rows = gsql.DB_readComments(gglobs.hisConn)
        fprint("\n".join(rows))

        self.setNormalCursor()


    def getExcerptLines(self, sql, DB_Conn, lmax=12):
        """get first and last lines from the db"""

        if DB_Conn == None:  return ""

        #start=time.time()

        excLines  = gsql.DB_readData(DB_Conn, sql, limit=lmax)
        lenall    = len(excLines)
        if lenall == 0:      return ""      # no data

        plines = ""
        if lenall < lmax * 2:
            for i in range(0, int(lenall/2)):   plines += excLines[i] + "\n"

        else:
            for a in excLines[0:lmax]:          plines += a + "\n"
            plines +=                                     "     ...\n"
            for a in excLines[-lmax:]:          plines += a + "\n"

        #print("new getExcerptLines:", (time.time()-start)*1000)

        return plines[:-1] # remove "\n"


# Save data from Log, His into CSV files ######################################
#
    def saveData(self, dataSource=None, full=True):
        """Save Log or His Data to file as CSV.
        dataSource can be 'Log' or 'His'"""

        #print("saveData: dataSource, full: ", dataSource, full)

        if   dataSource == "Log":
            connection  = gglobs.logConn
            varchecked  = gglobs.varcheckedLog

        elif dataSource == "His":
            connection  = gglobs.hisConn
            varchecked  = gglobs.varcheckedHis

        else:
            printProgError("saveData: Wrong dataSource: ", dataSource)

        if connection == None:
            self.showStatusMessage("No data available")
            return

        if   dataSource == "Log":
            dbpath      = gglobs.logDBPath
            csvfilename = dbpath + ".log"
            dtype       = "Log"

        elif dataSource == "His":
            dbpath      = gglobs.hisDBPath
            csvfilename = dbpath + ".his"
            dtype       = "History"
        else:
            printProgError("saveData: Wrong dataSource: ", dataSource)

        self.setBusyCursor()

        fprint(header("Saving {} Data as CSV File".format(dtype)))
        fprint("from: {}".format(dbpath))
        fprint("into: {}".format(csvfilename))

        #print("showLogData: varcheckedLog: ", gglobs.varcheckedLog)
        sql, ruler = gsql.getShowCompactDataSql(varchecked)

        data = gsql.DB_readData(connection, sql, limit=0)

        for a in data:    writeFileA(csvfilename, a)

        self.setNormalCursor()


# printing to printer or pdf file
    def printNotePad(self):
        """prints NotePad content to printer (or pdf)"""

        if gglobs.currentDBPath is None:
            self.showStatusMessage("No data available")
            return

        defaultPDF = gglobs.currentDBPath + '.pdf'
        vprint("printNotePad: default pdf file:", defaultPDF)

        mydoc = self.notePad.document()

        myprinter = QPrinter()
        wprint("printNotePad: default printer:          ", myprinter.printerName()) # default: HP-OfficeJet-Pro-8730-2
        #myprinter.setPrinterSelectionOption("pdf")
        #wprint("printNotePad: printerSelectionOption(): ", myprinter.printerSelectionOption() )
        myprinter.setOutputFormat(QPrinter.PdfFormat)
        myprinter.setOutputFileName(defaultPDF)
        #myprinter.setResolution(96)
        #myprinter.setPrinterName("Print to File (PDF)")

        dialog = QPrintDialog(myprinter, self)
        dialog.setOption(QAbstractPrintDialog.PrintToFile, on=True)
        if dialog.exec():  mydoc.print(dialog.printer())


#device
    def doREBOOT(self):
        """reboot the GMC device"""

        msg = QMessageBox()
        msg.setWindowIcon(self.iconGeigerLog)
        msg.setIcon(QMessageBox.Warning)
        msg.setWindowTitle("Reboot GMC Device")
        msg.setText("Rebooting your GMC device.\nPlease confirm with OK, or Cancel")
        msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        msg.setDefaultButton(QMessageBox.Cancel)
        msg.setEscapeButton(QMessageBox.Cancel)
        retval = msg.exec_()

        if retval != 1024:   return

        fprint(header("GMC Device Reboot"))
        rec, err, errmessage = gcommands.setREBOOT()
        if err == 0 or err == 1:
            fprint("REBOOT completed")
        else:
            fprint("ERROR in doREBOOT: " + errmessage)


    def doFACTORYRESET(self):
        """Does a FACTORYRESET of the GMC device"""

        d = QInputDialog()
        d.setWindowIcon(self.iconGeigerLog)
        warning ="""
CAUTION - You are about to reset the GMC device to factory condition!
All data and your changes of settings will be lost. \n
If you want to proceed, enter the word 'FACTORYRESET' (in all capital)
and press OK"""

        text, ok = d.getText(self, 'FACTORYRESET', warning)

        vprint("Factory Reset:", "text=", text, ",  ok=", ok)
        if ok:
            fprint(header("GMC Device FACTORYRESET"))
            if text == "FACTORYRESET":
                rec, err, errmessage = gcommands.setFACTORYRESET()
                if err == 0 or err == 1: fprint("FACTORYRESET completed")
                else:                    fprint("ERROR in doFACTORYRESET: " + message)
            else:
                fprint("Entry '{}' not matching 'FACTORYRESET' - Reset NOT done".format(text))


    def setCalibrationFactors(self):
        """Set calibrations for all tubes temporarily"""

        #
        # setting the scaling factor (needed if no device connected)
        #
        if gglobs.calibration1st == "auto":    scale1st = gglobs.DefaultCalibration1st
        else:                                  scale1st = gglobs.calibration1st

        if gglobs.calibration2nd == "auto":    scale2nd = gglobs.DefaultCalibration2nd
        else:                                  scale2nd = gglobs.calibration2nd

        if gglobs.calibration3rd == "auto":    scale3rd  = gglobs.DefaultCalibration3rd
        else:                                  scale3rd  = gglobs.calibration3rd

        dprint("setCalibrationFactors:")
        setDebugIndent(1)

        # Comment
        c = """Allows to set the Calibrations for all tubes
temporarily for this program run.

For permanent change edit the GeigerLog
configuration file geigerlog.cfg.\n
Numbers are in units of CPM/(µSv/h).\n"""
        lcomment        = QLabel(c)

    # 1st tube
        ltube1st = QLabel("1st tube")
        ltube1st.setAlignment(Qt.AlignLeft)

        etube1st = QLineEdit()
        etube1st.setToolTip('Code: M1')
        etube1st.setText("{:0.6g}".format(scale1st))

    # 2nd tube
        ltube2nd = QLabel("2nd tube")
        ltube2nd.setAlignment(Qt.AlignLeft)

        etube2nd = QLineEdit()
        etube2nd.setToolTip('Code: M2')
        etube2nd.setText("{:0.6g}".format(scale2nd))

    # 3rd tube
        ltube3rd = QLabel("3rd tube")
        ltube3rd.setAlignment(Qt.AlignLeft)

        etube3rd = QLineEdit()
        etube3rd.setToolTip('Code: M3')
        etube3rd.setText("{:0.6g}".format(scale3rd))

        graphOptions=QGridLayout()
        graphOptions.addWidget(lcomment,    0, 0, 1, 2)
        graphOptions.addWidget(ltube1st,    1, 0)
        graphOptions.addWidget(etube1st,    1, 1)
        graphOptions.addWidget(ltube2nd,    2, 0)
        graphOptions.addWidget(etube2nd,    2, 1)
        graphOptions.addWidget(ltube3rd,    3, 0)
        graphOptions.addWidget(etube3rd,    3, 1)

    # Dialog box
        d = QDialog(self) # set parent self to popup in center of geigerlog window
        d.setWindowIcon(self.iconGeigerLog)
        d.setFont(self.fontstd)
        d.setWindowTitle("Set Temporary Calibrations")
        #d.setWindowModality(Qt.ApplicationModal)   #all of them block other actions???
        #d.setWindowModality(Qt.NonModal)
        #d.setWindowModality(Qt.WindowModal)

    # Buttons
        self.bbox = QDialogButtonBox()
        self.bbox.setStandardButtons(QDialogButtonBox.Cancel | QDialogButtonBox.Ok )
        self.bbox.accepted.connect(lambda: d.done(0))
        self.bbox.rejected.connect(lambda: d.done(99))

        layoutV = QVBoxLayout(d)
        layoutV.addLayout(graphOptions)
        layoutV.addWidget(self.bbox)
        layoutV.addStretch()

        retval = d.exec()
        #print("reval:", retval)
        if retval == 99:
            # ESCAPE pressed
            dprint("setCalibrationFactors: ESCAPE pressed, Calibrations unchanged: ")

        else:
            # OK pressed
            # change the calibration of the tubes; first replace comma with dot
            gglobs.calibration1st = float(etube1st.text().replace(",", "."))
            gglobs.calibration2nd = float(etube2nd.text().replace(",", "."))
            gglobs.calibration3rd = float(etube3rd.text().replace(",", "."))

            gplot.makePlot()

            dprint("setCalibrationFactors: 1st tube: "    , gglobs.calibration1st)
            dprint("setCalibrationFactors: 2nd tube: "    , gglobs.calibration2nd)
            dprint("setCalibrationFactors: 3rd tube: "    , gglobs.calibration3rd)

            fprint(header("Set Calibrations"))
            fprint("1st tube:", "{}" .format(gglobs.calibration1st))
            fprint("2nd tube:", "{}" .format(gglobs.calibration2nd))
            fprint("3rd tube:", "{}" .format(gglobs.calibration3rd))

        setDebugIndent(0)


    def showDeviceMappings(self):
        """Shows active devices and variables mapped to them and alerts on
        variables being mapped to more than one device"""

        fprint(header("Device Mappings"))

        if gglobs.DevicesConnected == 0:
            fprint("Unknown until a connection is made. Use menu: Device -> Connect Devices")
            return

        fprint("The configuration is determined in the configuration file geigerlog.cfg")

        mapflag = False
        for vname in gglobs.varnames:
            if gglobs.varMap[vname] > 1:
                if mapflag == False:    # print only on first occurence
                    efprint("ALERT: Mapping problem of Variables")
                qefprint("Variable {} is mapped to more than one device".format(vname))
                mapflag = True

        dline = "{:12s}:  {:3s} {:3s} {:6s} {:6s} {:6s} {:6s} {:6s} {:6s} {:3s} {:3s} {:3s} {:3s}"
        fprint("\n" + dline.format("Device", *gglobs.varnames))
        fprint("-" * 80)
        for devname in gglobs.DevicesNames:
            #print("showDeviceMappings: devname: ", devname)
            #print("showDeviceMappings: gglobs.DevicesVars[devname]: ", gglobs.DevicesVars[devname])
            checks = []
            #print("gglobs.DevicesActive[devname]: ", gglobs.DevicesActive[devname])
            if gglobs.DevicesActive[devname] :
                checks.append(devname)
                for vname in gglobs.varnames:
                    try:
                        if vname in gglobs.DevicesVars[devname]:
                            checks.append("X")
                        else:
                            checks.append("-")
                    except:
                        checks.append("-")
                fprint(dline.format(*checks))

        if mapflag:
            qefprint("Measurements are made on devices from top to bottom, and for each from left to ")
            qefprint("right. If double-mapping of variables occurs, then the last measured variable")
            qefprint(" will overwrite the previous one, almost always resulting in useless data.")
            playWav("error")
        else:
            fprint("Mapping is valid")
            playWav("ok")


    def toggleDeviceConnection(self):
        """if no connection exists, then make connection else disconnect"""

        if gglobs.logging:
            self.showStatusMessage("Cannot change when logging! Stop logging first")
            return

        if gglobs.DevicesConnected == 0:    self.switchConnections(new_connection="ON")
        else:                               self.switchConnections(new_connection="OFF")


    def switchConnections(self, new_connection="ON"):
        """
        if new_connection = ON and no connection exists, then try to make
        connection (with verification of communication with device)
        else disconnect (unless already disconnected)
        """

        if gglobs.logging:
            self.showStatusMessage("Cannot change when logging! Stop logging first")
            return

        dprint("switchConnections: --> {}. ".format(new_connection))
        setDebugIndent(1)
        self.setBusyCursor()

        # try to make all connections or disconnections
        self.switchGMC_Connection    (new_connection=new_connection)    # GMC
        self.switchAudio_Connection  (new_connection=new_connection)    # Audio
        self.switchI2C_Connection    (new_connection=new_connection)    # I2C
        self.switchRM_Connection     (new_connection=new_connection)    # RadMon
        self.switchAmbio_Connection  (new_connection=new_connection)    # AmbioMon
        self.switchLJ_Connection     (new_connection=new_connection)    # LabJack
        self.switchGS_Connection     (new_connection=new_connection)    # Gamma-Scout
        self.switchRaspi_Connection  (new_connection=new_connection)    # Raspi


        # count the connected (not just activated!) devices;
        # after disconnections, all should be false
        gglobs.DevicesConnected = 0
        if gglobs.GMCConnection   :      gglobs.DevicesConnected += 1
        if gglobs.AudioConnection :      gglobs.DevicesConnected += 1
        if gglobs.I2CConnection   :      gglobs.DevicesConnected += 1
        if gglobs.RMConnection    :      gglobs.DevicesConnected += 1
        if gglobs.AmbioConnection :      gglobs.DevicesConnected += 1
        if gglobs.LJConnection    :      gglobs.DevicesConnected += 1
        if gglobs.GSConnection    :      gglobs.DevicesConnected += 1
        if gglobs.RaspiConnection :      gglobs.DevicesConnected += 1

        if gglobs.DevicesConnected > 0: # at least 1 needed to show a closed (=green) plug
            self.toggleDeviceConnectionAction.setIcon(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_plug_closed.png')))) # green icon
        else:
            self.toggleDeviceConnectionAction.setIcon(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_plug_open.png'))))   # red icon
            qefprint("<br>ALERT: No devices are connected")

        if gglobs.werbose:
            wprint("switchConnections:         ", "Connection Status:" )
            wprint("- gglobs.GMCConnection:    ", gglobs.GMCConnection)
            wprint("- gglobs.AudioConnection:  ", gglobs.AudioConnection)
            wprint("- gglobs.I2CConnection     ", gglobs.I2CConnection)
            wprint("- gglobs.RMConnection:     ", gglobs.RMConnection)
            wprint("- gglobs.AmbioConnection:  ", gglobs.AmbioConnection)
            wprint("- gglobs.LJConnection:     ", gglobs.LJConnection)
            wprint("- gglobs.GSConnection:     ", gglobs.GSConnection)
            wprint("- gglobs.RaspiConnection:  ", gglobs.RaspiConnection)
            wprint("- gglobs.DevicesConnected: ", gglobs.DevicesConnected)

        if new_connection == "ON":
            gglobs.textDevVars     = ""
            gglobs.activeVariables = 0
            gglobs.varMap          = {}      # holds the mapping of variables
            for vname in gglobs.varnames:    gglobs.varMap[vname] = 0

            for devname in gglobs.DevicesNames:
                #print("switchConnections: devname:", devname)
                if gglobs.DevicesVars[devname] != None:
                    gglobs.textDevVars              += "{}(".format(devname)
                    for vname in gglobs.DevicesVars[devname]:
                        #print("                  : vname:", vname)
                        gglobs.varMap[vname]        += 1
                        gglobs.activeVariables      += 1
                        gglobs.textDevVars          += " {}".format(vname)
                        gglobs.loggableVars[vname]   = True
                    gglobs.textDevVars += " ); "

            if gglobs.werbose:
                wprint("- activeVariables:         ", gglobs.activeVariables)
                wprint("- textDevVars:             ", gglobs.textDevVars if gglobs.textDevVars > "" else None)
                wprint("- gglobs.loggableVars:     ", getOrderedVars(gglobs.loggableVars))

            if gglobs.activeVariables == 0:
                qefprint("<br>ALERT: No variables for logging available; Logging will not be possible!")
                efprint ("Please check configuration if this is unexpected !")

            self.showDeviceMappings()

        self.checkLoggingState()
        self.notePad.setFocus() # to avoid having any device buttons in blue

        Qt_update()

        dprint("switchConnections: completed. DevicesVars:", gglobs.DevicesVars)

        self.setNormalCursor()
        setDebugIndent(0)


    def switchGMC_Connection(self, new_connection = "ON"):
        """GMC connections"""

        if not gglobs.GMCActivation: return

        fncname = "switchGMC_Connection: "

        dprint(fncname + "--> {}. ".format(new_connection))
        setDebugIndent(1)

        self.setBusyCursor()

        if new_connection == "ON":
            if gglobs.GMCConnection:
                fprint(header("Connect GMC Device"), debug=True)
                fprint("GMC Device is already connected")
            else:
                quickbaudrate = gcommands.GMCquickPortTest(gglobs.GMCusbport)
                #print("quickbaudrate:", quickbaudrate, type(quickbaudrate))
                #print("gglobs.GMCbaudrate:", gglobs.GMCbaudrate, type(gglobs.GMCbaudrate))
                if quickbaudrate > 0:
                    if int(gglobs.GMCbaudrate) != int(quickbaudrate):
                        efprint(header("Connect GMC Device"))
                        qefprint("The configured baudrate {} does not match the detected baudrate {}.".format(gglobs.GMCbaudrate, quickbaudrate))
                        qefprint("Now switching configuration temporarily to detected baudrate {}.".format(quickbaudrate))
                        qefprint("It is recommended to change the baudrate in the configuration file accordingly")
                        gglobs.GMCbaudrate = quickbaudrate
                else:
                    dprint(fncname + "Failure with GMCquickPortTest, got quickbaudrate={} ".format(quickbaudrate))

                # try to open the port; this is the ONLY place calling initGMC!
                # on errors gglobs.GMCConnection is false
                # otherwise, device is connected, and communication had been verified with getVER()
                errmessage = gcommands.initGMC()
                if gglobs.GMCConnection:
                    self.dbtnGMC.setStyleSheet(self.dbtnStyleSheetON)
                    self.setEnableDeviceActions(new_enable = True, device="GMC")
                    self.dbtnGMCPower.setEnabled(True)
                    gcommands.getDeviceProperties()
                    self.printGMCDevInfo()

                    if gglobs.cfg == None or len(gglobs.cfg) != gglobs.configsize:
                        efprint("Could not read device configuration correctly")
                        efprint("Configuration dependent commands in menu Device are being inactivated!")
                        self.setDisableDeviceActions()

                    PowerState = gcommands.isPowerOn()
                    if PowerState == "ON":
                        self.dbtnGMCPower.setIcon(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_power-round_on.png'))))  # green icon
                    elif PowerState == "OFF":
                        self.dbtnGMCPower.setIcon(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_power-round_off.png')))) # red icon
                    else:
                        self.dbtnGMCPower.setEnabled(False)                                                                  # grey icon (not enabled)
                    dprint(fncname + "ON: for device: {}".format(gglobs.GMCdeviceDetected))

                else:
                    efprint(header("Connect GMC Device"))
                    qefprint("Failure to connect with device: ", "'{}' with message:<br>{}".format(gglobs.GMCDeviceName, errmessage))
                    self.dbtnGMC.setText(self.connectTextGMC)
                    self.dbtnGMC.setStyleSheet(self.dbtnStyleSheetError)
                    fprint("<br>If you know that a GMC device is connected:<br>\
                            - Run 'Help'->'Show & Select USB Port and Baudrate', identify and select settings<br>\
                            - or: Run 'USB Autodiscovery' from menu Help and check for proper port and baudrate<br>\
                            - Look into topic: 'Help'->'Devices` Firmware Bugs' for bugs and workarounds.", error=True, errsound=False)

                dprint(fncname + str(self.getGMCDeviceHistSaveMode()))

        else: # new_connection == OFF
            fprint(header("Disconnect GMC Device"))
            if not gglobs.GMCConnection:
                fprint("No connected GMC Device")
                self.dbtnGMC.setStyleSheet(self.dbtnStyleSheetOFF)
                PowerState = gcommands.isPowerOn()
            else:
                gcommands.terminateGMC()
                gglobs.cfg = None
                self.setEnableDeviceActions(new_enable = False, device="GMC")
                fprint("Disconnected successfully:", "'{}'".format(gglobs.GMCdeviceDetected), debug=True)

            self.dbtnGMCPower.setEnabled(False)
            self.dbtnGMC.setStyleSheet(self.dbtnStyleSheetOFF)
            dprint(fncname + self.getGMCDeviceHistSaveMode())

        Qt_update()

        setDebugIndent(0)
        self.setNormalCursor()


    def switchAudio_Connection(self, new_connection = "ON"):
        """AudioCounter connections"""

        if not gglobs.AudioActivation:  return

        fncname = "switchAudio_Connection: "

        dprint(fncname + "--> {}. ".format(new_connection))
        setDebugIndent(1)

        self.setBusyCursor()

        if new_connection == "ON":
            #~errmsg = gaudio.initAudio() # so far there is never an error in audio
            errmsg = gsounddev.initSounddev() # so far there is never an error in audio
            if gglobs.AudioConnection:
                # successful connect
                self.dbtnAudio.setStyleSheet(self.dbtnStyleSheetON)
                self.printAudioDevInfo()
                dprint(fncname + "ON: for device: {}".format(gglobs.AudioDeviceName))
                self.AudioInfoActionExt.setEnabled(True)      # enable extended info
                #~self.AudioSwitchAction.setEnabled(True)       # enable audio toggle
                #self.AudioPulseDirAction.setEnabled(True)     # enable pulse direction toggle
                self.AudioPlotAction.setEnabled(True)         # enable audio plotting
            else:
                # failure in connection
                efprint(header("Connect AudioCounter Device"))
                qefprint("Failure to connect with Device:", "'{}'".format(gglobs.AudioDeviceName))
                self.dbtnGMC.setStyleSheet(self.dbtnStyleSheetError)

        else: # new_connection == OFF
            fprint(header("Disconnect AudioCounter Device"))
            if gglobs.AudioConnection:
                #~gaudio.terminateAudio()
                gsounddev.terminateSounddev()
                if not gglobs.AudioConnection:
                    # successful dis-connect
                    self.AudioInfoActionExt.setEnabled(False)    # disable extended info
                    #~self.AudioSwitchAction.setEnabled(False)     # disable audio on/off
                    #self.AudioPulseDirAction.setEnabled(False)   # enable pulse direction toggle
                    self.AudioPlotAction.setEnabled(False)       # disable audio plotting
                    fprint("Disconnected successfully:", "'{}'".format(gglobs.AudioDeviceName), debug=True)
                else:
                    fprint("Disconnection Error with Device:", gglobs.AudioDeviceName)
            else:
                fprint("No connected device")
            self.dbtnAudio.setStyleSheet(self.dbtnStyleSheetOFF)

        Qt_update()

        self.setNormalCursor()
        setDebugIndent(0)


    def switchI2C_Connection(self, new_connection = "ON"):
        """I2C connections"""

        if not gglobs.I2CActivation:  return

        fncname = "switchI2C_Connection: "

        dprint(fncname + "--> {}. ".format(new_connection))
        setDebugIndent(1)

        self.setBusyCursor()

        if new_connection == "ON":
            errmsg = gi2c.initI2C()
            if gglobs.I2CConnection:
                # successful connect
                self.dbtnI2C.setStyleSheet(self.dbtnStyleSheetON)
                self.printI2CDevInfo()
                dprint(fncname + "ON: for device: {}".format(gglobs.I2CDeviceName))
                self.I2CInfoActionExt.setEnabled(True)      # enable extended info
                self.I2CResetAction.setEnabled(True)        # enable reset
            else:
                # failure in connection
                efprint(header("Connect I2C Device"))
                qefprint("Failure to connect with device: ", "'{}' with message:<br>{}".format(gglobs.I2CDeviceName, errmsg))
                self.dbtnI2C.setStyleSheet(self.dbtnStyleSheetError)

        else: # new_connection == OFF
            fprint(header("Disconnect I2C Device"))
            if gglobs.I2CConnection:
                errmsg = gi2c.terminateI2C()
                if not gglobs.I2CConnection:
                    # successful dis-connect
                    self.I2CInfoActionExt.setEnabled(False)    # disable extended info
                    self.I2CResetAction.setEnabled(False)      # disable reset
                    fprint("Disconnected successfully:", "'{}'".format(gglobs.I2CDeviceName), debug=True)
                else:
                    efprint("Disconnection Error with Device: {} with message:<br>{}".format(gglobs.I2CDeviceName, errmsg))
            else:
                fprint("No connected device")
            self.dbtnI2C.setStyleSheet(self.dbtnStyleSheetOFF)

        Qt_update()

        self.setNormalCursor()
        setDebugIndent(0)


    def doI2CReset(self):
        """Reset the ELV dongle and sensors"""

        fprint(header("Resetting I2C System"))

        self.setBusyCursor()
        fprint("Waiting ...")
        QApplication.processEvents()

        gi2c.resetI2C()
        self.setNormalCursor()



    def switchRM_Connection(self, new_connection = "ON"):
        """RadMon connections"""

        if not gglobs.RMActivation: return

        fncname = "switchRM_Connection: "

        dprint(fncname + "--> {}. ".format(new_connection))
        setDebugIndent(1)

        self.setBusyCursor()

        if new_connection == "ON":
            #fprint(header("Connect RadMon Device"))
            errmsg = gradmon.initRadMon()
            if gglobs.RMConnection:
                # successful connect
                self.dbtnRM.setStyleSheet(self.dbtnStyleSheetON)
                self.printRMDevInfo()
                dprint(fncname + "ON: for device: {} with message: {}".format("RadMon+", gglobs.RMconnect[1]))
                self.RMInfoActionExt.setEnabled(True)       # enable extended info
            else:
                # failure in connection
                efprint(header("Connect RadMon Device"))
                qefprint("Failure to connect with device: '{}' {}".format(gglobs.RMDeviceName, errmsg))
                self.dbtnRM.setStyleSheet(self.dbtnStyleSheetError)

        else: # new_connection == OFF
            fprint(header("Disconnect RadMon Device"))
            if gglobs.RMConnection:
                gradmon.terminateRadMon()
                if not gglobs.RMConnection:
                    # successful dis-connect
                    self.RMInfoActionExt.setEnabled(False)       # disable extended info
                    fprint("Disconnected successfully:", "'{}'".format(gglobs.RMDeviceName), debug=True)
                else:
                    # failure in disconnect
                    fprint("Disconnection Error with Device:", gglobs.RMDeviceName)
                    fprint("", gglobs.RMdisconnect[1])
            else:
                fprint("No connected device")
            self.dbtnRM.setStyleSheet(self.dbtnStyleSheetOFF)

        Qt_update()

        self.setNormalCursor()
        setDebugIndent(0)


    def switchAmbio_Connection(self, new_connection = "ON"):
        """AmbioMon connections"""

        if not gglobs.AmbioActivation: return

        fncname = "switchAmbio_Connection: "

        dprint(fncname + "--> {}. ".format(new_connection))
        setDebugIndent(1)

        self.setBusyCursor()

        if new_connection == "ON":
            #fprint(header("Connect AmbioMon Device"))
            errmsg = gambiomon.initAmbioMon()
            if gglobs.AmbioConnection:
                # successful connect
                self.setEnableDeviceActions(new_enable = True, device="Ambio")
                self.dbtnAmbio.setStyleSheet(self.dbtnStyleSheetON)
                self.printAmbioDevInfo()
                #~ dprint(fncname + "ON: for device: {} with message: {}".format("AmbioMon", gglobs.AmbioConnect[1]))
                dprint(fncname + "ON: for device: {}".format("AmbioMon"))
                self.AmbioInfoActionExt.setEnabled(True)       # enable extended info
            else:
                # failure in connection
                efprint(header("Connect AmbioMon Device"))
                qefprint("Failure to connect with device: '{}' {}".format(gglobs.AmbioDeviceName, errmsg))
                self.dbtnAmbio.setStyleSheet(self.dbtnStyleSheetError)

        else: # new_connection == OFF
            fprint(header("Disconnect AmbioMon Device"))
            if gglobs.AmbioConnection:
                gambiomon.terminateAmbioMon()
                if not gglobs.AmbioConnection:
                    # successful dis-connect
                    self.setEnableDeviceActions(new_enable = False, device="Ambio")
                    self.AmbioInfoActionExt.setEnabled(False)       # enable extended info
                    fprint("Disconnected successfully:", "'{}'".format(gglobs.AmbioDeviceName), debug=True)
                else:
                    fprint("Disconnection Error with Device:", "AmbioMon+")
                    #~ fprint("", gglobs.AmbioDisconnect[1])
            else:
                fprint("No connected device")
            self.dbtnAmbio.setStyleSheet(self.dbtnStyleSheetOFF)

        Qt_update()

        self.setNormalCursor()
        setDebugIndent(0)


    def switchLJ_Connection(self, new_connection = "ON"):
        """LabJack connection"""

        if not gglobs.LJActivation:  return

        fncname = "switchLJ_Connection: "

        dprint(fncname + "--> {}. ".format(new_connection))
        setDebugIndent(1)

        self.setBusyCursor()

        if new_connection == "ON":
            errmsg = glabjack.initLabJack()
            if gglobs.LJConnection:
                # successful connect
                self.dbtnLJ.setStyleSheet(self.dbtnStyleSheetON)
                self.printLJDevInfo()
                dprint(fncname + "ON: for device: {}".format(gglobs.LJDeviceName))
                self.LJInfoActionExt.setEnabled(True)       # enable extended info
            else:
                # failure in connection
                efprint(header("Connect LabJack Device"))
                qefprint("Failure to connect with device: '{}' with message:<br>{}".format(gglobs.LJDeviceName, errmsg))
                self.dbtnLJ.setStyleSheet(self.dbtnStyleSheetError)

        else: # new_connection == OFF
            fprint(header("Disconnect LabJack Device"))
            if gglobs.LJConnection:
                glabjack.terminateLabJack()
                if not gglobs.LJConnection:
                    # successful dis-connect
                    fprint("Disconnected successfully:", "'{}'".format(gglobs.LJDeviceName), debug=True)
                else:
                    # failure in dis-connection
                    fprint("Disconnection error with device:", gglobs.LJDeviceName)
            else:
                fprint("No connected device")
            self.dbtnLJ.setStyleSheet(self.dbtnStyleSheetOFF)

        Qt_update()

        self.setNormalCursor()
        setDebugIndent(0)


    def switchGS_Connection(self, new_connection = "ON"):
        """GS connection"""

        if not gglobs.GSActivation:  return

        fncname = "switchGS_Connection: "

        dprint(fncname + "--> {}. ".format(new_connection))
        setDebugIndent(1)

        self.setBusyCursor()

        Qt_update()

        if new_connection == "ON":
            errmsg = ggscout.initGammaScout()
            if gglobs.GSConnection:
                # successful connect
                self.setEnableDeviceActions(new_enable = True, device="GS")
                self.dbtnGS.setStyleSheet(self.dbtnStyleSheetON)
                self.printGSDevInfo()
                dprint(fncname + "ON: for device: {}".format(gglobs.GSDeviceDetected))
                self.GSInfoActionExt.setEnabled(True)      # enable extended info
                self.GSResetAction.setEnabled(True)        # enable reset
                self.GSSetPCModeAction.setEnabled(True)    # enable set PC Mode
            else:
                # failure in connection
                fprint(header("Connect GammaScout Device"))
                efprint("Failure to connect with device ", "'{}' with message:<br>{}<br>".format(gglobs.GSDeviceName, errmsg))
                self.dbtnGS.setStyleSheet(self.dbtnStyleSheetError)

        else: # new_connection == OFF
            fprint(header("Disconnect GammaScout Device"))
            if gglobs.GSConnection:
                errmsg = ggscout.terminateGammaScout(gglobs.GSDeviceName)
                if not gglobs.GSConnection:
                    # successful dis-connect
                    self.setEnableDeviceActions(new_enable = False, device="GS")
                    self.GSInfoActionExt.setEnabled(False)    # disable extended info
                    self.GSResetAction.setEnabled(False)      # disable reset
                    self.GSSetPCModeAction.setEnabled(False)    # disable set PC Mode
                    fprint("Disconnected successfully:", "'{}'".format(gglobs.GSDeviceDetected), debug=True)
                else:
                    efprint("Disconnection Error with Device: {} with message:<br>{}".format(gglobs.GSDeviceName, errmsg))
            else:
                fprint("No connected device")
            self.dbtnGS.setStyleSheet(self.dbtnStyleSheetOFF)

        Qt_update()

        self.setNormalCursor()
        setDebugIndent(0)


    def setGStoNormalMode(self):
        """Set the Gamma-Scout device to Normal Mode"""

        fprint(header("Set Gamma-Scout to Normal Mode"))

        self.setBusyCursor()
        Qt_update()

        ggscout.GSsetDeviceToNormalMode(gglobs.GSDeviceName)
        if gglobs.GSinPCmode:   fprint("Gamma-Scout is in PC Mode")
        else:                   fprint("Gamma-Scout is in Normal  Mode")

        self.setNormalCursor()


    def setGStoPCMode(self):
        """Set the Gamma-Scout device to PC Mode"""

        fprint(header("Set Gamma-Scout to PC Mode"))

        self.setBusyCursor()
        Qt_update()

        ggscout.GSsetDeviceToPCMode(gglobs.GSDeviceName)

        if gglobs.GSinPCmode:   fprint("Gamma-Scout is in PC Mode")
        else:                   fprint("Gamma-Scout is in Normal  Mode")

        self.setNormalCursor()


    def switchRaspi_Connection(self, new_connection = "ON"):
        """Raspi connection using interrupt"""

        if not gglobs.RaspiActivation:  return

        #~fncname = "switchRaspi_Connection: "
        fncname = sys._getframe().f_code.co_name +": "

        #~print( 'caller name:', inspect.stack()[1][3])
        #~print( 'fon name:', sys._getframe(  ).f_code.co_name)

        dprint(fncname + "--> {}. ".format(new_connection))
        setDebugIndent(1)

        self.setBusyCursor()

        if new_connection == "ON":
            errmsg = graspi.initRaspi()
            if gglobs.RaspiConnection:
                # successful connect
                self.dbtnRaspi.setStyleSheet(self.dbtnStyleSheetON)
                self.printRaspiDevInfo()
                dprint(fncname + "ON: for device: {}".format(gglobs.RaspiDeviceName))
                self.RaspiInfoActionExt.setEnabled(True)       # enable extended info
            else:
                # failure in connection
                efprint(header("Connect Raspi Device"))
                qefprint("Failure to connect with device: '{}' with message:<br>{}".format(gglobs.RaspiDeviceName, errmsg))
                self.dbtnRaspi.setStyleSheet(self.dbtnStyleSheetError)

        else: # new_connection == OFF
            fprint(header("Disconnect Raspi Device"))
            if gglobs.RaspiConnection:
                graspi.terminateRaspi()
                if not gglobs.RaspiConnection:
                    # successful dis-connect
                    fprint("Disconnected successfully:", "'{}'".format(gglobs.RaspiDeviceName), debug=True)
                else:
                    # failure in dis-connection
                    fprint("Disconnection error with device:", gglobs.RaspiDeviceName)
            else:
                fprint("No connected device")
            self.dbtnRaspi.setStyleSheet(self.dbtnStyleSheetOFF)

        Qt_update()

        self.setNormalCursor()
        setDebugIndent(0)


    def checkLoggingState(self):
        """some cleanup of status"""

        # GMC Device
        if not gglobs.GMCConnection:
            self.startloggingAction.    setEnabled(False)
            self.stoploggingAction.     setEnabled(False)
            self.quickLogAction.        setEnabled(False)
            self.histGMCDeviceAction.   setEnabled(False)
            self.logSnapAction.         setEnabled(False)

        else:
            if gcommands.isPowerOn() != "OFF": # is ON or undefined
                self.quickLogAction.    setEnabled(True)
                if gglobs.logDBPath != None : self.startloggingAction.setEnabled(True)
            else:
                self.quickLogAction.    setEnabled(False)
                self.startloggingAction.setEnabled(False)
            self.histGMCDeviceAction.      setEnabled(True)


        if gglobs.DevicesConnected > 0: # at least 1 device is available
            self.quickLogAction.        setEnabled(True)
            if gglobs.logDBPath != None : self.startloggingAction.setEnabled(True)

        # Logging
        if gglobs.logging:
            self.histGMCDeviceAction.      setEnabled(False)
            self.logLoadFileAction.     setEnabled(False)
            self.logLoadCSVAction .     setEnabled(False)
            self.startloggingAction.    setEnabled(False)
            self.quickLogAction.        setEnabled(False)

            self.stoploggingAction.     setEnabled(True)
            self.WebAction.             setEnabled(True)
            self.logSnapAction.         setEnabled(True)
        else:
            self.stoploggingAction.     setEnabled(False)
            self.WebAction.             setEnabled(False)
            self.logSnapAction.         setEnabled(False)
            self.logLoadFileAction.     setEnabled(True)
            self.logLoadCSVAction .     setEnabled(True)

        # adding Log comments
        if gglobs.logDBPath != None:
            self.addCommentAction.      setEnabled(True)
        else:
            self.addCommentAction.      setEnabled(False)

        # adding History comments
        if gglobs.hisDBPath != None:
            self.addHistCommentAction.   setEnabled(True)
        else:
            self.addHistCommentAction.   setEnabled(False)


    def setEnableDeviceActions(self, new_enable = True, device="GMC"):

        # Device
        self.DeviceConnectAction.       setEnabled(not new_enable)
        self.DeviceDisconnectAction.    setEnabled(new_enable)
        self.setLogTimingAction.        setEnabled(new_enable)

        # GMC counter
        if device == "GMC":
            # submenu GMC
            self.DeviceInfoAction.          setEnabled(new_enable)
            self.DeviceConfigAction.        setEnabled(new_enable)
            self.DeviceONAction.            setEnabled(new_enable)
            self.DeviceOFFAction.           setEnabled(new_enable)
            self.DeviceSetTimeAction.       setEnabled(new_enable)
            self.DeviceREBOOTAction.        setEnabled(new_enable)
            self.DeviceFACTORYRESETAction.  setEnabled(new_enable)

            # GMC Device functions using the config
            self.DeviceSpeakerONAction.     setEnabled(new_enable)
            self.DeviceSpeakerOFFAction.    setEnabled(new_enable)
            self.DeviceAlarmONAction.       setEnabled(new_enable)
            self.DeviceAlarmOFFAction.      setEnabled(new_enable)
            self.DeviceSavingStateAction.   setEnabled(new_enable)
            self.btnHistSaveMode.           setEnabled(new_enable)

            #toolbar GMC Power Toggle
            self.dbtnGMCPower.              setEnabled(False)

            # History
            self.histGMCDeviceAction.       setEnabled(new_enable)


        # Gamma-Scout counter
        if device == "GS":
            self.histGSDeviceAction.        setEnabled(new_enable)
            #self.histGSDatFileAction.       setEnabled(new_enable) # should always be enabled

        # submenu RadMon
        if device == "RadM":
            pass
            #self.RMConfigAction.            setEnabled(new_enable)

        # submenu AmbioMon
        if device == "Ambio":
            #~ self.AmbioConfigAction.         setEnabled(new_enable)
            self.histAMDeviceCAMAction.     setEnabled(new_enable)
            self.histAMDeviceCPSAction.     setEnabled(new_enable)
            #~ self.AMsetServerIP.  setEnabled(new_enable)
            #~ self.AmbioConfigWiFiAPAction.   setEnabled(new_enable)
            self.AmbioDataAction.           setEnabled(new_enable)



    def setDisableDeviceActions(self):

        # when config is not usable
        self.DeviceSpeakerONAction.     setEnabled(False)
        self.DeviceSpeakerOFFAction.    setEnabled(False)
        self.DeviceAlarmONAction.       setEnabled(False)
        self.DeviceAlarmOFFAction.      setEnabled(False)
        self.DeviceSavingStateAction.   setEnabled(False)


    def toggleGMCPower(self):
        """Toggle GMC device Power ON / OFF"""

        if gglobs.logging:
            self.showStatusMessage("Cannot change when logging! Stop logging first")
            return

        if gcommands.isPowerOn() == "ON": self.switchGMCPower("OFF")
        else:                             self.switchGMCPower("ON")


    def switchGMCPower(self, newstate = "ON"):
        """Switch power of GMC device to ON or OFF"""

        setDebugIndent(1)

        fprint(header("Switch GMC Device Power {}".format(newstate)), debug=True)

        self.setBusyCursor()
        if newstate == "ON":
            if gcommands.isPowerOn() != "ON":
                gcommands.setPOWERON()
                time.sleep(3) # takes some time to settle!
        else:
            if gcommands.isPowerOn() == "ON":
                if gglobs.logging: self.stopLogging()
                gcommands.setPOWEROFF()
                time.sleep(3) # takes some time to settle!

        cfg, error, errmessage     = gcommands.getCFG()     # read config after power change
        gglobs.cfg = cfg

        ipo = gcommands.isPowerOn()
        fprint("Power State of GMC device is: ",  ipo)

        if   ipo == "ON":
            self.dbtnGMCPower.setIcon(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_power-round_on.png'))))
        elif ipo == "OFF":
            self.dbtnGMCPower.setIcon(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_power-round_off.png'))))
        else:
            self.dbtnGMCPower.setIcon(QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_power-round_on.png'))))

        self.checkLoggingState()
        self.setNormalCursor()
        setDebugIndent(0)


    def printGMCDevInfo(self, extended = False):
        """prints basic or extended info on the GMC device"""

        self.setBusyCursor()

        txt = "GMC Device Info"
        if extended:  txt += " Extended"
        fprint(header(txt))

        fprint("Configured Connection:", "port:'{}' baud:{} timeoutR:{}s timeoutW:{}s".\
                         format(gglobs.GMCusbport, gglobs.GMCbaudrate, gglobs.GMCtimeout, gglobs.GMCtimeout_write))

        gcommands.fprintDeviceInfo(extended = extended)

        self.setNormalCursor()


    def printRMDevInfo(self, extended=False):
        """prints basic info on the RadMon device"""

        self.setBusyCursor()

        txt = "RadMon Device Info"
        if extended:  txt += " Extended"
        fprint(header(txt))
        fprint("Configured Connection:", "MQTT on {}:{} topic:{}".format(gglobs.RMServerIP, gglobs.RMServerPort, gglobs.RMServerFolder))
        fprint(gradmon.getRadMonInfo(extended=extended))

        self.setNormalCursor()


    def printAmbioDevInfo(self, extended=False):
        """prints basic info on the AmbioMon device"""

        self.setBusyCursor()

        txt = "AmbioMon Device Info"
        if extended:  txt += " Extended"
        fprint(header(txt))
        #~ fprint("Configured Connection:", "Server IP: '{}', Port:{}".format(gglobs.AmbioServerIP, gglobs.AmbioServerPort))
        fprint("Configured Connection:", "Server IP: '{}'".format(gglobs.AmbioServerIP))
        fprint(gambiomon.getAmbioMonInfo(extended=extended))

        self.setNormalCursor()


    def printLJDevInfo(self, extended=False):
        """prints basic info on the LabJack device"""

        self.setBusyCursor()

        txt = "LabJack Device Info"
        if extended:  txt += " Extended"
        fprint(header(txt))
        fprint("Configured Connection:", "USB (auto-configuration)")
        fprint(glabjack.getLabJackInfo(extended=extended))

        self.setNormalCursor()


    def printAudioDevInfo(self, extended=False):
        """prints basic info on the AudioCounter device"""

        self.setBusyCursor()

        txt = "AudioCounter Device Info"
        if extended:  txt += " Extended"
        fprint(header(txt))

        fprint("Configured Connection:", "Default Audio Input")

        #~fprint(gaudio.getAudioInfo(extended=extended))
        fprint(gsounddev.getSounddevInfo(extended=extended))

        self.setNormalCursor()


    def printI2CDevInfo(self, extended=False):
        """prints basic info on the I2C device"""

        self.setBusyCursor()

        txt = "I2CSensors Device Info"
        if extended:  txt += " Extended"
        fprint(header(txt))

        fprint("Configured Connection:", "port:'{}' baud:{} timeoutR:{}s timeoutW:{}s".\
                         format(gglobs.I2Cusbport, gglobs.I2Cbaudrate, gglobs.I2Ctimeout, gglobs.I2Ctimeout_write))

        rinfo = gi2c.getI2CInfo(extended=extended)
        fprint(rinfo)
        self.setNormalCursor()


    def printGSDevInfo(self, extended=False):
        """prints basic info on the Gamma-Scout device"""

        self.setBusyCursor()

        txt = "Gamma-Scout Device Info"
        if extended:  txt += " Extended"

        fprint(header(txt))
        fprint("Configured Connection:", "port:'{}' baud:{} timeoutR:{}s timeoutW:{}s".\
                         format(gglobs.GSusbport, gglobs.GSbaudrate, gglobs.GStimeout, gglobs.GStimeout_write))
        fprint("", "bits per byte:{}  parity:{}".\
                         format(7, "E" ))

        rinfo = ggscout.getGammaScoutInfo(extended=extended)
        fprint(rinfo)

        self.setNormalCursor()


    def printRaspiDevInfo(self, extended=False):
        """prints basic info on the Raspi device"""

        self.setBusyCursor()

        txt = "Raspi Device Info"
        if extended:  txt += " Extended"

        fprint(header(txt))
        fprint("Configured Connection:", "port:'{}' baud:{} timeoutR:{}s timeoutW:{}s".\
                         format(gglobs.GSusbport, gglobs.GSbaudrate, gglobs.GStimeout, gglobs.GStimeout_write))
        fprint("", "bits per byte:{}  parity:{}".\
                         format(7, "E" ))

        rinfo = graspi.getRaspiInfo(extended=extended)
        fprint(rinfo)

        self.setNormalCursor()


    def printGMCDevConfig(self):
        """prints the 256 or 512 bytes of device configuration"""

        dprint("printGMCDevConfig: ")
        setDebugIndent(1)

        self.setBusyCursor()

        fprint(header("GMC Device Configuration"))
        pdc = gcommands.ftextCFG()
        fprint(pdc)
        dprint("printGMCDevConfig:\n" + pdc)

        self.setNormalCursor()

        setDebugIndent(0)


    def setGMCDeviceDateTime(self):
        """ set date and time on GMC device to computer date and time"""

        dprint("setGMCDeviceDateTime:")
        setDebugIndent(1)

        fprint(header("Set Date&Time of GMC Device"))
        rec, error, errmessage = gcommands.getDATETIME()
        if error < 0:
            fprint("Communication problem with device:", errmessage)

            fprint("Trying to force setting Date&Time")
            gcommands.setDATETIME()

            rec, error, errmessage = gcommands.getDATETIME()
            deviceTime = str(rec)
            fprint("New Date and Time from device is:", str(deviceTime))

        else:
            computerTime = stime()
            deviceTime   = str(rec)
            deltat       = datestr2num(computerTime) - datestr2num(deviceTime)
            if deltat == 0:
                dtxt = "Device time is same as computer time"
            elif deltat > 0:
                dtxt = "Device is slower than computer by {:0.0f} sec".format(deltat)
            else:
                dtxt = "Device is faster than computer by {:0.0f} sec".format(abs(deltat))

            fprint("Date&Time from device is:", deviceTime)
            fprint("Date&Time from computer is:", "{}".format(computerTime))
            fprint("", "{}\n".format(dtxt))

            fprint("Setting device time to computer time")
            gcommands.setDATETIME()

            rec, error, errmessage = gcommands.getDATETIME()
            deviceTime = str(rec)
            fprint("New Date&Time from device is:", str(deviceTime))


        setDebugIndent(0)


    def setGMCDeviceHistSaveMode(self):
        """sets the History Saving Mode"""

        dprint("setGMCDeviceHistSaveMode:")
        setDebugIndent(1)

        while True:
            # get current config
            cfg, error, errmessage = gcommands.getCFG()
            gglobs.cfg = cfg
            if error < 0:
                fprint("Error:" + errmessage)
                break

            SDT, SDTtxt = gcommands.getSaveDataType()
            gglobs.savedatatype = SDTtxt

            # setup dialog and get new config setting
            selection   = gglobs.savedatatypes
            text, ok    = QInputDialog().getItem(self, 'Set History Saving Mode', "Select new history saving mode and press ok:   ", selection, SDT, False )
            vprint("Set History Saving Mode:", "text=", text, ",  ok=", ok)

            if not ok: break      # user has selected Cancel

            fprint(header("Set History Saving Mode"))

            newSDT = selection.index(text)
            #print "newSDT:", newSDT
            self.setBusyCursor()

            # write the new config data
            gcommands.writeConfigData(gglobs.cfgOffsetSDT, newSDT)

            self.setNormalCursor()

            # read the config to verify
            fprint(*self.getGMCDeviceHistSaveMode()) # getGMCDeviceHistSaveMode returns tuple

            break

        setDebugIndent(0)


    def getGMCDeviceHistSaveMode(self):
        """gets the History Saving Mode"""

        dprint("getGMCDeviceHistSaveMode:")
        setDebugIndent(1)

        self.setBusyCursor()

        HistSaveMode = "N.A."
        while True:
            if not gglobs.GMCConnection:
                self.btnHistSaveMode.setText("Mode: ---")
                break

            # read the config
            cfg, error, errmessage = gcommands.getCFG()
            gglobs.cfg             = cfg
            if error < 0:
                efprint("Error:" + errmessage)
                break

            SDT, SDTtxt = gcommands.getSaveDataType()
            HistSaveMode = "Device History Saving Mode:", "{}".format(SDTtxt)
            gglobs.savedatatype = SDTtxt

            SMText = ("OFF", "CPS", "CPM", "CPMh", "CPSTh", "CPMTh")[SDT]
            self.btnHistSaveMode.setText("Mode: " + SMText)

            break

        self.setNormalCursor()
        setDebugIndent(0)

        return HistSaveMode # returns a tuple


    def switchGMCDeviceSpeaker(self, newstate = "ON"):
        """Switch Device Speaker to ON or OFF"""

        self.setBusyCursor()
        fprint(header("Switch Device Speaker {}".format(newstate)))

        while True: # to allow jumping to exit
            # get current config
            cfg, error, errmessage = gcommands.getCFG()
            if error < 0:
                efprint("Error:" + errmessage)
                break

            if newstate == "ON":
                st = 1
            else:
                st = 0

            # write the new config data
            gcommands.writeConfigData(gglobs.cfgOffsetSpeaker, st)

            # check config for success
            cfg, error, errmessage = gcommands.getCFG()
            if error < 0:
                efprint("Error:" + errmessage)
                break

            if cfg[gglobs.cfgOffsetSpeaker] == 1:
                ipo = "ON"
            else:
                ipo = "OFF"

            fprint("Device Speaker State is: ",  ipo)
            break

        self.setNormalCursor()


    def switchGMCDeviceAlarm(self, newstate = "ON"):
        """Switch Device Alarm to ON or OFF"""

        self.setBusyCursor()
        fprint(header("Switch Device Alarm {}".format(newstate)))

        while True: # to allow jumping to exit
            # get current config
            cfg, error, errmessage = gcommands.getCFG()
            if error < 0:
                efprint("Error:" + errmessage)
                break

            if newstate == "ON":
                st = 1
            else:
                st = 0

            # write the new config data
            gcommands.writeConfigData(gglobs.cfgOffsetAlarm, st)

            time.sleep(1.0)

            # check config for success
            cfg, error, errmessage = gcommands.getCFG()
            gglobs.cfg = cfg

            fprint("Device Alarm State is: ",  gcommands.isAlarmOn())
            break

        self.setNormalCursor()


#help
    def helpQuickStart(self):
        """Quickstart item on the Help menu"""

        msg = QMessageBox(self)
        msg.setWindowIcon(self.iconGeigerLog)
        msg.setWindowTitle("Help - Quickstart")
        #msg.setFont(self.fontstd)
        msg.setText(gglobs.helpQuickstart)
        msg.setStandardButtons(QMessageBox.Ok)
        msg.setDefaultButton(QMessageBox.Ok)
        msg.setEscapeButton(QMessageBox.Ok)
        msg.setWindowModality(Qt.WindowModal)

        btn = QPushButton()         # to become invisible button
        btn.setMinimumWidth(500)    # determines width of box
        btn.setMaximumHeight(0)     # invisible at height zero!
        msg.addButton(btn, QMessageBox.YesRole)

        msg.exec()


    def helpFirmwareBugs(self):
        """Geiger Counter Firmware Bugs info on the Help menu"""

        msg = QMessageBox(self)
        msg.setWindowIcon(self.iconGeigerLog)
        msg.setWindowTitle("Help - Firmware Bugs")
        #msg.setFont(self.fontstd)
        msg.setTextFormat(Qt.RichText)
        msg.setText(gglobs.helpFirmwareBugs)
        msg.setStandardButtons(QMessageBox.Ok)
        msg.setDefaultButton(QMessageBox.Ok)
        msg.setEscapeButton(QMessageBox.Ok)
        msg.setWindowModality(Qt.WindowModal)

        btn = QPushButton()         # to become invisible button
        btn.setMinimumWidth(500)    # determines width of box
        btn.setMaximumHeight(0)     # invisible at height zero!

        msg.addButton(btn, QMessageBox.YesRole)
        msg.exec()


    def helpWorldMaps(self):
        """Using the Radiation World Map"""

        msg = QMessageBox(self)
        msg.setWindowIcon(self.iconGeigerLog)
        msg.setWindowTitle("Help - Radiation World Maps")
        #msg.setFont(self.fontstd)
        msg.setText(gglobs.helpWorldMaps)
        msg.setStandardButtons(QMessageBox.Ok)
        msg.setDefaultButton(QMessageBox.Ok)
        msg.setEscapeButton(QMessageBox.Ok)
        msg.setWindowModality(Qt.WindowModal)

        btn = QPushButton()         # to become invisible button
        btn.setMinimumWidth(500)    # determines width of box
        btn.setMaximumHeight(0)     # invisible at height zero!

        msg.addButton(btn, QMessageBox.YesRole)
        msg.exec()


    def helpOccupationalRadiation(self):
        """Occupational Radiation Limits"""

        msg = QMessageBox(self)
        msg.setWindowIcon(self.iconGeigerLog)
        msg.setWindowTitle("Help - Occupational Radiation Limits")
        #msg.setFont(self.fontstd)
        msg.setText(gglobs.helpOccupationalRadiation)
        msg.setStandardButtons(QMessageBox.Ok)
        msg.setDefaultButton(QMessageBox.Ok)
        msg.setEscapeButton(QMessageBox.Ok)
        msg.setWindowModality(Qt.WindowModal)

        btn = QPushButton()         # to become invisible button
        btn.setMinimumWidth(500)    # determines width of box
        btn.setMaximumHeight(0)     # invisible at height zero!

        msg.addButton(btn, QMessageBox.YesRole)
        msg.exec()


    def helpOptions(self):
        """Options item on the Help menu"""

        msg = QMessageBox(self)
        msg.setWindowIcon(self.iconGeigerLog)
        msg.setWindowTitle("Help - Options")
        msg.setFont(self.fontstd)
        msg.setText(gglobs.helpOptions)
        msg.setStandardButtons(QMessageBox.Ok)
        msg.setDefaultButton(QMessageBox.Ok)
        msg.setEscapeButton(QMessageBox.Ok)
        msg.setWindowModality(Qt.WindowModal)

        btn = QPushButton()         # invisible button
        btn.setMinimumWidth(500)    # determines width of box
        btn.setMaximumHeight(0)     # invisible at height zero!

        msg.addButton(btn, QMessageBox.YesRole)
        msg.exec()


    def helpAbout(self):
        """About item on the Help menu"""

        #description = gglobs.helpAbout.format(__author__, gglobs.__version__, __copyright__, __license__)
        description = gglobs.helpAbout % (__author__, gglobs.__version__, __copyright__, __license__)

        licon   = QLabel() # label to hold the geigerlog icon
        licon.setPixmap(QPixmap(os.path.join(gglobs.gresPath, 'icon_geigerlog.png')))

        ltext   = QLabel() # label to hold the 'eigerlog' text as picture
        ltext.setPixmap(QPixmap(os.path.join(gglobs.gresPath, 'eigerlog.png')))

        labout  = QTextBrowser() # label to hold the description
        labout.setLineWrapMode(QTextEdit.WidgetWidth)
        labout.setText(description)
        labout.setOpenExternalLinks(True) # to open links in a browser
        labout.setTextInteractionFlags(Qt.LinksAccessibleByMouse|Qt.TextSelectableByMouse)
    # set the width:
        labout.setMinimumWidth(700)

        d = QDialog(self)
        d.setWindowIcon(self.iconGeigerLog)
        #d.setFont(self.fontstd)
        d.setWindowTitle("Help - About GeigerLog")
        #d.setWindowModality(Qt.ApplicationModal)
        d.setWindowModality(Qt.WindowModal)
        #d.setMinimumWidth(1800)
        d.setMinimumHeight(gglobs.window_height + 150)

        bbox    = QDialogButtonBox()
        bbox.setStandardButtons(QDialogButtonBox.Ok)
        bbox.accepted.connect(lambda: d.done(0))

        layoutTop = QHBoxLayout()
        layoutTop.addWidget(licon)
        layoutTop.addWidget(ltext)
        layoutTop.addStretch()      # to keep the icons on the left

        layoutV   = QVBoxLayout(d)
        layoutV.addLayout(layoutTop)
        layoutV.addWidget(labout)
        layoutV.addWidget(bbox)

        d.exec()



    def helpSetPort(self):
        """sets the Port and Baud rate"""

        #lpAttribs = ["name", "hwid", "device", "description", "serial_number", "location", "manufacturer", "product", "interface", "vid", "pid"]

        dprint("helpSetPort:")
        setDebugIndent(1)

        selection_ports    = []
        selection_baudGMC  = list(map(str,sorted(gglobs.GMCbaudrates, reverse=True)))
        selection_baudI2C  = list(map(str,sorted(gglobs.I2Cbaudrates, reverse=True)))
        selection_baudGS   = list(map(str,sorted(gglobs.GSbaudrates,  reverse=True)))

        enableSelections = True

        #~lp = gcommands.getPortList(symlinks=True)  # wieso gcommands? gibt es dort nicht
        #~print("-----------------lp: gcommands: ", lp)
        lp = getPortList(symlinks=True) # ist in gutil
        #~print("-----------------lp:          : ", lp)

        hsp = "Available Ports:"
        hsp += "\n{:15s} {:38s}  {:14s}   {:s}\n{}\n".format("Port", "Name of USB-to-Serial Hardware", "Linked to Port", "VID :PID", "-"*82)

        if len(lp) == 0:
            errmessage = "ERROR: No available serial ports found"
            dprint("helpSetPort: " + errmessage, debug=True)
            hsp += errmessage + "\n" + "Is device connected? Check cable and plugs! Re-run in a few seconds." + "\n\n\n"
            enableSelections = False
        else:
            for p in lp:
                try:
                    link = "No Link"
                    if hasattr(p, "hwid") and "LINK=" in p.hwid:
                        #print("device:", p.device, ",   hwid:", p.hwid)
                        link1 = p.hwid.find("LINK=")
                        link2 = p.hwid.find("LINK=", link1 + 5)
                        #print("link1: ", link1)
                        #print("link2: ", link2)
                        if link2 > 0:
                            link = p.hwid[link1 + 5 : link2]
                        else:
                            link = p.hwid[link1 + 5 : ]
                    p_device        = getattr(p, "device",      "None")
                    p_description   = getattr(p, "description", "None")

                    p_vid           = getattr(p, "vid",         0)
                    if p_vid is None:   strp_vid = "None"
                    else:               strp_vid = "{:04X}".format(p_vid)

                    p_pid           = getattr(p, "pid",         0)
                    if p_pid is None:   strp_pid = "None"
                    else:               strp_pid = "{:04X}".format(p_pid)

                    if p_device != "None":
                        selection_ports.append(p.device)
                        hsp += "{:15s} {:38s}  {:14s}   {}:{}\n".format(p_device, p_description, link, strp_vid, strp_pid)
                except Exception as e:
                    dprint("helpSetPort: Exception: {}  list_port: {}".format(e, p))
                    enableSelections = False


        if gglobs.GMCActivation or gglobs.I2CActivation or gglobs.GSActivation:
            isAnyDeviceActivated = True
        else:
            isAnyDeviceActivated = False

        # Combo Box Ports for GMC
        portCbBoxGMC = QComboBox(self)
        portCbBoxGMC.setEnabled(enableSelections and gglobs.GMCActivation)
        portCbBoxGMC.addItems(selection_ports)
        portCbBoxGMC.setToolTip('Select the USB-to-Serial port')
        portCbBoxGMC.setCurrentIndex(portCbBoxGMC.findText(gglobs.GMCusbport))

        # Combo Box Baudrates for GMC
        baudCbBoxGMC = QComboBox(self)
        baudCbBoxGMC.setEnabled(enableSelections and gglobs.GMCActivation)
        baudCbBoxGMC.addItems(selection_baudGMC)
        baudCbBoxGMC.setToolTip('Select the USB-to-Serial baudrate')
        baudCbBoxGMC.setCurrentIndex(baudCbBoxGMC.findText(str(gglobs.GMCbaudrate)))

        # Combo Box Ports for I2C
        portCbBoxI2C = QComboBox(self)
        portCbBoxI2C.setEnabled(enableSelections and gglobs.I2CActivation)
        portCbBoxI2C.addItems(selection_ports)
        portCbBoxI2C.setToolTip('Select the USB-to-Serial port')
        portCbBoxI2C.setCurrentIndex(portCbBoxI2C.findText(gglobs.I2Cusbport))

        # Combo Box Baudrates for I2C
        baudCbBoxI2C = QComboBox(self)
        baudCbBoxI2C.setEnabled(enableSelections and gglobs.I2CActivation)
        baudCbBoxI2C.addItems(selection_baudI2C)
        baudCbBoxI2C.setToolTip('Select the USB-to-Serial baudrate')
        baudCbBoxI2C.setCurrentIndex(baudCbBoxI2C.findText(str(gglobs.I2Cbaudrate)))

        # Combo Box Ports for GS
        portCbBoxGS = QComboBox(self)
        portCbBoxGS.setEnabled(enableSelections and gglobs.GSActivation)
        portCbBoxGS.addItems(selection_ports)
        portCbBoxGS.setToolTip('Select the USB-to-Serial port')
        portCbBoxGS.setCurrentIndex(portCbBoxGS.findText(gglobs.GSusbport))

        # Combo Box Baudrates for GS
        baudCbBoxGS = QComboBox(self)
        baudCbBoxGS.setEnabled(enableSelections and gglobs.GSActivation)
        baudCbBoxGS.addItems(selection_baudGS)
        baudCbBoxGS.setToolTip('Select the USB-to-Serial baudrate')
        baudCbBoxGS.setCurrentIndex(baudCbBoxGS.findText(str(gglobs.GSbaudrate)))

        # H-Layout of Combo Boxes for GMC
        cblayoutGMC = QHBoxLayout()
        cblayoutGMC.addWidget(portCbBoxGMC)
        cblayoutGMC.addWidget(baudCbBoxGMC)

        # H-Layout of Combo Boxes for I2C
        cblayoutI2C = QHBoxLayout()
        cblayoutI2C.addWidget(portCbBoxI2C)
        cblayoutI2C.addWidget(baudCbBoxI2C)

        # H-Layout of Combo Boxes for GS
        cblayoutGS = QHBoxLayout()
        cblayoutGS.addWidget(portCbBoxGS)
        cblayoutGS.addWidget(baudCbBoxGS)


        # hsplabel set Introductory Text
        hsplabel = QLabel()
        hsplabel.setText(hsp)


        # hsp2label
        hsp2 = "\nSelect port and baudrate for each activated device with a serial connection:\n"
        hsp2 += "(GeigerLog's current settings are preselected if available)\n"

        hsp2label = QLabel()
        hsp2label.setText(hsp2)
        #~hsp2label.setDisabled(not enableSelections)
        hsp2label.setEnabled(enableSelections)

        # GMCDevice Label
        GMCDevice = QLabel("GMC Device:")
        GMCDevice.setEnabled(enableSelections and gglobs.GMCActivation)

        # I2CDevice Label
        I2CDevice = QLabel("I2C Device:")
        I2CDevice.setEnabled(enableSelections and gglobs.I2CActivation)

        # I2CDevice Label
        GSDevice = QLabel("GS Device:")
        GSDevice.setEnabled(enableSelections and gglobs.GSActivation)

        # hsp3label
        if isAnyDeviceActivated:
            hsp3 = "\nWhen you press OK, any logging will be stopped, and all of GeigerLog's devices \n"
            hsp3 += "will be disconnected, then reconnected with the chosen settings!\n"
            hsp3 += "\nPress Cancel to close without making any changes."
        else:
            hsp3 = "\nNo activated device was found\n"
            hsp3 += "\nPress Cancel to close."


        hsp3label = QLabel()
        hsp3label.setText(hsp3)
        #hsp3label.setDisabled(not enableSelections)

        # Dialog Box
        title = "Help - Show & Select USB Port and Baudrate"
        d = QDialog(self)
        d.setWindowIcon(self.iconGeigerLog)
        d.setFont(self.fontstd)
        d.setWindowTitle(title)
        #d.setWindowModality(Qt.ApplicationModal) # no effect of either setting
        #d.setWindowModality(Qt.WindowModal)

        # Button Box
        bbox      = QDialogButtonBox()
        if enableSelections and isAnyDeviceActivated:
            bbox.setStandardButtons(QDialogButtonBox.Ok| QDialogButtonBox.Cancel)
            bbox.accepted.connect(lambda: d.done(1))     # ok
        else:
            bbox.setStandardButtons(QDialogButtonBox.Cancel)
            bbox.accepted.connect(lambda: d.done(1))     # ok
        bbox.rejected.connect(lambda: d.done(-1))    # cancel

        layoutV = QVBoxLayout(d)
        layoutV.addWidget(hsplabel)
        layoutV.addWidget(hsp2label)

        if 1 or gglobs.GMCActivation:
            layoutV.addWidget(GMCDevice)
            layoutV.addLayout(cblayoutGMC)

        if 1 or  gglobs.I2CActivation:
            layoutV.addWidget(I2CDevice)
            layoutV.addLayout(cblayoutI2C)

        if 1 or  gglobs.GSActivation:
            layoutV.addWidget(GSDevice)
            layoutV.addLayout(cblayoutGS)

        layoutV.addWidget(hsp3label)
        layoutV.addWidget(bbox)

        retval = d.exec()
        #print("---retval=",retval)

        if retval != 1:      # user has selected Cancel or pressed ESC
            dprint("helpSetPort: cancelled by user")

        else:
            fprint(header(title))
            if gglobs.GMCActivation:
                gglobs.GMCusbport  = portCbBoxGMC.currentText()
                gglobs.GMCbaudrate = int(baudCbBoxGMC.currentText())
                dprint("helpSetPort: Selection: {} with Baudrate: {}".format(gglobs.GMCusbport, gglobs.GMCbaudrate))
                fprint("GMC Device:")
                fprint("- USB-to-Serial Port:",   gglobs.GMCusbport)
                fprint("- Baudrate:",             gglobs.GMCbaudrate)

            if gglobs.I2CActivation:
                gglobs.I2Cusbport  = portCbBoxI2C.currentText()
                gglobs.I2Cbaudrate = int(baudCbBoxI2C.currentText())
                dprint("helpSetPort: Selection: {} with Baudrate: {}".format(gglobs.I2Cusbport, gglobs.I2Cbaudrate))
                fprint("I2C Device:")
                fprint("- USB-to-Serial Port:",   gglobs.I2Cusbport)
                fprint("- Baudrate:",             gglobs.I2Cbaudrate)

            if gglobs.GSActivation:
                gglobs.GSusbport  = portCbBoxGS.currentText()
                gglobs.GSbaudrate = int(baudCbBoxGS.currentText())
                dprint("helpSetPort: Selection: {} with Baudrate: {}".format(gglobs.GSusbport, gglobs.GSbaudrate))
                fprint("GS Device:")
                fprint("- USB-to-Serial Port:",   gglobs.GSusbport)
                fprint("- Baudrate:",             gglobs.GSbaudrate)

            self.stopLogging()
            self.switchConnections(new_connection = "OFF")
            self.switchConnections(new_connection = "ON")

        setDebugIndent(0)


    def changeOptions(self):
        """Switches State of some options"""

        options       = ("Verbose  = False",
                         "Verbose  = True",
                         "Debug    = False",
                         "Debug    = True",
                         "Redirect = False",
                         "Redirect = True",
                         "testing  = False",
                         "testing  = True",
                         "werbose  = False",
                         "werbose  = True",
                         "devel    = False",
                         "devel    = True",
                         "stattest = False",
                         "stattest = True",
                         )

        index         = 0
        text, ok      = QInputDialog().getItem(self, 'Switch Option', "Select new option setting and press ok:   ", options, index, False )
        vprint("changeOptions: text= '{}', ok={}".format( text, ok))

        if not ok: return      # user has selected Cancel

        newIndex    = options.index(text)

        fprint(header("Change Options"))
        fprint("New Option setting:", "{}".format(options[newIndex]))
    # The ranking is debug --> verbose --> werbose
    # if any is true, the higher one(s) must also be true
    # verbose
        if   newIndex == 0:
            gglobs.verbose  = False
            gglobs.werbose  = False

        elif newIndex == 1:
            gglobs.verbose  = True
            gglobs.debug    = True

    # debug
        elif newIndex == 2:
            gglobs.debug    = False
            gglobs.verbose  = False
            gglobs.werbose  = False
        elif newIndex == 3:
            gglobs.debug    = True

    # redirect
        elif newIndex == 4:
            gglobs.redirect = False
        elif newIndex == 5:
            gglobs.redirect = True

    # testing
        elif newIndex == 6:
            gglobs.testing  = False
        elif newIndex == 7:
            gglobs.testing  = True

    # werbose
        elif newIndex == 8:
            gglobs.werbose  = False
        elif newIndex == 9:
            gglobs.werbose  = True
            gglobs.verbose  = True
            gglobs.debug    = True

    # devel
        elif newIndex == 10:
            gglobs.devel  = False
            #gglobs.devel1 = False
            #gglobs.devel2 = False

        elif newIndex == 11:
            gglobs.devel  = True
            #gglobs.devel1  = True
            #gglobs.devel2    = True

    # stattest
        elif newIndex == 12:
            gglobs.stattest  = False

        elif newIndex == 13:
            gglobs.stattest  = True


    def showSystemInfo(self):
        """System Info on the Devel Menu"""

        screen           = QDesktopWidget().screenGeometry()
        screen_available = QDesktopWidget().availableGeometry()
        geom             = self.geometry()
        geom_frame       = self.frameGeometry()

        fmt              = "{:33s}{}\n"
        si               = ""

        # user
        si += fmt.format("Username:",                         "{}".format(os.environ.get('USER')))

        # platform
        si += fmt.format("\nPlatform:",                         "")
        si += fmt.format("  Operating System:",               "{}".format(platform.platform()))
        si += fmt.format("  Machine:",                        "{}, {}".format(platform.machine(), platform.architecture()[0]))
        si += fmt.format("  Byte Order:",                     "{}".format(sys.byteorder))

        # versions
        si += fmt.format("\nVersion status:",                   "")
        for a in getVersionStatus():
            si += fmt.format( "  {:}:".format(a[0]),          "{}".format( a[1]))

        # runtime
        si += fmt.format("\nRuntime settings:",                 "")
        si += fmt.format("  Flag DEBUG:",                    str(gglobs.debug))
        si += fmt.format("  Flag VERBOSE:",                  str(gglobs.verbose))
        si += fmt.format("  Flag werbose:",                  str(gglobs.werbose))
        si += fmt.format("  Flag KeepFF:",                   str(gglobs.keepFF))
        si += fmt.format("  Flag Redirect:",                 str(gglobs.redirect))
        si += fmt.format("  Flag Devel:",                    str(gglobs.devel))
        si += fmt.format("  Flag Devel1:",                   str(gglobs.devel1))
        si += fmt.format("  Flag Devel2:",                   str(gglobs.devel2))
        si += fmt.format("  Flag Testing:",                  str(gglobs.testing))
        si += fmt.format("  Flag GSTesting:",                str(gglobs.GStesting))
        si += fmt.format("  Flag tput:",                     str(gglobs.tput))
        si += fmt.format("  GeigerLog Program Directory:",   str(getProgPath()))
        si += fmt.format("  GeigerLog Data Directory:",      str(gglobs.dataPath))
        si += fmt.format("  GeigerLog Resource Directory:",  str(gglobs.gresPath))
        si += fmt.format("  GeigerLog Manual:",              str(gglobs.manual_filename))

        # GUI
        si += fmt.format("\nGUI:",                              "")
        si += fmt.format("  Monitor:",                        "")
        si += fmt.format("   Screen size - Hardware:",        "{}x{}".format(screen.width(), screen.height()))
        si += fmt.format("   Screen size - Available:",       "{}x{}, at position: x={}, y={}".format(screen_available.width(), screen_available.height(), screen_available.x(), screen_available.y()))
        si += fmt.format("   Current window size:",           "{}x{} including window frame (w/o frame: {}x{})".format(geom_frame.width(), geom_frame.height(), geom.width(), geom.height()))
        si += fmt.format("  Styles:",                         "")
        si += fmt.format("   Styles available on System:",    QStyleFactory.keys())
        si += fmt.format("   Active Style (internal name):",  str(app.style().metaObject().className()))
        si += fmt.format("  Fonts:",                          "")
        si += fmt.format("   Active Font - Application:",     strFontInfo("", app.font()))
        si += fmt.format("   Active Font - Menubar:",         strFontInfo("", self.menubar.fontInfo()))
        si += fmt.format("   Active Font - NotePad:",         strFontInfo("", self.notePad.fontInfo()))
        si += fmt.format("   Active Font - LogPad:",          strFontInfo("", self.logPad.fontInfo()))

        # GMC device
        si += fmt.format("\nGMC Device:",                     "")
        si += fmt.format("  Model connected:",                str(gglobs.GMCdeviceDetected))

        try: # the comma-separator fails if gglobs.GMCmemory is still 'auto'
            si += fmt.format("  Memory (bytes):",                "{:,}".format(gglobs.GMCmemory))
        except:
            si += fmt.format("  Memory (bytes):",                "{:}".format(gglobs.GMCmemory))

        try: # the comma-separator fails if gglobs.SPIRpage is still 'auto'
            si += fmt.format("  SPIRpage Size (bytes):",         "{:,}"    .format(gglobs.SPIRpage))
        except:
            si += fmt.format("  SPIRpage Size (bytes):",         "{:}"    .format(gglobs.SPIRpage))

        si += fmt.format("  SPIRbugfix:",                    "{:}"    .format(gglobs.SPIRbugfix))
        si += fmt.format("  configsize (bytes):",            "{:}"    .format(gglobs.configsize))
        si += fmt.format("  Calibration (µSv/h / CPM):",     str(gglobs.calibration1st))
        si += fmt.format("  Calibration 2nd (µSv/h / CPM):",     str(gglobs.calibration2nd))
        si += fmt.format("  voltagebytes (bytes):",         "{:}"    .format(gglobs.voltagebytes))
        si += fmt.format("  endianness:",                   "{:}"    .format(gglobs.endianness))
        si += fmt.format("  History Saving Mode:",           str(gglobs.savedatatype))

        # I2C device
        si += fmt.format("\nI2C Device:",                     "")
        si += fmt.format("  Model connected:",               str(gglobs.I2CDeviceDetected))
        si += fmt.format("  Sensor: #1:",                    str(gglobs.I2CSensor1))
        si += fmt.format("  Sensor: #2:",                    str(gglobs.I2CSensor2))

        # GS device
        si += fmt.format("\nGS Device:",                     "")
        si += fmt.format("  Model connected:",               str(gglobs.GSDeviceDetected))
        si += fmt.format("  Calibration (µSv/h / CPM):",     str(gglobs.GSCalibration))
        si += fmt.format("  Firmware:",                      str(gglobs.GSFirmware))
        si += fmt.format("  Serial Number:",                 str(gglobs.GSSerialNumber))

        # Serial Ports
        si += fmt.format("\nUSB-to-Serial Port Settings:",   "")

        # GMC USB port
        si += fmt.format("  GMC Serial (USB) Port Settings:",  "")
        si += fmt.format("   Port:",                          str(gglobs.GMCusbport))
        si += fmt.format("   Baudrate:",                      "{:,}".format(int(gglobs.GMCbaudrate)))
        si += fmt.format("   Timeout: (Read)",                str(gglobs.GMCtimeout))
        si += fmt.format("   Timeout: (Write)",               str(gglobs.GMCtimeout_write))
        si += fmt.format("   ttyS:",                          str(gglobs.GMCttyS))

        # I2C USB port
        si += fmt.format("  I2C Serial (USB) Port Settings:",  "")
        si += fmt.format("   Port:",                          str(gglobs.I2Cusbport))
        si += fmt.format("   Baudrate:",                      "{:,}".format(int(gglobs.I2Cbaudrate)))
        si += fmt.format("   Timeout: (Read)",                str(gglobs.I2Ctimeout))
        si += fmt.format("   Timeout: (Write)",               str(gglobs.I2Ctimeout_write))
        si += fmt.format("   ttyS:",                          str(gglobs.I2CttyS))

        # GS USB port
        si += fmt.format("  GS Serial (USB) Port Settings:",  "")
        si += fmt.format("   Port:",                          str(gglobs.GSusbport))
        si += fmt.format("   Baudrate:",                      "{:,}".format(int(gglobs.GSbaudrate)))
        si += fmt.format("   Timeout: (Read)",                str(gglobs.GStimeout))
        si += fmt.format("   Timeout: (Write)",               str(gglobs.GStimeout_write))
        si += fmt.format("   ttyS:",                          str(gglobs.GSttyS))

        # worldmaps
        si += fmt.format("\nWorldmaps Settings:", "")
        for key in ("Website", "URL", "UserID", "CounterID", "SSID", "Password", "Period"):
            si += fmt.format("  " + key, gglobs.GMCmap[key])

        lsysinfo = QTextBrowser()                # label to hold the text
        lsysinfo.setLineWrapMode(QTextEdit.WidgetWidth)
        lsysinfo.setText(si)

        #dlg = QDialog(self)
        dlg = QDialog()
        dlg.setWindowIcon(self.iconGeigerLog)
        dlg.setWindowTitle("Help - System Info")
        dlg.setFont(self.fontstd)
        dlg.setWindowModality   (Qt.WindowModal)
        dlg.setMinimumWidth(1200)
        dlg.setMinimumHeight(690)

        bbox = QDialogButtonBox()
        bbox.setStandardButtons(QDialogButtonBox.Ok)
        bbox.accepted.connect(lambda: dlg.done(0))

        layoutV = QVBoxLayout(dlg)
        layoutV.addWidget(lsysinfo)
        layoutV.addWidget(bbox)

        dlg.exec()


    def openManual(self):
        """Show the GeigerLog Manual, first try a local version, but if not
        present, then the version on SourceForge"""

        manual_file = None

        if gglobs.manual_filename != 'auto':
            # if filename defined in config file, use that name. File does exist,
            # because if not, gglobs.manual_filename would have has been
            # overwritten with 'auto' when reading the config
            manual_file = getProgPath() + "/" + gglobs.manual_filename
        else:
            # if NOT defined in config file, use first found file which begins
            # with 'GeigerLog-Manual'
            path = getProgPath() + "/"
            for filename in os.listdir(path):
                #print("filename: ", filename)
                if re.match("GeigerLog-Manual", filename):
                    #print "filename", filename
                    manual_file = getProgPath() + "/" + filename
                    break                   # manual found, exit for loop

        if manual_file == None:
            efprint("The file 'GeigerLog-Manual-xyz', with xyz being a version number, is missing")
            qefprint("from the GeigerLog working directory 'geigerlog'.")
            fprint("Now trying to find the file online.")
        else:
            dprint("Using Manual_file: ", manual_file)


        if manual_file != None:
            try:
                if sys.platform.startswith('linux'):
                    # xdg-open command in the Linux system is used to open a file
                    # or URL in the user’s preferred application.
                    subprocess.call(["xdg-open", manual_file])
                    dprint("Showing '{}' via xdg-open on Linux".format(manual_file))
                else:
                    os.startfile(manual_file)
                    dprint("Showing '{}' via os.startfile on other OS".format(manual_file))

                return
            except:
                print(sys.exc_info())
                dprint("Failure Showing '{}' via xdg-open on Linux or via os.startfile on other OS".format(manual_file))

            try:
                if sys.platform.startswith('linux'):
                    subprocess.call(["firefox", manual_file])
                    dprint("Showing '{}' via firefox on Linux".format(manual_file))
                else:
                    os.startfile(manual_file)
                    dprint("Showing '{}' via os.startfile on other OS".format(manual_file))

                return
            except:
                print(sys.exc_info())
                dprint("Failure Showing '{}' via firefox on Linux or via os.startfile on other OS".format(manual_file))

            try:
                import webbrowser
                webbrowser.open(manual_file)
                dprint("Showing '{}' via import webbrowser".format(manual_file))

                return
            except:
                print(sys.exc_info())
                dprint("Failure Showing '{}' via import webbrowser".format(manual_file))


        try:
            shortv = gglobs.__version__.split("_")[0]   # use only the version part before '_'
            #shortv = "0.9.92"
            #print("shortv: ", shortv)
            url = QUrl('https://sourceforge.net/projects/geigerlog/files/GeigerLog-Manual-v{}.pdf'.format(shortv))
            if QDesktopServices.openUrl(url):
                dprint("Showing QUrl '{}'".format(url))
            else:
                QMessageBox.warning(self, 'GeigerLog Manual', 'Could not open GeigerLog Manual')
                dprint("Failure Showing manual with QUrl '{}'".format(url))

            return
        except:
            print(sys.exc_info())
            dprint("Failure Showing manual with QUrl")

        efprint("Could not find GeigerLog-Manual, neither locally nor online!")


    def autoDiscoverUSBPort(self, device="GMC"):
        """USB Autodiscovery with option to select any found connection.
        device options: GMC, GS, I2C"""

        fnc = "autoDiscoverUSBPort: "
        windowTitle = "Autodiscover USB-to-Serial Port for Device:  '{}'".format(device)

        if device not in ("GMC", "GS", "I2C"):
            printProgError(fnc + "incorrectly defined device: {}".format(device))

        if gglobs.logging :
            self.showStatusMessage("Cannot autoDiscover when logging! Stop logging first")
            dprint(fnc + "Cannot autodiscover when logging! Stop logging first")
            return


        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setWindowTitle(windowTitle)
        #msg.setFont(self.fontstd)
        critical = """                            C A U T I O N !

This discovery will write-to and read-from all available USB-to-Serial ports.

If any other program is communicating with these devices at the same time, both program and devices may be severely disturbed!

Note that this applies ONLY to USB-to-Serial port connections. Any other native USB de­vices (mouse, keyboard, printer, ...) won’t be impacted by the discovery!

It is advisable to stop all those other activities for the duration of this discovery, but leave the cables connected.

All devices under GeigerLog's control will automatically be disconnected by GeigerLog before the test starts.

Click OK to proceed with the discovery, otherwise click Cancel.
        """
        msg.setText(critical)
        msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        msg.setDefaultButton(QMessageBox.Cancel)
        msg.setEscapeButton(QMessageBox.Cancel)
        if msg.exec() != 1024:      return

        dprint(fnc + "device: '{}'".format(device))
        setDebugIndent(1)

        # disconnect everything if anything is connected
        if gglobs.DevicesConnected > 0:
            self.switchConnections(new_connection = "OFF")
            Qt_update()

        self.setBusyCursor()
        rec, errmessage = autoPORT(device)
        self.setNormalCursor()

        msg = QMessageBox(self)
        msg.setWindowTitle(windowTitle)
        #msg.setFont(self.fontstd)
        msg.setIcon(QMessageBox.Information)
        msg.setWindowIcon(self.iconGeigerLog)

        if rec == None:
            flag = "fail"
            txt1 = errmessage + "\n\nIs device connected? Check cable and plugs! Re-run in a few seconds."
        else:
            if len(rec) == 1:
                flag  = "success"
                txt1  = "A device '{}' was found at:\n".format(device)
                txt1 += "\n     Port: {:20s}  \tBaudrate: {}".format(rec[0][0], rec[0][1])
                txt1 += "\n\nPress OK to make this your new setting and connect, Cancel otherwise."
                txt1 += "\n\nTo make this permanent, edit the configuration file geigerlog.cfg\nand enter above settings in respective SerialPort section."

            else:
                flag  = "fail"
                txt1  = "The following ports and baudrates have connected devices:\n"
                for i in rec:
                    txt1 += "\n     Port: {:20s}  \tBaudrate: {}".format(i[0], i[1])
                txt1 += "\n\nGeigerLog can handle only a single connected device of each type."
                txt1 += "\n\nEither remove all devices except one now and re-run 'USB Autodiscovery', or "
                txt1 += "edit the configuration file geigerlog.cfg in the respective Serial Port section to define your device."

        msg.setText(txt1)

        txt1  = "-" * 100
        txt1 += "\nThe current settings of GeigerLog for device '{}' are: \n".format(device)
        if   device == "GMC":   txt1 += "\n     Port: {:20s}  \tBaudrate: {}".format(gglobs.GMCusbport, gglobs.GMCbaudrate)
        elif device == "GS":    txt1 += "\n     Port: {:20s}  \tBaudrate: {}".format(gglobs.GSusbport,  gglobs.GSbaudrate)
        elif device == "I2C":   txt1 += "\n     Port: {:20s}  \tBaudrate: {}".format(gglobs.I2Cusbport, gglobs.I2Cbaudrate)

        msg.setInformativeText(txt1)
        msg.setDefaultButton(QMessageBox.Cancel)
        msg.setEscapeButton(QMessageBox.Cancel)
        if flag == "fail":      msg.setStandardButtons(QMessageBox.Cancel)
        else:                   msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)

        if msg.exec() == 1024:
            dprint(fnc + "Accepting autodiscovered port settings; connecting now")
            if   device == "GMC":   gglobs.GMCusbport, gglobs.GMCbaudrate = str(rec[0][0]), str(rec[0][1])
            elif device == "GS":    gglobs.GSusbport,  gglobs.GSbaudrate  = str(rec[0][0]), str(rec[0][1])
            elif device == "I2C":   gglobs.I2Cusbport, gglobs.I2Cbaudrate = str(rec[0][0]), str(rec[0][1])
            self.switchConnections(new_connection = "ON")
        else:
            dprint(fnc + "User not accepting autodiscovered port settings; cancelling now")

        setDebugIndent(0)


    def helpViewScaling(self):
        """shows the current settings of [ValueScaling] and [GraphScaling]"""

# value
        valueBox=QFormLayout()
        valueBox.setSizeConstraint (QLayout.SetFixedSize)
        #valueBox.setFieldGrowthPolicy (QFormLayout.AllNonFixedFieldsGrow)
        #valueBox.setFieldGrowthPolicy (QFormLayout.FieldsStayAtSizeHint)
        valueBox.setFieldGrowthPolicy (QFormLayout.ExpandingFieldsGrow)

        #valueBox.RowWrapPolicy(QFormLayout.DontWrapRows)
        valueBox.RowWrapPolicy(QFormLayout.WrapAllRows)
        #valueBox.RowWrapPolicy(QFormLayout.WrapLongRows)

        valueBox.addRow(QLabel("{:60s}".format("<b>ValueScaling</b> - it DOES modify the saved value!<br> ")))
        for vname in gglobs.varnames:
            valueBox.addRow(vname, QLineEdit(gglobs.ValueScale[vname]))

# graph
        graphBox=QFormLayout()
        #graphBox.setFieldGrowthPolicy (QFormLayout.AllNonFixedFieldsGrow)
        #graphBox.setFieldGrowthPolicy (QFormLayout.FieldsStayAtSizeHint)
        graphBox.setFieldGrowthPolicy (QFormLayout.ExpandingFieldsGrow)

        graphBox.RowWrapPolicy(QFormLayout.DontWrapRows)
        #graphBox.RowWrapPolicy(QFormLayout.WrapAllRows)
        #graphBox.RowWrapPolicy(QFormLayout.WrapLongRows)

        graphBox.addRow(QLabel("{:60s}".format("<b>GraphScaling</b> - it does NOT modify the saved value, <br>only the plotted value")))
        for vname in gglobs.varnames:
            graphBox.addRow(vname, QLineEdit(gglobs.GraphScale[vname]))

        vgLayout = QHBoxLayout()
        vgLayout.addLayout(valueBox)
        vgLayout.addLayout(graphBox)

        self.dialog = QDialog()
        self.dialog.setWindowIcon(self.iconGeigerLog)
        #self.dialog.setFont(self.fontstd)
        self.dialog.setWindowTitle("View and Edit Current Scaling")
        self.dialog.setWindowModality(Qt.ApplicationModal)
        #~ self.dialog.setWindowModality(Qt.WindowModal)
        self.dialog.setMinimumWidth(700)
        self.dialog.setMaximumWidth(1000)
        #self.dialog.setMinimumHeight(gglobs.window_height + 50)


        # buttonbox: https://srinikom.github.io/pyside-docs/PySide/QtGui/QDialogButtonBox.html
        bbox = QDialogButtonBox()
        bbox.setStandardButtons(QDialogButtonBox.Ok|QDialogButtonBox.Cancel)
        bbox.accepted.connect(lambda: self.dialog.done(0))
        bbox.rejected.connect(lambda: self.dialog.done(1))

        layoutV = QVBoxLayout(self.dialog)
        #layoutV.addWidget(QLabel("See configuration file geigerlog.cfg in topics [ValueScaling] and [GraphScaling] for guidance<br>"))
        layoutV.addWidget(QLabel("See GeigerLog manual in chapter <b>Configuration of GeigerLog</b>, topic <b>Scaling</b>, for guidance<br>"))
        layoutV.addLayout(vgLayout)
        layoutV.addWidget(bbox)

        resultdlg = self.dialog.exec()             # both seem to work the same
        #print("-------------Ex:", resultdlg)

        if resultdlg == 0:
            #print("row count: ", valueBox.rowCount(), graphBox.rowCount())
            for i in range(0, len(gglobs.varnames) + 1):
                if valueBox.itemAt(i, QFormLayout.LabelRole) is not None:
                    vvname = (valueBox.itemAt(i, QFormLayout.LabelRole).widget().text()).strip()
                    vval   = (valueBox.itemAt(i, QFormLayout.FieldRole).widget().text()).strip()
                    wprint("valueBox i: {:2d}  {:10s}  {}".format(i, vvname, vval))
                    gglobs.ValueScale[vvname] = vval

            for i in range(0, len(gglobs.varnames) + 1):
                if graphBox.itemAt(i, QFormLayout.LabelRole) is not None:
                    gvname = (graphBox.itemAt(i, QFormLayout.LabelRole).widget().text()).strip()
                    gval   = (graphBox.itemAt(i, QFormLayout.FieldRole).widget().text()).strip()
                    wprint("graphBox i: {:2d}  {:10s}  {}".format(i, gvname, gval))
                    gglobs.GraphScale[gvname] = gval

        #print("gglobs.ValueScale: ", gglobs.ValueScale)
        #print("gglobs.GraphScale: ", gglobs.GraphScale)


#utilities in Class

    def clearNotePad(self):
        """Clear the notepad"""

        self.notePad.append("<span style='color:black;'></span>")
        self.notePad.setStyleSheet("color: rgb(60, 60, 60)")
        self.notePad.setTextColor(QColor(60, 60, 60))
        self.notePad.clear()


    def clearLogPad(self):
        """Clear the logpad"""

        self.logPad.clear()


    def setBusyCursor(self):

        QApplication.setOverrideCursor(Qt.WaitCursor)
        #QApplication.processEvents()


    def setNormalCursor(self):

        QApplication.restoreOverrideCursor()
        #QApplication.processEvents()


    def showStatusMessage(self, message, timing=0, error=True):
        """shows message by flashing the Status Bar red for 0.5 sec, then switches back to normal"""

        if error == False:
            self.statusBar.setStyleSheet("QStatusBar { }") # reset to default colors
            self.statusBar.showMessage(message, msecs=timing) # message remains until overwritten by next status
        else:
            playWav("error")
            self.statusBar.showMessage(message, msecs=timing) # message remains until overwritten by next status
            self.statusBar.setStyleSheet("QStatusBar { background-color:red; color:white; }")
            QApplication.processEvents()             # assure that things are visible
            QApplication.processEvents()             # assure that things are visible
        #    QApplication.processEvents()             # MUST do twice to make it work, strange! for PyQt4. Qt5 also?
            time.sleep(0.5)                                # stays red for 0.5 sec
            self.statusBar.setStyleSheet("QStatusBar { }") # reset to default colors


######## class ggeiger ends ###################################################


def autoPORT(device):
    """Tries to find a working port and baudrate by testing all serial
    ports for successful communication by auto discovery of baudrate.
    All available ports will be listed with the highest baudrate found.
    Ports are found as:
    /dev/ttyS0 - ttyS0              # a regular serial port
    /dev/ttyUSB0 - USB2.0-Serial    # a USB-to-Serial port
    """

    fncname = "autoPORT: "
    dprint(fncname + "Autodiscovery of USB-to-Serial Ports")
    setDebugIndent(1)

    time.sleep(0.5) # a freshly plugged in device, not fully recognized
                    # by system, sometimes produces errors
### TESTING
#    lp = getPortList(symlinks=True)    # get a list of all ports including symlinks
    lp = getPortList(symlinks=False)    # get a list of all ports, but ignore symlinks

    if len(lp) == 0:
        errmessage = fncname + "ERROR: No available serial ports found"
        dprint(errmessage, debug=True)
        setDebugIndent(0)
        return None, errmessage

    dprint(fncname + "Found these ports:", debug=True)
    ports =[]
    for p in lp :
        dprint("   ", p, debug=True)
        ports.append(str(p).split(" ",1)[0])
    ports.sort()
    ports_found = []

    includeFlag = False
    if   device == "GMC":   includeFlag = True if gglobs.GMCttyS == 'include' else False
    elif device == "I2C":   includeFlag = True if gglobs.I2CttyS == 'include' else False
    elif device == "GS":    includeFlag = True if gglobs.GSttyS  == 'include' else False

    dprint(fncname + "Testing all ports for communication:", debug=True)
    for port in ports:
        dprint(fncname + "Port:", port, debug=True)
        if "/dev/ttyS" in port:
            if includeFlag:
                dprint(fncname + "Include Flag is set for port: '{}'".format(port), debug=True)
            else:
                dprint(fncname + "Ignore Flag is set for port: '{}'".format(port), debug=True)
                continue

        if   device == "GMC":   abr = gcommands.GMCautoBAUDRATE(port)
        elif device == "I2C":   abr = gi2c.I2CautoBAUDRATE(port)
        elif device == "GS":    abr = ggscout.autoBaudrateGammaScout(port)

        if abr == None:
            dprint(fncname + "ERROR: Failure during Serial Communication on port: '{}'".format(port), debug=True)
        elif abr > 0:
            ports_found.append((port, abr))
        elif abr == 0:
            dprint(fncname + "Failure - no communication at any baudrate on port: '{}'".format(port), debug=True)

    if len(ports_found) == 0:
        errmessage = "ERROR: No communication at any serial port and baudrate"
        ports_found = None
    else:
        errmessage = ""

    dprint(fncname + errmessage)
    setDebugIndent(0)

    return ports_found, errmessage


def main():
    global app

    # set directories and file names
    gglobs.progName         = getProgName   ()
    gglobs.progPath         = getProgPath   ()
    gglobs.gresPath         = getGresPath   ()
    gglobs.dataPath         = getDataPath   ()
    gglobs.proglogPath      = getProglogPath()
    gglobs.stdlogPath       = getStdlogPath ()
    gglobs.configPath       = getConfigPath ()
    gglobs.fileDialogDir    = getDataPath   ()

    #
    # Make sure that data directory exists; create it if needed
    # exit if it cannot be made or is not writable
    #
    if os.access(gglobs.dataPath , os.F_OK): # test for file exists
        # dir exists, ok
        if not os.access(gglobs.dataPath , os.W_OK):
            # dir exists, but is not writable
            print("ERROR: main: Data directory '{}' exists, but is not writable".format(gglobs.dataDirectory))
            return 1
    else:
        # dir does not exist; make it
        try:
            os.mkdir(gglobs.dataPath )
        except:
            # dir cannot be made
            print("ERROR: main: Could not make data directory '{}'".format(gglobs.dataDirectory))
            return 1

    # Make sure the gres directory exists and is readable
    if os.access(gglobs.gresPath , os.F_OK):
        # dir exists, ok
        if not os.access(gglobs.dataPath , os.R_OK):
            # dir exists, but is not readable
            print("ERROR: main: GeigerLog resource directory {} is not readable. Please, correct".format(gglobs.gresPath))
            return 1
    else:
        print("ERROR: main: GeigerLog resource directory {} does not exist. You may have to reinstall GeigerLog".format(gglobs.gresPath))
        return 1

    #
    # parse command line options
    #
    # sys.argv[0] is progname
    try:
        #opts, args = getopt.getopt(sys.argv[1:], "hdvwRVp:b:s:", ["help", "debug", "verbose", "werbose", "Redirect", "Version", "port=", "baudrate=", "style="])
        opts, args = getopt.getopt(sys.argv[1:], "hdvwRVPs:", ["help", "debug", "verbose", "werbose", "Redirect", "Version", "Portlist", "style="])
    except getopt.GetoptError as errmessage :
        # print info like "option -a not recognized", then continue
        dprint("ERROR: '{}', use './geigerlog -h' for help".format(errmessage) , debug=True)
        return 1

    # processing the options
    for opt, optval in opts:
        if opt in ("-h", "--help"):
            #print(usage)
            print (gglobs.helpOptions)
            return

        elif opt in ("-V", "--Version"):
            print("Version status:")
            for a in getVersionStatus(): print("   {:16s}: {}".format(a[0], a[1]))
            return

        elif opt in ("-d", "--debug"):
            gglobs.debug    = True

        elif opt in ("-v", "--verbose"):
            gglobs.verbose  = True
            gglobs.debug    = True          # giving verbose implies debug

        elif opt in ("-w", "--werbose"):
            gglobs.werbose  = True
            gglobs.verbose  = True          # giving werbose implies verbose
            gglobs.debug    = True          # giving werbose implies debug

        elif opt in ("-R", "--Redirect"):
            gglobs.redirect = True

        elif opt in ("-P", "--Portlist"):
            # which ports are available?
            # lp = serial.tools.list_ports.comports(include_links=True)  # also shows e.g. /dev/geiger
            lp = serial.tools.list_ports.comports(include_links=False)  # default; no symlinks shown
            print("\nAvailable USB-to-Serial ports w/o symlinks:")
            for p in lp:     print("   ", p)
            if len(lp) == 0: print("   ", "None")
            return


    # processing the args
    for arg in args:
        if arg == "showstyles":
            print("Styles found on system: ")
            for a in QStyleFactory.keys():  print("   " + a)
            #print("See configuration file geigerlog.cfg, section [Window] for details")
            return

        if arg == "keepFF":
            gglobs.keepFF   = True

        if arg == "devel":
            gglobs.devel    = True

        if arg == "devel1":
            gglobs.devel    = True
            gglobs.devel1   = True

        if arg == "devel2":
            gglobs.devel    = True
            gglobs.devel1   = True
            gglobs.devel2   = True

        if arg == "fullhist":
            gglobs.fullhist = True

        if arg == "testing":
            gglobs.testing  = True

        if arg == "GStesting":
            gglobs.GStesting = True

        if arg == "test1":
            gglobs.test1    = True

        if arg == "test2":
            gglobs.test2    = True

        if arg == "test3":
            gglobs.test3    = True

        if arg == "test4":
            gglobs.test4    = True

        if arg == "tput":
            gglobs.tput     = True

        if arg == "stattest":
            gglobs.stattest = True

        if arg == "pico":
            gglobs.ambio_board = "PICO"

        if arg == "wroom":
            gglobs.ambio_board = "WROOM"

        if arg == "wrover":
            gglobs.ambio_board = "WROVER"


# clear and initialize the program log file 'geigerlog.proglog'
    clearProgramLogFile()


# set terminal output with or without linebreaks (works in Linux only)
    try:
        if gglobs.tput:
            subprocess.call(["tput", "rmam"]) # tput rmam: no line break on lines longer than screen
            dprint("{:28s}: {}".format("Linebreak", "tput rmam was executed - no line break"))
        else:
            subprocess.call(["tput", "smam"]) # tput smam: do line break on lines longer than screen
            dprint("{:28s}: {}".format("Linebreak", "tput smam was executed - break lines when longer than screen"))
    except:
        dprint("{:28s}: {}".format("Linebreak", "WARNING: tput rmam / tput smam command failed"), debug=True)



# Signal handlers
    #dprint("SIGINT handler before:    SIGINT: {}, getsignal(SIGINT): {}".format(signal.SIGINT, signal.getsignal(signal.SIGINT)))
    signal.signal(signal.SIGINT, signal.SIG_DFL) # to allow shut down with ctrl-c when IN THE TERMINAL
    dprint("{:28s}: SIGINT: {}, getsignal(SIGINT): {}".format("SIGINT handler activated", signal.SIGINT, signal.getsignal(signal.SIGINT)))
    #
    # defining the own signal handler does not work properly
    # but using the default above does not shut down the threaded loop of RadMon MQQT
    # Signal handlers
    # CTRL-C : properly closes all files and devices and shuts down the program
    #dprint("initRadMon: before: SIGINT: {}, getsignal(SIGINT): {}".format(signal.SIGINT, signal.getsignal(signal.SIGINT)))
    #   signal.signal(signal.SIGINT,  signal_handler)   # to handle CTRL-C
    #   signal.signal(signal.SIGTSTP, signal_handler)   # to handle CTRL-Z
    #dprint("after:  SIGINT: {}, getsignal(SIGINT): {}".format(signal.SIGINT, signal.getsignal(signal.SIGINT)))
    #
    # test for what the signals are connected to
    #for i in range(0, 65): # fails with i>64
    #    try:
    #        print(": i: , signal.getsignal(i):", i, signal.getsignal(i))
    #        print(": i: {}, signal.getsignal(i): {}".format(i, signal.getsignal(i)))
    #    except:         print(": i: , signal.getsignal(i):", i, "Failed")


    dprint("{:28s}: sys.argv: {}".format("Command line", sys.argv))
    dprint("{:28s}: options: {}, commands: {}".format("   recognized", opts, args))

    dprint("{:28s}: {}".format("Operating System", platform.platform()))
    dprint("{:28s}: {}, {}".format("Machine", platform.machine(), platform.architecture()[0]))


# print version status
    vstatus = getVersionStatus()
    dprint("Version status: ")
    for i in range(0, len(vstatus)):
        dprint("   {:25s}: {}".format(vstatus[i][0], vstatus[i][1]))

    # matplotlib backend type info
    dprint("   {:25s}: {}".format("matplotlib backend: ", matplotlib.get_backend()))


# Python search Path
    # sys.path.append('pfad/zu/irgend/was') # to extend the search path
    dprint("Python Search Paths:")
    for a in sys.path:
        dprint("   {:25s}: {}".format("sys.path", a))


# print paths
    dprint("Program Paths:")
    dprint("   {:25s}: {}".format("progName",   gglobs.progName))
    dprint("   {:25s}: {}".format("progPath",   gglobs.progPath))
    dprint("   {:25s}: {}".format("gresPath",   gglobs.gresPath))
    dprint("   {:25s}: {}".format("dataPath",   gglobs.dataPath))
    dprint("   {:25s}: {}".format("proglogPath",gglobs.proglogPath))
    dprint("   {:25s}: {}".format("configPath", gglobs.configPath))


###############################################################################
# Start app von PyQtX
    #
        # HiDPI screen
        # like here: https://stackoverflow.com/questions/41331201/pyqt-5-and-4k-screen
        #os.environ["QT_AUTO_SCREEN_SCALE_FACTOR"] = "1" # not helping
        #~print("setting:   QApplication.setAttribute(Qt.AA_EnableHighDpiScaling, True)")
        #~QApplication.setAttribute(Qt.AA_EnableHighDpiScaling, True)

    # ################
    # message: Attribute Qt::AA_EnableHighDpiScaling must be set before QCoreApplication is created.
    # QApplication.setAttribute(Qt.AA_EnableHighDpiScaling, True)
    # !!!! im Raspi führt diese Anweisung zu einer Bildschirmgröße von 960x540, obwohl Bildschirm auf
    # 1920x1080 steht! -->unbrauchbar
        #~try:
            #~QApplication.setAttribute(Qt.AA_EnableHighDpiScaling, True)
            #~vprint("EnableHighDpiScaling was set")
        #~except:
            #~vprint("Failure setting EnableHighDpiScaling")
    # ################


    # app = QApplication([]) -> results in message: (only PyQt5, not PyQt4!)
    # QApplication: invalid style override passed, ignoring it.
    #          Available styles: Windows, Fusion
    # unless a '-style <valid style>' is in sys.argv.
    #
    # app = QApplication([None, "-style", "Windows"])   # ok!
    #~app = QApplication([None, "-style", "Fusion"])    # ok!
    #~app = QApplication([None, "-style", ""])          # ok!
    #
    # This results from the setting of:  QT_STYLE_OVERRIDE="gtk"
    # can be removed on the shell:  export QT_STYLE_OVERRIDE="" -> then the message disappears
    # alternatively: remove from within Python:
    os.environ["QT_STYLE_OVERRIDE"] = ""
    #~print("============= now starting QApp:")
    #~app = QApplication(sys.argv)   # conflicts in syntax with getopt (single vs double dash)
    app = QApplication([])
    #~print("============= have started QApp:")

    app.setWindowIcon           (QIcon(QPixmap(os.path.join(gglobs.gresPath, 'icon_geigerlog.png')))) # sets the icon (overrun elsewhere)
    app.setApplicationName      ("GeigerLog")               # sets the name 'GeigerLog' as the application name
    app.setApplicationVersion   (gglobs.__version__)        # sets the GL version
    app.setFont                 (QFont("Sans", 10))         # setting the application font size (default looks close to 11)

    # allows copy&Paste also on Win, but makes all Messageboxes as HTML coding
    # cumbersome with using space and tabs for formatting
    #app.setStyleSheet("QMessageBox { messagebox-text-interaction-flags: 5; }")

    dprint("QCoreApplication:")
    dprint("   {:25s}: {}".format("applicationName()"     , QCoreApplication.applicationName()))
    dprint("   {:25s}: {}".format("applicationVersion()"  , QCoreApplication.applicationVersion()))
    dprint("   {:25s}: {}".format("applicationDirPath()"  , QCoreApplication.applicationDirPath()))
    dprint("   {:25s}: {}".format("applicationFilePath()" , QCoreApplication.applicationFilePath()))

    QCoreApplication.addLibraryPath(gglobs.progPath + "/custom_libs/") # will be listed only if folder exists
#    QCoreApplication.addLibraryPath("./");  # needed??? https://stackoverflow.com/questions/21268558/application-failed-to-start-because-it-could-not-find-or-load-the-qt-platform-pl

    libPaths    = QCoreApplication.libraryPaths()
    libPathStr  = "libraryPaths()"
    if len(libPaths) == 0:  dprint("   {:25s}: {}".format(libPathStr, "No Library Paths"))
    else:
        for a in libPaths:  dprint("   {:25s}: {}".format(libPathStr, a))

# setting the style
    # Styles:
    # latest news for PyQt5:
    # https://blog.qt.io/blog/2012/10/30/cleaning-up-styles-in-qt5-and-adding-fusion/
    # Summary: Default Qt5 has removed all styles except Windows (maybe) and added Fusion
    #
    # QStyleFactory::keys() returns a list of valid keys, on PyQt4 including e.g.
    # "Windows", "Motif", "CDE", "MotifPlus", "Platinum", "SGI" and "Compact".
    # Depending on the platform, "WindowsXP", "Aqua" or "Macintosh" may be available.
    #
    # PyQt4 returns on my desktop:
    # Breeze, Windows, Motif, CDE, Plastique, GTK+, Cleanlooks
    # best is 1)Breeze, 2)Cleanlooks, 3) Plastique, ... 6)Windows, 7)GTK+
    # PyQt5 returns on my desktop: Windows, Fusion
    #
    # app.style().metaObject().className() :  returns Style codings:
    #   Breeze            =Breeze::Style,
    #   Cleanlooks        =QCleanlooksStyle,
    #   Plastique         =QPlastiqueStyle
    #   CDE               =QCDEStyle,
    #   Motif             =QMotifStyle,
    #   Windows           =QWindowsStyle,
    #   GTK+              =QGtkStyle
    #
    # order of my preference; first is best
    # PyQt4:  styles_rank = ['Breeze', 'Cleanlooks', 'Plastique', 'Windows', 'CDE', 'Motif', 'GTK+' ]
    # PyQt5:  styles_rank = ['Fusion', 'Windows']

    dprint("Styles:")
    dprint("   {:25s}: {}".format("Default"         , app.style().metaObject().className()))
    dprint("   {:25s}: {}".format("Styles found on system" , QStyleFactory.keys()))
    for opt, optval in opts:
        if opt in ("-s", "--style"):
            available_styles = QStyleFactory.keys()
            if optval in available_styles:
                gglobs.windowStyle  = optval
                dprint("   {:25s}: '{}' - overrides default".format("Style per command line", gglobs.windowStyle))
            else:
                gglobs.windowStyle  = "auto"
                dprint("   {:25s}: '{}' - Style not available (check spelling, capitalization); ignoring".format("Style per command line", optval))

    if gglobs.windowStyle != "auto":    # existence of style had been verified
        result = app.setStyle(gglobs.windowStyle)
        if result is None: dprint("   Selected Style '{}' could not be applied".format(gglobs.windowStyle))
    dprint("   {:25s}: {}".format("Active Style is", app.style().metaObject().className()))

# Reads the configuration file
    # - these settings will override defaults in gglobs.py
    # - command line options cannot override these settings as they were evaluated before
    readGeigerLogConfig()

# importing only when needed ##################################################
    # gglobs.LJActivation is set in readGeigerLogConfig
    if gglobs.LJActivation:
        import glabjack
        global glabjack
###############################################################################

    # starting the GUI
    dprint(TGREEN + "Starting the GUI " + "-" * 110 + TDEFAULT)
    ex     = ggeiger()     # an instance of ggeiger; runs init and draws window
    status = app.exec_()   # run the GUI until closure
    dprint("Exited GUI with status of: ", status)

    try:
        if gglobs.tput:
            subprocess.call(["tput", "smam"]) # tput smam: do line break on lines longer than screen
            dprint("{:28s}: {}".format("Linebreak", "tput smam was executed - break lines longer than screen"))
    except:
        dprint("{:28s}: {}".format("Linebreak", "WARNING: tput rmam / tput smam command failed"), debug=True)

    sys.exit(status)


if __name__ == '__main__':
    main()
